 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm - Page 1 - 11/14/2020 15:50:22


       1/       0 :                     ; *******************************************************************************************
       2/       0 :                     ; HelloWorld - Write a message to the display using PutChar function
       3/       0 :                     ;
       4/       0 :                     ; Copyright (c) 2020 by Gaston Williams
       5/       0 :                     ;
       6/       0 :                     ; *******************************************************************************************
       7/       0 : ="TRUE"             UseGraphics                     EQU "TRUE"
       8/       0 : ="64x32"            Resolution                      EQU "64x32"            ; "64x32", "64x64" or "64x128"
       9/       0 : ="OFF"              BackBuffer                      EQU "OFF"               ; 'OFF', 'COPY' or 'SWAP'
      10/       0 :                     
      11/       0 : ="TRUE"             UseText                         EQU "TRUE"
      12/       0 : ="TRUE"             UseTty                          EQU "TRUE"
      13/       0 :                     
      14/       0 :                                             INCLUDE "StdDefs.asm"
(1)    1/       0 :                     ; *****************************************************************************************
(1)    2/       0 :                     ; Copyright (c) 2020 
(1)    3/       0 :                     ; by Richard Dienstknecht
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; Changes:
(1)    6/       0 :                     ; Gaston Williams, July, 2020   - Added Macros for Std Call and Std Return
(1)    7/       0 :                     ; Gaston Williams  August, 2020 - Added Macro for loading Register
(1)    8/       0 :                     ; *****************************************************************************************
(1)    9/       0 :                     
(1)   10/       0 :                     ; =========================================================================================
(1)   11/       0 :                     ; Register definitions
(1)   12/       0 :                     ; =========================================================================================
(1)   13/       0 :                     
(1)   14/       0 : =0H                 R0                                      EQU 00H
(1)   15/       0 : =1H                 R1                                      EQU 01H
(1)   16/       0 : =2H                 R2                                      EQU 02H
(1)   17/       0 : =3H                 R3                                      EQU 03H
(1)   18/       0 : =4H                 R4                                      EQU 04H
(1)   19/       0 : =5H                 R5                                      EQU 05H
(1)   20/       0 : =6H                 R6                                      EQU 06H
(1)   21/       0 : =7H                 R7                                      EQU 07H
(1)   22/       0 : =8H                 R8                                      EQU 08H
(1)   23/       0 : =9H                 R9                                      EQU 09H
(1)   24/       0 : =0AH                RA                                      EQU 0AH
(1)   25/       0 : =0BH                RB                                      EQU 0BH
(1)   26/       0 : =0CH                RC                                      EQU 0CH
(1)   27/       0 : =0DH                RD                                      EQU 0DH
(1)   28/       0 : =0EH                RE                                      EQU 0EH
(1)   29/       0 : =0FH                RF                                      EQU 0FH
(1)   30/       0 :                     
(1)   31/       0 :                     ;------------------------------------------------------------------------------------------
(1)   32/       0 :                     ; =========================================================================================
(1)   33/       0 :                     ; Macro definitions for standard call and return
(1)   34/       0 :                     ; See RCA CDP1802 User Manual, page 61 for more information
(1)   35/       0 :                     ; =========================================================================================
(1)   36/       0 :                     
(1)   37/       0 :                     CALL    MACRO   param1
(1)   38/       0 :                             SEP R4
(1)   39/       0 :                             dw  param1
(1)   40/       0 :                             ENDM
(1)   41/       0 :                             
(1)   42/       0 :                     RETURN  MACRO
(1)   43/       0 :                             SEP R5
(1)   44/       0 :                             ENDM
(1)   45/       0 :                             
(1)   46/       0 :                     LOAD    MACRO   param1, param2
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm(StdDefs.asm) - Page 2 - 11/14/2020 15:50:22


(1)   47/       0 :                             LDI  lo(param2)
(1)   48/       0 :                             PLO  param1
(1)   49/       0 :                             LDI  hi(param2)
(1)   50/       0 :                             PHI  param1     
(1)   51/       0 :                             ENDM
      15/       0 :                                             INCLUDE "Initialize.asm"
(1)    1/       0 :                     ; *****************************************************************************************
(1)    2/       0 :                     ; Copyright (c) 2020
(1)    3/       0 :                     ; by Richard Dienstknecht
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; Changes:
(1)    6/       0 :                     ; Gaston Williams, July, 2020 - Rewrote Initialisation.asm file as Initialize.asm
(1)    7/       0 :                     ; Gaston Williams, July, 2020 - Removed unused include files
(1)    8/       0 :                     ; Gaston Williams, July, 2020 - Replaced Std Call and Return with Macros
(1)    9/       0 :                     ; Gaston Williams  Aug,  2020 - Added IF blocks to change compile order
(1)   10/       0 :                     ; Gaston Williams  Aug,  2020 - Included padding file
(1)   11/       0 :                     ; Gaston Williams  Aug,  2020 - Added Macro for loading Register
(1)   12/       0 :                     ; Gaston Williams  Aug,  2020 - Restored 64x128 resolution
(1)   13/       0 :                     ; *****************************************************************************************
(1)   14/       0 :                                                     INCLUDE "bitfuncs.inc"
(2)    1/       0 : =>UNDEFINED         		ifndef   bitfuncsinc    ; avoid multiple inclusion
(2)    2/       0 : =1H                 bitfuncsinc     equ      1
(2)    3/       0 :                     
(2)    4/       0 :                                     save
(2)   77/       0 : ALL                                 restore                 ; allow listing again
(2)   78/       0 :                     
(2)   79/       0 : [1]                                 endif			; bitfuncsinc
(2)   80/       0 :                     
(2)   81/       0 :                     
(1)   15/       0 :                                                     INCLUDE "buffers.asm"
(2)    1/       0 :                     ; *****************************************************************************************
(2)    2/       0 :                     ; Copyright (c) 2020 
(2)    3/       0 :                     ; by Richard Dienstknecht
(2)    4/       0 :                     ;
(2)    5/       0 :                     ; Changes:
(2)    6/       0 :                     ; Gaston Williams, July, 2020 - Removed 64x128 Resolution logic
(2)    7/       0 :                     ; Gaston Williams, July, 2020 - Put Buffer definitions into a separate file
(2)    8/       0 :                     ; Gaston Williams, Aug,  2020 - Added Cursor and Video flag definitions
(2)    9/       0 :                     ; Gaston Williams, Sept, 2020 - Restored 64x128 Resolution logic
(2)   10/       0 :                     ; *****************************************************************************************
(2)   11/       0 :                     
(2)   12/       0 :                     ; =========================================================================================
(2)   13/       0 :                     ; Define Video Buffers and Main Stack
(2)   14/       0 :                     ; =========================================================================================
(2)   15/       0 :                                                             CPU 1802
(2)   16/       0 :                                                             
(2)   17/       0 :                     ; =========================================================================================
(2)   18/       0 :                     ; Display buffers
(2)   19/       0 :                     ; =========================================================================================
(2)   20/       0 : =>TRUE                              IF BackBuffer == "OFF"                  ; OFF uses only one video buffer
(2)   21/       0 : =>TRUE                                      IF Resolution == "64x32"
(2)   22/    7E00 :                                                     ORG 7E00H       
(2)   23/    7E00 :                     DisplayBuffer:                  db 256 dup (?)
(2)   24/    7F00 : [21]                                        ENDIF
(2)   25/    7F00 :                     
(2)   26/    7F00 : =>FALSE                                     IF Resolution == "64x64"
(2)   27/    7F00 :                                                     ORG 7D00H
(2)   28/    7F00 :                     DisplayBuffer:                  db 512 dup (?)
(2)   29/    7F00 : [26]                                        ENDIF
(2)   30/    7F00 :                     
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm(buffers.asm) - Page 3 - 11/14/2020 15:50:22


(2)   31/    7F00 : =>FALSE                                     IF Resolution == "64x128"
(2)   32/    7F00 :                                                     ORG 7B00H
(2)   33/    7F00 :                     DisplayBuffer:                  db 1024 dup (?)
(2)   34/    7F00 : [31]                                        ENDIF
(2)   35/    7F00 :                                             
(2)   36/    7F00 :                                     
(2)   37/    7F00 : [20]                                ENDIF
(2)   38/    7F00 :                                     
(2)   39/    7F00 : =>FALSE                             IF BackBuffer <> "OFF"                  ; COPY and SWAP use two video buffers
(2)   40/    7F00 :                                             IF Resolution == "64x32"
(2)   41/    7F00 :                                                     ORG 7D00H       
(2)   42/    7F00 :                     DisplayBuffer:                  db 256 dup (?)
(2)   43/    7F00 :                     DoubleBuffer:                   db 256 dup (?)
(2)   44/    7F00 : [40]                                        ENDIF
(2)   45/    7F00 :                     
(2)   46/    7F00 :                                             IF Resolution == "64x64"
(2)   47/    7F00 :                                                     ORG 7B00H
(2)   48/    7F00 :                     DisplayBuffer:                  db 512 dup (?)
(2)   49/    7F00 :                     DoubleBuffer:                   db 512 dup (?)
(2)   50/    7F00 : [46]                                        ENDIF
(2)   51/    7F00 :                                             
(2)   52/    7F00 :                                             IF Resolution == "64x128"
(2)   53/    7F00 :                                                     ORG 7700H
(2)   54/    7F00 :                     DisplayBuffer:                  db 1024 dup (?)
(2)   55/    7F00 :                     DoubleBuffer:                   db 1024 dup (?)
(2)   56/    7F00 : [52]                                        ENDIF                                   
(2)   57/    7F00 : [39]                                ENDIF
(2)   58/    7F00 :                     
(2)   59/    7F00 :                                                     ORG 7F00H
(2)   60/    7F00 :                                                     
(2)   61/    7F00 :                     ; =========================================================================================
(2)   62/    7F00 :                     ; Buffer for unpacked characters
(2)   63/    7F00 :                     ; =========================================================================================
(2)   64/    7F00 :                     
(2)   65/    7F00 :                     CharacterPattern:       db 5 dup ?
(2)   66/    7F05 :                     
(2)   67/    7F05 :                     ; =========================================================================================
(2)   68/    7F05 :                     ; Cursor location for video console
(2)   69/    7F05 :                     ; =========================================================================================
(2)   70/    7F05 :                     
(2)   71/    7F05 :                     CursorX                 db ?
(2)   72/    7F06 :                     
(2)   73/    7F06 :                     CursorY                 db ?
(2)   74/    7F07 :                     ;------------------------------------------------------------------------------------------
(2)   75/    7F07 :                     
(2)   76/    7F07 :                     ; =========================================================================================
(2)   77/    7F07 :                     ; Flag to indicate if 1861 Video is currently on or off
(2)   78/    7F07 :                     ; =========================================================================================
(2)   79/    7F07 :                     
(2)   80/    7F07 :                     VideoFlag               db ?
(2)   81/    7F08 :                     ;------------------------------------------------------------------------------------------
(2)   82/    7F08 :                     
(2)   83/    7F08 :                     ; 
(2)   84/    7F08 :                     ;Buffers and variables end at 7F08, leaving 120 bytes available for program stack
(2)   85/    7F08 :                     
(2)   86/    7F08 :                     
(2)   87/    7F08 :                     ; =========================================================================================
(2)   88/    7F08 :                     ; Space for the main stack
(2)   89/    7F08 :                     ; =========================================================================================
(2)   90/    7F08 :                     
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm(buffers.asm) - Page 4 - 11/14/2020 15:50:22


(2)   91/    7F08 :                                                             
(2)   92/    7F7F :                                             ORG 7F7FH
(2)   93/    7F7F :                     StackTop:
(2)   94/    7F7F :                     ;------------------------------------------------------------------------------------------     
(2)   95/    7F7F :                     
(2)   96/    7F7F :                     ; =========================================================================================
(2)   97/    7F7F :                     ; Reserve 7F80H to 7FFFH for Super Monitor program
(2)   98/    7F7F :                     ; =========================================================================================
(1)   16/    7F7F :                     
(1)   17/    7F7F :                     ; =========================================================================================
(1)   18/    7F7F :                     ; Starting point of the program and initialisation of the CPU registers
(1)   19/    7F7F :                     ;
(1)   20/    7F7F :                     ; R0            Reserved as pointer to the DMA buffer
(1)   21/    7F7F :                     ; R1            Reserved as interrupt vector
(1)   22/    7F7F :                     ; R2            Main stack pointer
(1)   23/    7F7F :                     ; R3            Main program counter
(1)   24/    7F7F :                     ; R4            Program counter for standard call procedure
(1)   25/    7F7F :                     ; R5            Program counter for standard return procedure
(1)   26/    7F7F :                     ; R6            Reserved for temporary values from standard call/return procedures
(1)   27/    7F7F :                     ; R7 - RF       Free to use in the program, not initialized
(1)   28/    7F7F :                     ; =========================================================================================
(1)   29/    7F7F :                                                     CPU 1802
(1)   30/       0 :                                                     ORG 0000H
(1)   31/       0 :                     
(1)   32/       0 : (MACRO)             Init:                           LOAD R1, DisplayInt     ; DMA Buffer pointer
(1)   32/       0 : F8 44                       LDI  lo(DISPLAYINT)
(1)   32/       2 : A1                          PLO  R1
(1)   32/       3 : F8 00                       LDI  hi(DISPLAYINT)
(1)   32/       5 : B1                          PHI  R1     
(1)   33/       6 :                     
(1)   34/       6 : (MACRO)                                             LOAD R2, StackTop       ; Main Stack pointer
(1)   34/       6 : F8 7F                       LDI  lo(STACKTOP)
(1)   34/       8 : A2                          PLO  R2
(1)   34/       9 : F8 7F                       LDI  hi(STACKTOP)
(1)   34/       B : B2                          PHI  R2     
(1)   35/       C :                     
(1)   36/       C : (MACRO)                                             LOAD R3, Start          ; Main Program Counter
(1)   36/       C : F8 CD                       LDI  lo(START)
(1)   36/       E : A3                          PLO  R3
(1)   36/       F : F8 04                       LDI  hi(START)
(1)   36/      11 : B3                          PHI  R3     
(1)   37/      12 :                     
(1)   38/      12 : (MACRO)                                             LOAD R4, StdCall        ; Standard CALL procedure
(1)   38/      12 : F8 20                       LDI  lo(STDCALL)
(1)   38/      14 : A4                          PLO  R4
(1)   38/      15 : F8 00                       LDI  hi(STDCALL)
(1)   38/      17 : B4                          PHI  R4     
(1)   39/      18 :                     
(1)   40/      18 : (MACRO)                                             LOAD R5, StdReturn      ; Standard RETURN procedure
(1)   40/      18 : F8 30                       LDI  lo(STDRETURN)
(1)   40/      1A : A5                          PLO  R5
(1)   40/      1B : F8 00                       LDI  hi(STDRETURN)
(1)   40/      1D : B5                          PHI  R5     
(1)   41/      1E :                     
(1)   42/      1E : D3                                                  SEP  R3                 ; Run Main program
(1)   43/      1F :                     ;------------------------------------------------------------------------------------------
(1)   44/      1F :                     
(1)   45/      1F :                     
(1)   46/      1F :                     ; =========================================================================================
(1)   47/      1F :                     ; Standard Call Procedure
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm(Initialize.asm) - Page 5 - 11/14/2020 15:50:22


(1)   48/      1F :                     ; as described in RCA CDP1802 User Manual, page 61
(1)   49/      1F :                     ; =========================================================================================
(1)   50/      1F : D3                  STC_Exit:                       SEP  R3
(1)   51/      20 : E2                  StdCall:                        SEX  R2
(1)   52/      21 : 96                                                  GHI  R6
(1)   53/      22 : 73                                                  STXD
(1)   54/      23 : 86                                                  GLO  R6
(1)   55/      24 : 73                                                  STXD
(1)   56/      25 : 93                                                  GHI  R3
(1)   57/      26 : B6                                                  PHI  R6
(1)   58/      27 : 83                                                  GLO  R3
(1)   59/      28 : A6                                                  PLO  R6
(1)   60/      29 : 46                                                  LDA  R6
(1)   61/      2A : B3                                                  PHI  R3
(1)   62/      2B : 46                                                  LDA  R6
(1)   63/      2C : A3                                                  PLO  R3
(1)   64/      2D : 30 1F                                               BR   STC_Exit
(1)   65/      2F :                     
(1)   66/      2F :                     ;------------------------------------------------------------------------------------------
(1)   67/      2F :                     
(1)   68/      2F :                     
(1)   69/      2F :                     ; =========================================================================================
(1)   70/      2F :                     ; Standard Return Procedure
(1)   71/      2F :                     ; as described in RCA CDP1802 User Manual, page 61
(1)   72/      2F :                     ; =========================================================================================
(1)   73/      2F : D3                  STR_Exit:                       SEP  R3
(1)   74/      30 : 96                  StdReturn                       GHI  R6
(1)   75/      31 : B3                                                  PHI  R3
(1)   76/      32 : 86                                                  GLO  R6
(1)   77/      33 : A3                                                  PLO  R3
(1)   78/      34 : E2                                                  SEX  R2
(1)   79/      35 : 12                                                  INC  R2
(1)   80/      36 : 72                                                  LDXA
(1)   81/      37 : A6                                                  PLO  R6
(1)   82/      38 : F0                                                  LDX
(1)   83/      39 : B6                                                  PHI  R6
(1)   84/      3A : 30 2F                                               BR   STR_Exit
(1)   85/      3C :                     
(1)   86/      3C :                     ;------------------------------------------------------------------------------------------
(1)   87/      3C :                     
(1)   88/      3C :                     
(1)   89/      3C :                     ; =========================================================================================
(1)   90/      3C :                     ; Simple delay loop
(1)   91/      3C :                     ;
(1)   92/      3C :                     ; Parameters:
(1)   93/      3C :                     ; RF.0                          Delay time
(1)   94/      3C :                     ; =========================================================================================
(1)   95/      3C : C4                  Delay:                          NOP
(1)   96/      3D : 2F                                                  DEC  RF
(1)   97/      3E : 8F                                                  GLO  RF
(1)   98/      3F : 3A 3C                                               BNZ  Delay
(1)   99/      41 : (MACRO)                                             RETURN
(1)   99/      41 : D5                          SEP R5
(1)  100/      42 :                     
(1)  101/      42 :                     ;------------------------------------------------------------------------------------------
(1)  102/      42 :                     
(1)  103/      42 :                     
(1)  104/      42 :                     ; =========================================================================================
(1)  105/      42 :                     ; Includes - Change order of compiling to jump target not on same page errors
(1)  106/      42 :                     ; =========================================================================================
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm(Initialize.asm) - Page 6 - 11/14/2020 15:50:22


(1)  107/      42 :                     
(1)  108/      42 :                                                     INCLUDE "Graphics1861.asm"
(2)    1/      42 :                     ; *****************************************************************************************
(2)    2/      42 :                     ; Copyright (c) 2020 
(2)    3/      42 :                     ; by Richard Dienstknecht
(2)    4/      42 :                     ;
(2)    5/      42 :                     ; Changes:
(2)    6/      42 :                     ; Gaston Williams, July, 2020 - Removed 64x128 Resolution logic
(2)    7/      42 :                     ; Gaston Williams, July, 2020 - Replaced Std Call and Std Return with Macros
(2)    8/      42 :                     ; Gaston Williams  Aug,  2020 - Added Macro for loading Register
(2)    9/      42 :                     ; Gaston Williams, Sept, 2020 - Restored 64x128 Resolution logic
(2)   10/      42 :                     ; Gaston Williams  Sept, 2020 - Updated DrawSprite logic for 64x128 resolution
(2)   11/      42 :                     ; *****************************************************************************************
(2)   12/      42 :                     
(2)   13/      42 : =>TRUE                                              IF UseGraphics == "TRUE"
(2)   14/      42 :                     
(2)   15/      42 :                     
(2)   16/      42 :                     ; =========================================================================================
(2)   17/      42 :                     ; Interrupt and DMA service routine for the CDP1861 to display an effective resolution
(2)   18/      42 :                     ; of 64 x 32 pixels, using a display buffer of 256 bytes.
(2)   19/      42 :                     ; =========================================================================================
(2)   20/      42 :                     
(2)   21/      42 : =>TRUE                                                      IF Resolution == "64x32"
(2)   22/      42 :                     
(2)   23/      42 : 72                  INT_Exit:                       LDXA
(2)   24/      43 : 70                                                          RET
(2)   25/      44 : 22                  DisplayInt:                     DEC  R2
(2)   26/      45 : 78                                                          SAV
(2)   27/      46 : 22                                                          DEC  R2
(2)   28/      47 : 52                                                          STR  R2
(2)   29/      48 : C4                                                          NOP
(2)   30/      49 : C4                                                          NOP
(2)   31/      4A : C4                                                          NOP
(2)   32/      4B :                     
(2)   33/      4B : =>TRUE                                                      IF BackBuffer <> "SWAP"
(2)   34/      4B : F8 7E                                                       LDI  hi(DisplayBuffer)
(2)   35/      4D : [33]                                                        ENDIF
(2)   36/      4D :                     
(2)   37/      4D : =>FALSE                                                     IF BackBuffer == "SWAP"
(2)   38/      4D :                                                             GHI  R7
(2)   39/      4D : [37]                                                        ENDIF
(2)   40/      4D :                     
(2)   41/      4D : B0                                                          PHI  R0
(2)   42/      4E : F8 00                                                       LDI  00H
(2)   43/      50 : A0                                                          PLO  R0
(2)   44/      51 : 80                  INT_Loop:                       GLO  R0
(2)   45/      52 : E2                                                          SEX  R2
(2)   46/      53 : E2                                                          SEX  R2
(2)   47/      54 : 20                                                          DEC  R0
(2)   48/      55 : A0                                                          PLO  R0
(2)   49/      56 : E2                                                          SEX  R2
(2)   50/      57 : 20                                                          DEC  R0
(2)   51/      58 : A0                                                          PLO  R0
(2)   52/      59 : E2                                                          SEX  R2
(2)   53/      5A : 20                                                          DEC  R0
(2)   54/      5B : A0                                                          PLO  R0
(2)   55/      5C : 3C 51                                                       BN1  INT_Loop
(2)   56/      5E : 30 42                                                       BR   INT_Exit
(2)   57/      60 :                     
(2)   58/      60 : [21]                                                        ENDIF
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm(Graphics1861.asm) - Page 7 - 11/14/2020 15:50:22


(2)   59/      60 :                                                     
(2)   60/      60 :                     ;------------------------------------------------------------------------------------------
(2)   61/      60 :                     
(2)   62/      60 :                     
(2)   63/      60 :                     ; =========================================================================================
(2)   64/      60 :                     ; Interrupt and DMA service routine for the CDP1861 to display an effective resolution
(2)   65/      60 :                     ; of 64 x 64 pixels, using a display buffer of 512 bytes.
(2)   66/      60 :                     ; =========================================================================================
(2)   67/      60 :                     
(2)   68/      60 : =>FALSE                                                     IF Resolution == "64x64"
(2)   69/      60 :                     
(2)   70/      60 :                     INT_Exit:                       LDXA
(2)   71/      60 :                                                             RET
(2)   72/      60 :                     DisplayInt:                     NOP
(2)   73/      60 :                                                             DEC  R2
(2)   74/      60 :                                                             SAV
(2)   75/      60 :                                                             DEC  R2
(2)   76/      60 :                                                             STR  R2
(2)   77/      60 :                     
(2)   78/      60 :                                                             IF BackBuffer <> "SWAP"
(2)   79/      60 :                                                             LDI  hi(DisplayBuffer)
(2)   80/      60 : [78]                                                        ENDIF
(2)   81/      60 :                     
(2)   82/      60 :                                                             IF BackBuffer == "SWAP"
(2)   83/      60 :                                                             GHI  R7
(2)   84/      60 : [82]                                                        ENDIF
(2)   85/      60 :                     
(2)   86/      60 :                                                             PHI  R0
(2)   87/      60 :                                                             LDI  00H
(2)   88/      60 :                                                             PLO  R0
(2)   89/      60 :                                                             NOP
(2)   90/      60 :                                                             NOP
(2)   91/      60 :                                                             SEX  R2
(2)   92/      60 :                     INT_Loop:                       GLO  R0
(2)   93/      60 :                                                             SEX  R2
(2)   94/      60 :                                                             DEC  R0
(2)   95/      60 :                                                             PLO  R0
(2)   96/      60 :                                                             SEX  R2
(2)   97/      60 :                                                             BN1  INT_Loop
(2)   98/      60 :                     INT_Rest:                       GLO  R0
(2)   99/      60 :                                                             SEX  R2
(2)  100/      60 :                                                             DEC  R0
(2)  101/      60 :                                                             PLO  R0
(2)  102/      60 :                                                             B1   INT_Rest
(2)  103/      60 :                                                             BR   INT_Exit
(2)  104/      60 :                     
(2)  105/      60 : [68]                                                        ENDIF
(2)  106/      60 :                     
(2)  107/      60 :                     ;------------------------------------------------------------------------------------------
(2)  108/      60 :                     
(2)  109/      60 :                     
(2)  110/      60 :                     ; =========================================================================================
(2)  111/      60 :                     ; Interrupt and DMA service routine for the CDP1861 to display an effective resolution
(2)  112/      60 :                     ; of 64 x 128 pixels, using a display buffer of 1024 bytes.
(2)  113/      60 :                     ; =========================================================================================
(2)  114/      60 :                     
(2)  115/      60 : =>FALSE                                                     IF Resolution == "64x128"
(2)  116/      60 :                     
(2)  117/      60 :                     INT_Exit:                       LDXA
(2)  118/      60 :                                                             RET
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm(Graphics1861.asm) - Page 8 - 11/14/2020 15:50:22


(2)  119/      60 :                     DisplayInt:                     NOP
(2)  120/      60 :                                                             DEC  R2
(2)  121/      60 :                                                             SAV
(2)  122/      60 :                                                             DEC  R2
(2)  123/      60 :                                                             STR  R2
(2)  124/      60 :                                                             SEX  R2                                 
(2)  125/      60 :                                                             SEX  R2
(2)  126/      60 :                                                             
(2)  127/      60 :                                                             IF BackBuffer <> "SWAP"
(2)  128/      60 :                                                             LDI  hi(DisplayBuffer)
(2)  129/      60 : [127]                                                       ENDIF
(2)  130/      60 :                     
(2)  131/      60 :                                                             IF BackBuffer == "SWAP"
(2)  132/      60 :                                                             GHI  R7
(2)  133/      60 : [131]                                                       ENDIF
(2)  134/      60 :                     
(2)  135/      60 :                                                             PHI  R0
(2)  136/      60 :                                                             LDI  00H
(2)  137/      60 :                                                             PLO  R0
(2)  138/      60 :                                                             BR   INT_Exit
(2)  139/      60 :                     
(2)  140/      60 : [115]                                                       ENDIF
(2)  141/      60 :                     
(2)  142/      60 :                     ;------------------------------------------------------------------------------------------
(2)  143/      60 :                     
(2)  144/      60 :                     
(2)  145/      60 :                     ; =========================================================================================
(2)  146/      60 :                     ; Parameters:
(2)  147/      60 :                     ; RF            Pointer to the image
(2)  148/      60 :                     ;
(2)  149/      60 :                     ; Internal:
(2)  150/      60 :                     ; RE            Pointer to video buffer
(2)  151/      60 :                     ; =========================================================================================
(2)  152/      60 :                     
(2)  153/      60 :                                                             
(2)  154/      60 : =>TRUE              CopyImage:                      IF BackBuffer == "OFF"
(2)  155/      60 : F8 7E                                                       LDI  hi(DisplayBuffer)                  ; prepare the pointer to the video buffer
(2)  156/      62 : BE                                                          PHI  RE
(2)  157/      63 : [154]                                                       ENDIF
(2)  158/      63 :                     
(2)  159/      63 : =>FALSE                                                     IF BackBuffer == "COPY"
(2)  160/      63 :                                                             LDI  hi(DoubleBuffer)                   ; prepare the pointer to the back buffer
(2)  161/      63 :                                                             PHI  RE
(2)  162/      63 : [159]                                                       ENDIF
(2)  163/      63 :                     
(2)  164/      63 : =>FALSE                                                     IF BackBuffer == "SWAP"
(2)  165/      63 :                                                             GLO  R7                                                 ; prepare the pointer to the current back buffer
(2)  166/      63 :                                                             PHI  RE
(2)  167/      63 : [164]                                                       ENDIF
(2)  168/      63 :                     
(2)  169/      63 : F8 00                                                       LDI  00H
(2)  170/      65 : AE                                                          PLO  RE
(2)  171/      66 :                     
(2)  172/      66 : 4F                  CI_Loop:                        LDA  RF
(2)  173/      67 : 5E                                                          STR  RE
(2)  174/      68 : 1E                                                          INC  RE
(2)  175/      69 : 8E                                                          GLO  RE
(2)  176/      6A : 3A 66                                                       BNZ  CI_Loop
(2)  177/      6C :                                                             
(2)  178/      6C : =>FALSE                                                     IF Resolution == "64x64"                                        
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm(Graphics1861.asm) - Page 9 - 11/14/2020 15:50:22


(2)  179/      6C :                                                             IF BackBuffer == "OFF"
(2)  180/      6C :                                                             LDI   hi(DisplayBuffer) + 1
(2)  181/      6C : [179]                                                       ENDIF
(2)  182/      6C :                     
(2)  183/      6C :                                                             IF BackBuffer == "COPY"
(2)  184/      6C :                                                             LDI   hi(DoubleBuffer) + 1
(2)  185/      6C : [183]                                                       ENDIF
(2)  186/      6C :                     
(2)  187/      6C :                                                             IF BackBuffer == "SWAP"
(2)  188/      6C :                                                             GLO  R7
(2)  189/      6C :                                                             ADI      01H
(2)  190/      6C : [187]                                                       ENDIF
(2)  191/      6C :                     
(2)  192/      6C :                                                             STR  R2
(2)  193/      6C :                                                             GHI  RE
(2)  194/      6C :                                                             SD
(2)  195/      6C :                                                             BDF  CI_Loop                            
(2)  196/      6C : [178]                                                       ENDIF
(2)  197/      6C :                                                             
(2)  198/      6C : =>FALSE                                                     IF Resolution == "64x128"
(2)  199/      6C :                                                             IF BackBuffer == "OFF"
(2)  200/      6C :                                                             LDI   hi(DisplayBuffer) + 3
(2)  201/      6C : [199]                                                       ENDIF
(2)  202/      6C :                     
(2)  203/      6C :                                                             IF BackBuffer == "COPY"
(2)  204/      6C :                                                             LDI   hi(DoubleBuffer) + 3
(2)  205/      6C : [203]                                                       ENDIF
(2)  206/      6C :                     
(2)  207/      6C :                                                             IF BackBuffer == "SWAP"
(2)  208/      6C :                                                             GLO  R7
(2)  209/      6C :                                                             ADI  03H
(2)  210/      6C : [207]                                                       ENDIF
(2)  211/      6C :                     
(2)  212/      6C :                                                             STR  R2
(2)  213/      6C :                                                             GHI  RE
(2)  214/      6C :                                                             SD
(2)  215/      6C :                                                             BDF  CI_Loop                            
(2)  216/      6C : [198]                                                       ENDIF
(2)  217/      6C :                                                                                                                                     
(2)  218/      6C : (MACRO)                                                     RETURN                                  
(2)  218/      6C : D5                          SEP R5
(2)  219/      6D :                     
(2)  220/      6D :                     ;------------------------------------------------------------------------------------------
(2)  221/      6D :                     
(2)  222/      6D :                     
(2)  223/      6D :                     ; =========================================================================================
(2)  224/      6D :                     ; Parameters:
(2)  225/      6D :                     ; RF            Value for filling
(2)  226/      6D :                     ;
(2)  227/      6D :                     ; Internal:
(2)  228/      6D :                     ; RE            Pointer to video buffer
(2)  229/      6D :                     ; =========================================================================================
(2)  230/      6D :                     
(2)  231/      6D : =>TRUE              FillScreen:                     IF BackBuffer == "OFF"
(2)  232/      6D : F8 7E                                                       LDI  hi(DisplayBuffer)                  ; prepare the pointer to the video buffer
(2)  233/      6F : BE                                                          PHI  RE
(2)  234/      70 : [231]                                                       ENDIF
(2)  235/      70 :                     
(2)  236/      70 : =>FALSE                                                     IF BackBuffer == "COPY"
(2)  237/      70 :                                                             LDI  hi(DoubleBuffer)                   ; prepare the pointer to the back buffer
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm(Graphics1861.asm) - Page 10 - 11/14/2020 15:50:22


(2)  238/      70 :                                                             PHI  RE
(2)  239/      70 : [236]                                                       ENDIF
(2)  240/      70 :                     
(2)  241/      70 : =>FALSE                                                     IF BackBuffer == "SWAP"
(2)  242/      70 :                                                             GLO  R7                                                 ; prepare the pointer to the current back buffer
(2)  243/      70 :                                                             PHI  RE
(2)  244/      70 : [241]                                                       ENDIF
(2)  245/      70 :                     
(2)  246/      70 : F8 00                                                       LDI  00H
(2)  247/      72 : AE                                                          PLO  RE
(2)  248/      73 :                     
(2)  249/      73 : 9F                  FS_Loop:                        GHI  RF
(2)  250/      74 : 5E                                                          STR  RE
(2)  251/      75 : 1E                                                          INC  RE
(2)  252/      76 : 8E                                                          GLO  RE
(2)  253/      77 : 3A 73                                                       BNZ  FS_Loop
(2)  254/      79 :                                                             
(2)  255/      79 : =>FALSE                                                     IF Resolution == "64x64"
(2)  256/      79 :                                                             IF BackBuffer == "OFF"
(2)  257/      79 :                                                             LDI   hi(DisplayBuffer) + 1
(2)  258/      79 : [256]                                                       ENDIF
(2)  259/      79 :                     
(2)  260/      79 :                                                             IF BackBuffer == "COPY"
(2)  261/      79 :                                                             LDI   hi(DoubleBuffer) + 1
(2)  262/      79 : [260]                                                       ENDIF
(2)  263/      79 :                     
(2)  264/      79 :                                                             IF BackBuffer == "SWAP"
(2)  265/      79 :                                                             GLO  R7
(2)  266/      79 :                                                             ADI  01H
(2)  267/      79 : [264]                                                       ENDIF
(2)  268/      79 :                     
(2)  269/      79 :                                                             STR  R2
(2)  270/      79 :                                                             GHI  RE
(2)  271/      79 :                                                             SD
(2)  272/      79 :                                                             BDF  FS_Loop                            
(2)  273/      79 : [255]                                                       ENDIF
(2)  274/      79 :                                                             
(2)  275/      79 : =>FALSE                                                     IF Resolution == "64x128"
(2)  276/      79 :                                                             IF BackBuffer == "OFF"
(2)  277/      79 :                                                             LDI   hi(DisplayBuffer) + 3
(2)  278/      79 : [276]                                                       ENDIF
(2)  279/      79 :                     
(2)  280/      79 :                                                             IF BackBuffer == "COPY"
(2)  281/      79 :                                                             LDI   hi(DoubleBuffer) + 3
(2)  282/      79 : [280]                                                       ENDIF
(2)  283/      79 :                     
(2)  284/      79 :                                                             IF BackBuffer == "SWAP"
(2)  285/      79 :                                                             GLO  R7
(2)  286/      79 :                                                             ADI  03H
(2)  287/      79 : [284]                                                       ENDIF
(2)  288/      79 :                     
(2)  289/      79 :                                                             STR  R2
(2)  290/      79 :                                                             GHI  RE
(2)  291/      79 :                                                             SD
(2)  292/      79 :                                                             BDF  FS_Loop                            
(2)  293/      79 : [275]                                                       ENDIF
(2)  294/      79 :                                                             
(2)  295/      79 : (MACRO)                                                     RETURN                                  
(2)  295/      79 : D5                          SEP R5
(2)  296/      7A :                     
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm(Graphics1861.asm) - Page 11 - 11/14/2020 15:50:22


(2)  297/      7A :                     ;------------------------------------------------------------------------------------------
(2)  298/      7A :                     
(2)  299/      7A :                     
(2)  300/      7A :                     ; =========================================================================================
(2)  301/      7A :                     ; Parameters:
(2)  302/      7A :                     ; RE.0          X coordinate of the sprite
(2)  303/      7A :                     ; RE.1          Y coordinate of the sprite
(2)  304/      7A :                     ; RF            Pointer to sprite
(2)  305/      7A :                     ; RD            Size of the sprite in bytes
(2)  306/      7A :                     ;
(2)  307/      7A :                     ; Internal:
(2)  308/      7A :                     ; RC            Pointer to video memory
(2)  309/      7A :                     ; =========================================================================================
(2)  310/      7A :                     
(2)  311/      7A : =>TRUE              DrawSprite:                     IF BackBuffer == "OFF"
(2)  312/      7A : F8 7E                                                       LDI  hi(DisplayBuffer)          ; prepare the pointer to the video buffer
(2)  313/      7C : [311]                                                       ENDIF
(2)  314/      7C :                     
(2)  315/      7C : =>FALSE                                                     IF BackBuffer == "COPY"
(2)  316/      7C :                                                             LDI  hi(DoubleBuffer)           ; prepare the pointer to the back buffer
(2)  317/      7C : [315]                                                       ENDIF
(2)  318/      7C :                     
(2)  319/      7C : =>FALSE                                                     IF BackBuffer == "SWAP"
(2)  320/      7C :                                                             GLO  R7                         ; prepare the pointer to the current back buffer
(2)  321/      7C : [319]                                                       ENDIF
(2)  322/      7C :                                                             
(2)  323/      7C : BC                                                          PHI  RC                         ; DisplayBuffer + Y * 8 + X / 8
(2)  324/      7D : 9E                                                          GHI  RE                         ; result goes to RC
(2)  325/      7E :                     
(2)  326/      7E : =>TRUE                                                      IF Resolution == "64x32"
(2)  327/      7E : FA 1F                                                       ANI  1FH                        ; between 0 - 31
(2)  328/      80 : [326]                                                       ENDIF
(2)  329/      80 :                                                     
(2)  330/      80 : =>FALSE                                                     IF Resolution == "64x64"
(2)  331/      80 :                                                             ANI  3FH                        ; or 0 - 63
(2)  332/      80 : [330]                                                       ENDIF
(2)  333/      80 :                     
(2)  334/      80 : =>FALSE                                                     IF Resolution == "64x128"
(2)  335/      80 :                                                             ANI  7FH                        ; or 0 - 127
(2)  336/      80 : [334]                                                       ENDIF
(2)  337/      80 :                     
(2)  338/      80 : FE                                                          SHL                     ; after two shifts check 64x128 high bit in df
(2)  339/      81 : FE                                                          SHL                     ; df will always be zero for 64x64 and 64x32
(2)  340/      82 :                                                             
(2)  341/      82 : =>FALSE                                             IF Resolution == "64x128"
(2)  342/      82 :                                                             PLO  RC                 ; save low byte
(2)  343/      82 :                                                             BNF  DSP_SkipHighInc    ; df is high order bit of 64x128 count
(2)  344/      82 :                                                             GHI  RC                 ; get high byte
(2)  345/      82 :                                                             ADI  02H                ; df represents two's bit after shifting
(2)  346/      82 :                                                             PHI  RC                 ; update high byte
(2)  347/      82 :                     DSP_SkipHighInc:                        GLO  RC                 ; restore low byte and continue shifting
(2)  348/      82 : [341]                                               ENDIF
(2)  349/      82 : FE                                                          SHL                     
(2)  350/      83 : AC                                                          PLO  RC
(2)  351/      84 : 3B 8A                                                       BNF  DSP_SkipLowInc
(2)  352/      86 : 9C                                                          GHI  RC
(2)  353/      87 : FC 01                                                       ADI  01H
(2)  354/      89 : BC                                                          PHI  RC
(2)  355/      8A :                                                             
(2)  356/      8A : 8C                  DSP_SkipLowInc:                 GLO  RC
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm(Graphics1861.asm) - Page 12 - 11/14/2020 15:50:22


(2)  357/      8B : 52                                                          STR  R2
(2)  358/      8C : 8E                                                          GLO  RE
(2)  359/      8D : FA 3F                                                       ANI  3FH
(2)  360/      8F : F6                                                          SHR
(2)  361/      90 : F6                                                          SHR
(2)  362/      91 : F6                                                          SHR
(2)  363/      92 : F4                                                          ADD
(2)  364/      93 : AC                                                          PLO  RC
(2)  365/      94 : 8E                                                          GLO  RE                                 ; calculate the number of required shifts 
(2)  366/      95 : FA 07                                                       ANI  07H                                ; result to RE.1, replacing the Y coordinate
(2)  367/      97 : BE                                                          PHI  RE                                 ; RE.0 will be used later to count the shifts
(2)  368/      98 :                     
(2)  369/      98 : 8D                  DSP_ByteLoop:           GLO  RD                                                 ; exit if all bytes of the sprite have been drawn
(2)  370/      99 : 32 CA                                                       BZ   DSP_Exit
(2)  371/      9B :                                                             
(2)  372/      9B : =>TRUE                                                      IF Resolution == "64x32"                ; or if we are about to draw outside the video buffer
(2)  373/      9B : =>TRUE                                                      IF BackBuffer == "OFF"
(2)  374/      9B : F8 7E                                                       LDI   hi(DisplayBuffer)
(2)  375/      9D : [373]                                                       ENDIF
(2)  376/      9D :                     
(2)  377/      9D : =>FALSE                                                     IF BackBuffer == "COPY"
(2)  378/      9D :                                                             LDI   hi(DoubleBuffer)
(2)  379/      9D : [377]                                                       ENDIF
(2)  380/      9D :                     
(2)  381/      9D : =>FALSE                                                     IF BackBuffer == "SWAP"
(2)  382/      9D :                                                             GLO  R7
(2)  383/      9D : [381]                                                       ENDIF
(2)  384/      9D : [372]                                                       ENDIF
(2)  385/      9D :                     
(2)  386/      9D : =>FALSE                                                     IF Resolution == "64x64"
(2)  387/      9D :                                                             IF BackBuffer == "OFF"
(2)  388/      9D :                                                             LDI   hi(DisplayBuffer) + 1
(2)  389/      9D : [387]                                                       ENDIF
(2)  390/      9D :                     
(2)  391/      9D :                                                             IF BackBuffer == "COPY"
(2)  392/      9D :                                                             LDI   hi(DoubleBuffer) + 1
(2)  393/      9D : [391]                                                       ENDIF
(2)  394/      9D :                     
(2)  395/      9D :                                                             IF BackBuffer == "SWAP"
(2)  396/      9D :                                                             GLO  R7
(2)  397/      9D :                                                             ADI  01H
(2)  398/      9D : [395]                                                       ENDIF
(2)  399/      9D : [386]                                                       ENDIF
(2)  400/      9D :                     
(2)  401/      9D : =>FALSE                                                     IF Resolution == "64x128"
(2)  402/      9D :                                                             IF BackBuffer == "OFF"
(2)  403/      9D :                                                             LDI   hi(DisplayBuffer) + 3
(2)  404/      9D : [402]                                                       ENDIF
(2)  405/      9D :                     
(2)  406/      9D :                                                             IF BackBuffer == "COPY"
(2)  407/      9D :                                                             LDI   hi(DoubleBuffer) + 3
(2)  408/      9D : [406]                                                       ENDIF
(2)  409/      9D :                     
(2)  410/      9D :                                                             IF BackBuffer == "SWAP"
(2)  411/      9D :                                                             GLO  R7
(2)  412/      9D :                                                             ADI      03H
(2)  413/      9D : [410]                                                       ENDIF
(2)  414/      9D : [401]                                                       ENDIF
(2)  415/      9D :                     
(2)  416/      9D : 52                                                          STR  R2
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm(Graphics1861.asm) - Page 13 - 11/14/2020 15:50:22


(2)  417/      9E : 9C                                                          GHI  RC
(2)  418/      9F : F5                                                          SD
(2)  419/      A0 : 3B CA                                                       BNF  DSP_Exit
(2)  420/      A2 : 0F                                                          LDN      RF                                                     ; load the next byte of the sprite into RB.0
(2)  421/      A3 : AB                                                          PLO  RB
(2)  422/      A4 : F8 00                                                       LDI  00H                                                ; set RB.1 to OOH
(2)  423/      A6 : BB                                                          PHI  RB
(2)  424/      A7 : 2D                                                          DEC  RD                                                 ; decrement the sprite's byte counter
(2)  425/      A8 : 1F                                                          INC  RF                                                 ; increment the pointer to the sprite's bytes
(2)  426/      A9 : 9E                                                          GHI  RE                                                 ; prepare the shift counter
(2)  427/      AA : AE                                                          PLO  RE
(2)  428/      AB : 8E                  DSP_ShiftLoop:          GLO  RE                                                 ; exit the loop if all shifts have been performed
(2)  429/      AC : 32 B7                                                       BZ   DSP_ShiftExit
(2)  430/      AE : 2E                                                          DEC  RE                                                 ; decrement the shift counter
(2)  431/      AF : 8B                                                          GLO  RB                                                 ; shift the values in RB
(2)  432/      B0 : F6                                                          SHR
(2)  433/      B1 : AB                                                          PLO  RB
(2)  434/      B2 : 9B                                                          GHI  RB
(2)  435/      B3 : 76                                                          RSHR
(2)  436/      B4 : BB                                                          PHI  RB
(2)  437/      B5 : 30 AB                                                       BR   DSP_ShiftLoop
(2)  438/      B7 : EC                  DSP_ShiftExit:          SEX  RC                                                 ; store the shifted bytes in the video buffer
(2)  439/      B8 : 8B                                                          GLO  RB
(2)  440/      B9 : F3                                                          XOR
(2)  441/      BA : 5C                                                          STR  RC
(2)  442/      BB : 1C                                                          INC  RC
(2)  443/      BC : 9B                                                          GHI  RB
(2)  444/      BD : F3                                                          XOR
(2)  445/      BE : 5C                                                          STR  RC
(2)  446/      BF : E2                                                          SEX  R2
(2)  447/      C0 : 8C                                                          GLO  RC                                                 ; advance the video buffer pointer to the next line
(2)  448/      C1 : FC 07                                                       ADI  07H
(2)  449/      C3 : AC                                                          PLO  RC
(2)  450/      C4 : 9C                                                          GHI  RC
(2)  451/      C5 : 7C 00                                                       ADCI 00H
(2)  452/      C7 : BC                                                          PHI  RC
(2)  453/      C8 : 30 98                                                       BR   DSP_ByteLoop
(2)  454/      CA : (MACRO)             DSP_Exit                        RETURN
(2)  454/      CA : D5                          SEP R5
(2)  455/      CB :                     
(2)  456/      CB :                     ;------------------------------------------------------------------------------------------
(2)  457/      CB :                     
(2)  458/      CB :                     
(2)  459/      CB :                     ; =========================================================================================
(2)  460/      CB :                     ; Parameters:
(2)  461/      CB :                     ; ----
(2)  462/      CB :                     ;
(2)  463/      CB :                     ; Internal:
(2)  464/      CB :                     ; RE            Pointer to video buffer
(2)  465/      CB :                     ; RF            Pointer to back buffer
(2)  466/      CB :                     ; =========================================================================================
(2)  467/      CB :                                                             
(2)  468/      CB : =>FALSE             CopyBackBuffer:         IF BackBuffer <> "OFF"
(2)  469/      CB :                     
(2)  470/      CB :                                                             IF BackBuffer == "COPY"                                 
(2)  471/      CB :                                                             LOAD RE, DisplayBuffer                  ; prepare the pointer to the video buffer
(2)  472/      CB :                     
(2)  473/      CB :                                                             LOAD RF, DoubleBuffer                   ; prepare the pointer to the back buffer
(2)  474/      CB :                                                                                                     
(2)  475/      CB :                     CBB_Loop:                               LDA  RF
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm(Graphics1861.asm) - Page 14 - 11/14/2020 15:50:22


(2)  476/      CB :                                                             STR  RE
(2)  477/      CB :                                                             INC  RE
(2)  478/      CB :                                                             GLO  RE
(2)  479/      CB :                                                             BNZ  CBB_Loop
(2)  480/      CB :                                                             
(2)  481/      CB :                                                             IF Resolution == "64x64"
(2)  482/      CB :                                                             LDI   hi(DisplayBuffer) + 1
(2)  483/      CB : [481]                                                       ENDIF
(2)  484/      CB :                                                             
(2)  485/      CB :                                                             IF Resolution == "64x128"
(2)  486/      CB :                                                             LDI   hi(DisplayBuffer) + 3
(2)  487/      CB : [485]                                                       ENDIF
(2)  488/      CB :                     
(2)  489/      CB :                                                             STR  R2
(2)  490/      CB :                                                             GHI  RE
(2)  491/      CB :                                                             SD
(2)  492/      CB :                                                             BDF  CBB_Loop
(2)  493/      CB : [470]                                                       ENDIF
(2)  494/      CB :                     
(2)  495/      CB :                                                             IF BackBuffer == "SWAP"
(2)  496/      CB :                                                             GHI  R7
(2)  497/      CB :                                                             SMI  hi(DisplayBuffer)
(2)  498/      CB :                                                             BZ   CBB_Swap
(2)  499/      CB :                                                             LDI  hi(DisplayBuffer)
(2)  500/      CB :                                                             PHI  R7
(2)  501/      CB :                                                             LDI  hi(DoubleBuffer)
(2)  502/      CB :                                                             PLO  R7
(2)  503/      CB :                                                             BR   CBB_Exit
(2)  504/      CB :                     CBB_Swap:                       LDI  hi(DoubleBuffer)
(2)  505/      CB :                                                             PHI  R7
(2)  506/      CB :                                                             LDI  hi(DisplayBuffer)
(2)  507/      CB :                                                             PLO  R7
(2)  508/      CB :                                                             BR   CBB_Exit
(2)  509/      CB : [495]                                                       ENDIF
(2)  510/      CB :                     
(2)  511/      CB : [468]                                                       ENDIF                                   
(2)  512/      CB : (MACRO)             CBB_Exit:                       RETURN          
(2)  512/      CB : D5                          SEP R5
(2)  513/      CC :                     
(2)  514/      CC :                     ;------------------------------------------------------------------------------------------
(2)  515/      CC :                     
(2)  516/      CC : [13]                                                ENDIF
(2)  517/      CC :                     
(1)  109/      CC :                     
(1)  110/      CC : =>FALSE                             IF Resolution == "64x128"
(1)  111/      CC :                                             IF BackBuffer == "OFF"
(1)  112/      CC :                                                     INCLUDE "Text1861.asm"
(1)  113/      CC :                                                     INCLUDE "Fonts.asm"
(1)  114/      CC :                                             ELSEIF
(1)  115/      CC :                                                     INCLUDE "Fonts.asm"
(1)  116/      CC :                                                     INCLUDE "Text1861.asm"
(1)  117/      CC : [111]                                       ENDIF
(1)  118/      CC :                                                     INCLUDE "Tty1861.asm"
(1)  119/      CC : [110]                               ENDIF
(1)  120/      CC :                     
(1)  121/      CC : =>FALSE                             IF Resolution == "64x64"
(1)  122/      CC :                                             IF BackBuffer == "OFF"
(1)  123/      CC :                                                     INCLUDE "Text1861.asm"
(1)  124/      CC :                                                     INCLUDE "Fonts.asm"
(1)  125/      CC :                                             ELSEIF
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm(Initialize.asm) - Page 15 - 11/14/2020 15:50:22


(1)  126/      CC :                                                     INCLUDE "Fonts.asm"
(1)  127/      CC :                                                     INCLUDE "Text1861.asm"
(1)  128/      CC : [122]                                       ENDIF
(1)  129/      CC :                                                     INCLUDE "Tty1861.asm"
(1)  130/      CC : [121]                               ENDIF
(1)  131/      CC :                     
(1)  132/      CC : =>TRUE                              IF Resolution == "64x32"
(1)  133/      CC : =>TRUE                                      IF BackBuffer == "OFF"
(1)  134/      CC :                                                     INCLUDE "Text1861.asm"
(2)    1/      CC :                     ; *****************************************************************************************
(2)    2/      CC :                     ; Copyright (c) 2020 
(2)    3/      CC :                     ; by Richard Dienstknecht
(2)    4/      CC :                     ;
(2)    5/      CC :                     ; Changes:
(2)    6/      CC :                     ; Gaston Williams, July, 2020 - Moved Font definitions into separate file
(2)    7/      CC :                     ; Gaston Williams, July, 2020 - Replaced Std Call and Std Return with Macros
(2)    8/      CC :                     ; Gaston Williams  Aug,  2020 - Added Macro for loading Register
(2)    9/      CC :                     ; *****************************************************************************************
(2)   10/      CC :                     
(2)   11/      CC : =>TRUE                              IF UseText == "TRUE"
(2)   12/      CC :                     
(2)   13/      CC :                     ; =========================================================================================
(2)   14/      CC :                     ; Draws a zero terminated string at specified screen coordinates. 
(2)   15/      CC :                     ;
(2)   16/      CC :                     ; Parameters:
(2)   17/      CC :                     ; RF            Pointer to the string
(2)   18/      CC :                     ; RE.0          X coordinate
(2)   19/      CC :                     ; RE.1          Y coordinate
(2)   20/      CC :                     ; =========================================================================================
(2)   21/      CC :                     
(2)   22/      CC : 0F                  DrawString:             LDN  RF                 ; get character, exit if 0
(2)   23/      CD : AC                                          PLO  RC
(2)   24/      CE : 32 F0                                       BZ   DS_Exit
(2)   25/      D0 : 1F                                          INC  RF
(2)   26/      D1 :                                                             
(2)   27/      D1 : 8F                                          GLO  RF                 ; push RF onto the stack
(2)   28/      D2 : 73                                          STXD
(2)   29/      D3 : 9F                                          GHI  RF
(2)   30/      D4 : 73                                          STXD
(2)   31/      D5 :                                                             
(2)   32/      D5 : 8E                                          GLO  RE                 ; push RE onto the stack
(2)   33/      D6 : 73                                          STXD
(2)   34/      D7 : 9E                                          GHI  RE
(2)   35/      D8 : 73                                          STXD
(2)   36/      D9 :                                                             
(2)   37/      D9 : (MACRO)                                     CALL DrawCharacter      ; draw the character
(2)   37/      D9 : D4                          SEP R4
(2)   37/      DA : 00 F1                       dw  DRAWCHARACTER
(2)   38/      DC :                                                             
(2)   39/      DC : 60                                          IRX                     ; restore RE
(2)   40/      DD : 72                                          LDXA
(2)   41/      DE : BE                                          PHI  RE
(2)   42/      DF : F0                                          LDX
(2)   43/      E0 : AE                                          PLO  RE
(2)   44/      E1 :                                                             
(2)   45/      E1 : 8F                                          GLO  RF                 ; advance the x coordinate by the
(2)   46/      E2 : 73                                          STXD                    ; width of the character + 1
(2)   47/      E3 : 60                                          IRX
(2)   48/      E4 : 8E                                          GLO  RE
(2)   49/      E5 : F4                                          ADD
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm(Text1861.asm) - Page 16 - 11/14/2020 15:50:22


(2)   50/      E6 : FC 01                                       ADI  01H
(2)   51/      E8 : AE                                          PLO  RE
(2)   52/      E9 :                                             
(2)   53/      E9 : 60                                          IRX                     ; restore RF
(2)   54/      EA : 72                                          LDXA
(2)   55/      EB : BF                                          PHI  RF
(2)   56/      EC : F0                                          LDX
(2)   57/      ED : AF                                          PLO  RF
(2)   58/      EE : 30 CC                                       BR   DrawString         ; continue with the next character
(2)   59/      F0 :                     
(2)   60/      F0 : (MACRO)             DS_Exit:                RETURN
(2)   60/      F0 : D5                          SEP R5
(2)   61/      F1 :                     
(2)   62/      F1 :                     ;------------------------------------------------------------------------------------------
(2)   63/      F1 :                     
(2)   64/      F1 :                     
(2)   65/      F1 :                     ; =========================================================================================
(2)   66/      F1 :                     ; Draws a character at specified screen coordinates 
(2)   67/      F1 :                     ;
(2)   68/      F1 :                     ; Parameters:
(2)   69/      F1 :                     ; RE.0          X coordinate of the character
(2)   70/      F1 :                     ; RE.1          Y coordinate of the character
(2)   71/      F1 :                     ; RC.0          ASCII code of the character (20 - 7F)
(2)   72/      F1 :                     ; 
(2)   73/      F1 :                     ; Internal:
(2)   74/      F1 :                     ; RF            Pointer to the unpacked character's pattern
(2)   75/      F1 :                     ; RD            Pointer to the font
(2)   76/      F1 :                     ; RC.1          Temporary values
(2)   77/      F1 :                     
(2)   78/      F1 :                     ; Returns:
(2)   79/      F1 :                     ; RF.0          Character width
(2)   80/      F1 :                     ; =========================================================================================
(2)   81/      F1 :                     
(2)   82/      F1 : (MACRO)             DrawCharacter:          LOAD RF, CharacterPattern       ; RF points to the buffer for the character pattern
(2)   82/      F1 : F8 00                       LDI  lo(CHARACTERPATTERN)
(2)   82/      F3 : AF                          PLO  RF
(2)   82/      F4 : F8 7F                       LDI  hi(CHARACTERPATTERN)
(2)   82/      F6 : BF                          PHI  RF     
(2)   83/      F7 :                                                                                     
(2)   84/      F7 : (MACRO)                                     LOAD RD, Font                   ; RD points to the font                 
(2)   84/      F7 : F8 6D                       LDI  lo(FONT)
(2)   84/      F9 : AD                          PLO  RD
(2)   84/      FA : F8 01                       LDI  hi(FONT)
(2)   84/      FC : BD                          PHI  RD     
(2)   85/      FD :                                                     
(2)   86/      FD : 8C                                          GLO  RC                         ; calculate the offset in the font
(2)   87/      FE : FF 20                                       SMI  020H                       ; (( character code - 20) / 2) * 6
(2)   88/     100 : FA FE                                       ANI  0FEH
(2)   89/     102 : BC                                          PHI  RC
(2)   90/     103 : FE                                          SHL
(2)   91/     104 : 73                                          STXD
(2)   92/     105 : 60                                          IRX                                     
(2)   93/     106 : 9C                                          GHI  RC
(2)   94/     107 : F4                                          ADD
(2)   95/     108 : 73                                          STXD
(2)   96/     109 : 60                                          IRX
(2)   97/     10A : 3B 10                                       BNF  DC_SkipHighByte
(2)   98/     10C : 9D                                          GHI  RD
(2)   99/     10D : FC 01                                       ADI      01H
(2)  100/     10F : BD                                          PHI  RD
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm(Text1861.asm) - Page 17 - 11/14/2020 15:50:22


(2)  101/     110 :                                                             
(2)  102/     110 : 8D                  DC_SkipHighByte:        GLO  RD                         ; add to the address in RD
(2)  103/     111 : F4                                          ADD     
(2)  104/     112 : AD                                          PLO  RD
(2)  105/     113 : 3B 19                                       BNF  DC_SkipHighByte2
(2)  106/     115 : 9D                                          GHI  RD
(2)  107/     116 : FC 01                                       ADI  01H
(2)  108/     118 : BD                                          PHI  RD
(2)  109/     119 :                     
(2)  110/     119 : 0D                  DC_SkipHighByte2:       LDN  RD                         ; get the width of the first character pattern
(2)  111/     11A : F6                                          SHR
(2)  112/     11B : F6                                          SHR
(2)  113/     11C : F6                                          SHR
(2)  114/     11D : F6                                          SHR
(2)  115/     11E : 73                                          STXD
(2)  116/     11F : 60                                          IRX
(2)  117/     120 :                     
(2)  118/     120 : 8C                                          GLO  RC                         ; do we need the first or the second pattern?
(2)  119/     121 : FA 01                                       ANI  01H
(2)  120/     123 : BC                                          PHI  RC
(2)  121/     124 : 3A 38                                       BNZ  DC_PrepareSecond
(2)  122/     126 :                                                             
(2)  123/     126 : F0                                          LDX                             ; prepare the mask                                      
(2)  124/     127 : AB                                          PLO  RB 
(2)  125/     128 : F8 00                                       LDI  00H
(2)  126/     12A : BB                                          PHI  RB
(2)  127/     12B : 9B                  DC_MaskLoop:            GHI  RB
(2)  128/     12C : F6                                          SHR
(2)  129/     12D : F9 80                                       ORI  80H
(2)  130/     12F : BB                                          PHI  RB
(2)  131/     130 : 2B                                          DEC  RB
(2)  132/     131 : 8B                                          GLO  RB
(2)  133/     132 : 3A 2B                                       BNZ  DC_MaskLoop
(2)  134/     134 :                     
(2)  135/     134 : F0                                          LDX
(2)  136/     135 : 73                                          STXD                            ; keep the width of the first pattern on the stack
(2)  137/     136 : 30 3E                                       BR   DC_CopyPattern
(2)  138/     138 :                     
(2)  139/     138 : F0                  DC_PrepareSecond:       LDX                             ; use the width of the first pattern for shifting
(2)  140/     139 : BB                                          PHI  RB
(2)  141/     13A :                     
(2)  142/     13A : 0D                                          LDN  RD                         ; keep the width of the second character pattern on the stack
(2)  143/     13B : FA 07                                       ANI  07H
(2)  144/     13D : 73                                          STXD
(2)  145/     13E :                     
(2)  146/     13E : 1D                  DC_CopyPattern:         INC  RD
(2)  147/     13F : F8 05                                       LDI  05H                        ; prepare a loop over the five bytes of the pattern
(2)  148/     141 : AC                                          PLO  RC
(2)  149/     142 :                                                             
(2)  150/     142 : 0D                  DC_ByteLoop:            LDN  RD                         ; get a byte from the font
(2)  151/     143 : 73                                          STXD
(2)  152/     144 : 60                                          IRX
(2)  153/     145 : 1D                                          INC  RD
(2)  154/     146 :                                                             
(2)  155/     146 : 9C                                          GHI  RC
(2)  156/     147 : 3A 4F                                       BNZ  DC_ByteShift
(2)  157/     149 :                     
(2)  158/     149 : 9B                                          GHI  RB                         ; mask out the first pattern
(2)  159/     14A : F2                                          AND
(2)  160/     14B : 73                                          STXD
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm(Text1861.asm) - Page 18 - 11/14/2020 15:50:22


(2)  161/     14C : 60                                          IRX
(2)  162/     14D : 30 59                                       BR   DC_ByteWrite
(2)  163/     14F :                     
(2)  164/     14F : 9B                  DC_ByteShift:           GHI  RB                         ; shift the second pattern
(2)  165/     150 : AB                                          PLO  RB
(2)  166/     151 : F0                  DC_ShiftLoop:           LDX
(2)  167/     152 : FE                                          SHL
(2)  168/     153 : 73                                          STXD
(2)  169/     154 : 60                                          IRX
(2)  170/     155 : 2B                                          DEC  RB
(2)  171/     156 : 8B                                          GLO  RB
(2)  172/     157 : 3A 51                                       BNZ  DC_ShiftLoop
(2)  173/     159 :                     
(2)  174/     159 : F0                  DC_ByteWrite:           LDX                             ; write the byte
(2)  175/     15A : 5F                                          STR  RF
(2)  176/     15B : 1F                                          INC  RF
(2)  177/     15C :                     
(2)  178/     15C : 2C                                          DEC  RC                         ; continue until all bytes of the pattern are done
(2)  179/     15D : 8C                                          GLO  RC
(2)  180/     15E : 3A 42                                       BNZ  DC_ByteLoop
(2)  181/     160 :                     
(2)  182/     160 : F8 00                                       LDI  lo(CharacterPattern)       ; restore RF to the beginning of the pattern
(2)  183/     162 : AF                                          PLO  RF
(2)  184/     163 : F8 05                                       LDI  05H                        ; set the length of the pattern
(2)  185/     165 : AD                                          PLO  RD
(2)  186/     166 : (MACRO)                                     CALL DrawSprite                 ; call sprite routine to draw                   
(2)  186/     166 : D4                          SEP R4
(2)  186/     167 : 00 7A                       dw  DRAWSPRITE
(2)  187/     169 :                     
(2)  188/     169 : 60                                          IRX                             ; clean up and exit
(2)  189/     16A : F0                                          LDX
(2)  190/     16B : AF                                          PLO  RF
(2)  191/     16C : (MACRO)                                     RETURN
(2)  191/     16C : D5                          SEP R5
(2)  192/     16D :                     
(2)  193/     16D :                     ;------------------------------------------------------------------------------------------
(2)  194/     16D : [11]                                ENDIF
(1)  135/     16D :                                                     INCLUDE "Fonts.asm"
(2)    1/     16D :                     
(2)    2/     16D :                     ; *********************************************************************************************
(2)    3/     16D :                     ; Copyright (c) 2020 
(2)    4/     16D :                     ; by Richard Dienstknecht
(2)    5/     16D :                     ;
(2)    6/     16D :                     ; Changes:
(2)    7/     16D :                     ; Gaston Williams, July, 2020 - Put Font definations into separate file 
(2)    8/     16D :                     ; Gaston Williams, August, 2020 - Changed DEL to 1 pixel wide space
(2)    9/     16D :                     ;
(2)   10/     16D :                     ; Font definition
(2)   11/     16D :                     ;
(2)   12/     16D :                     ; The font has 96 printable characters, and requires 288 bytes of memory.
(2)   13/     16D :                     ;
(2)   14/     16D :                     ; The characters are encoded in standard ASCII, beginning with 20H and ending at 7FH. Each
(2)   15/     16D :                     ; character has a height of 5 pixels and a variable width of 1 - 5 pixels. 
(2)   16/     16D :                     ;
(2)   17/     16D :                     ; In order to save memory, the patterns of two characters have been combined into one. Without
(2)   18/     16D :                     ; this, the complete 96 character font would have required 480 bytes. The 'left' character
(2)   19/     16D :                     ; stands for the lower even ASCII code, the 'right' one for the following
(2)   20/     16D :                     ; uneven ASCII code. The DrawCharacter subroutine will either mask the left character or
(2)   21/     16D :                     ; shift the right one over to the position of the left one when a character is drawn.
(2)   22/     16D :                     ;
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm(Fonts.asm) - Page 19 - 11/14/2020 15:50:22


(2)   23/     16D :                     ; Each line defines two characters of variable width, together no more than 8 pixels. The
(2)   24/     16D :                     ; first byte contains the width of each character. The upper four bits hold the width of
(2)   25/     16D :                     ; the left character in the pattern, the lower four bits hold the width of the right character.
(2)   26/     16D :                     ;
(2)   27/     16D :                     ; The following five bytes contain the bit patterns of the characters. Beginning at the left
(2)   28/     16D :                     ; (most significant) bit, the pattern of the left character (up to its specified width) is 
(2)   29/     16D :                     ; immediately followed by the bits of the right character. Any remaining bits to the right 
(2)   30/     16D :                     ; (if both characters together are less than 8 pixels wide) must be set to 0. 
(2)   31/     16D :                     ; **********************************************************************************************
(2)   32/     16D :                     
(2)   33/     16D : 11 40 40 40 00 40   Font:           db  0011H, 0040H, 0040H, 0040H, 0000H, 0040H            ; space and !
(2)   34/     173 : 35 AA BF 0A 1F 0A                   db  0035H, 00AAH, 00BFH, 000AH, 001FH, 000AH            ; " and #
(2)   35/     179 : 33 74 C4 48 70 D4                   db  0033H, 0074H, 00C4H, 0048H, 0070H, 00D4H            ; $ and %
(2)   36/     17F : 41 48 A8 40 A0 D0                   db  0041H, 0048H, 00A8H, 0040H, 00A0H, 00D0H            ; & and '
(2)   37/     185 : 22 60 90 90 90 60                   db  0022H, 0060H, 0090H, 0090H, 0090H, 0060H            ; ( and )
(2)   38/     18B : 33 00 A8 5C A8 00                   db  0033H, 0000H, 00A8H, 005CH, 00A8H, 0000H            ; * and +
(2)   39/     191 : 22 00 00 30 40 80                   db  0022H, 0000H, 0000H, 0030H, 0040H, 0080H            ; , and -
(2)   40/     197 : 13 10 10 20 40 C0                   db  0013H, 0010H, 0010H, 0020H, 0040H, 00C0H            ; . and /
(2)   41/     19D : 33 48 B8 A8 A8 5C                   db  0033H, 0048H, 00B8H, 00A8H, 00A8H, 005CH            ; 0 and 1
(2)   42/     1A3 : 33 D8 24 48 84 F8                   db  0033H, 00D8H, 0024H, 0048H, 0084H, 00F8H            ; 2 and 3
(2)   43/     1A9 : 33 3C B0 F8 24 38                   db  0033H, 003CH, 00B0H, 00F8H, 0024H, 0038H            ; 4 and 5
(2)   44/     1AF : 33 5C 84 C4 A8 48                   db  0033H, 005CH, 0084H, 00C4H, 00A8H, 0048H            ; 6 and 7               
(2)   45/     1B5 : 33 48 B4 4C A4 48                   db  0033H, 0048H, 00B4H, 004CH, 00A4H, 0048H            ; 8 and 9
(2)   46/     1BB : 12 00 20 80 20 C0                   db  0012H, 0000H, 0020H, 0080H, 0020H, 00C0H            ; : and ;               
(2)   47/     1C1 : 32 20 58 80 58 20                   db  0032H, 0020H, 0058H, 0080H, 0058H, 0020H            ; < and =
(2)   48/     1C7 : 33 88 54 24 48 88                   db  0033H, 0088H, 0054H, 0024H, 0048H, 0088H            ; > and ?
(2)   49/     1CD : 33 48 F4 9C B4 54                   db  0033H, 0048H, 00F4H, 009CH, 00B4H, 0054H            ; @ and A
(2)   50/     1D3 : 33 CC B0 D0 B0 CC                   db  0033H, 00CCH, 00B0H, 00D0H, 00B0H, 00CCH            ; B and C
(2)   51/     1D9 : 33 DC B0 B8 B0 DC                   db  0033H, 00DCH, 00B0H, 00B8H, 00B0H, 00DCH            ; D and E
(2)   52/     1DF : 33 EC 90 D0 94 8C                   db  0033H, 00ECH, 0090H, 00D0H, 0094H, 008CH            ; F and G
(2)   53/     1E5 : 33 BC A8 E8 A8 BC                   db  0033H, 00BCH, 00A8H, 00E8H, 00A8H, 00BCH            ; H and I
(2)   54/     1EB : 33 34 34 38 B4 54                   db  0033H, 0034H, 0034H, 0038H, 00B4H, 0054H            ; J and K
(2)   55/     1F1 : 35 91 9B 95 91 F1                   db  0035H, 0091H, 009BH, 0095H, 0091H, 00F1H            ; L and M
(2)   56/     1F7 : 43 9E DA BA 9A 9E                   db  0043H, 009EH, 00DAH, 00BAH, 009AH, 009EH            ; N and O
(2)   57/     1FD : 34 DE B2 D2 96 9E                   db  0034H, 00DEH, 00B2H, 00D2H, 0096H, 009EH            ; P and Q
(2)   58/     203 : 33 CC B0 C8 A4 B8                   db  0033H, 00CCH, 00B0H, 00C8H, 00A4H, 00B8H            ; R and S
(2)   59/     209 : 33 F4 54 54 54 5C                   db  0033H, 00F4H, 0054H, 0054H, 0054H, 005CH            ; T and U
(2)   60/     20F : 35 B1 B1 B1 B5 4A                   db  0035H, 00B1H, 00B1H, 00B1H, 00B5H, 004AH            ; V and W
(2)   61/     215 : 33 B4 B4 48 A8 A8                   db  0033H, 00B4H, 00B4H, 0048H, 00A8H, 00A8H            ; X and Y
(2)   62/     21B : 32 F8 30 50 90 F8                   db  0032H, 00F8H, 0030H, 0050H, 0090H, 00F8H            ; Z and [
(2)   63/     221 : 32 98 88 48 28 38                   db  0032H, 0098H, 0088H, 0048H, 0028H, 0038H            ; \ and ]
(2)   64/     227 : 33 40 A0 00 00 1C                   db  0033H, 0040H, 00A0H, 0000H, 0000H, 001CH            ; ^ and _
(2)   65/     22D : 23 40 98 28 28 18                   db  0023H, 0040H, 0098H, 0028H, 0028H, 0018H            ; ' and a
(2)   66/     233 : 33 80 CC B0 B0 CC                   db  0033H, 0080H, 00CCH, 00B0H, 00B0H, 00CCH            ; b and c
(2)   67/     239 : 33 20 6C B4 B8 6C                   db  0033H, 0020H, 006CH, 00B4H, 00B8H, 006CH            ; d and e
(2)   68/     23F : 23 58 A8 F0 88 B0                   db  0023H, 0058H, 00A8H, 00F0H, 0088H, 00B0H            ; f and g
(2)   69/     245 : 31 90 80 D0 B0 B0                   db  0031H, 0090H, 0080H, 00D0H, 00B0H, 00B0H            ; h and i
(2)   70/     24B : 23 60 28 70 68 A8                   db  0023H, 0060H, 0028H, 0070H, 0068H, 00A8H            ; j and k
(2)   71/     251 : 25 80 94 AA AA 6A                   db  0025H, 0080H, 0094H, 00AAH, 00AAH, 006AH            ; l and m
(2)   72/     257 : 33 00 C8 B4 B4 A8                   db  0033H, 0000H, 00C8H, 00B4H, 00B4H, 00A8H            ; n and o
(2)   73/     25D : 33 00 CC B4 CC 84                   db  0033H, 0000H, 00CCH, 00B4H, 00CCH, 0084H            ; p and q
(2)   74/     263 : 23 00 58 B0 88 B0                   db  0023H, 0000H, 0058H, 00B0H, 0088H, 00B0H            ; r and s
(2)   75/     269 : 23 80 E8 A8 A8 58                   db  0023H, 0080H, 00E8H, 00A8H, 00A8H, 0058H            ; t and u
(2)   76/     26F : 35 00 B1 B5 B5 4A                   db  0035H, 0000H, 00B1H, 00B5H, 00B5H, 004AH            ; v and w
(2)   77/     275 : 33 00 B4 4C 44 A8                   db  0033H, 0000H, 00B4H, 004CH, 0044H, 00A8H            ; x and y
(2)   78/     27B : 33 0C E8 30 48 EC                   db  0033H, 000CH, 00E8H, 0030H, 0048H, 00ECH            ; z and {
(2)   79/     281 : 13 E0 A0 90 A0 E0                   db  0013H, 00E0H, 00A0H, 0090H, 00A0H, 00E0H            ; | and }
(2)   80/     287 : 41 00 50 A0 00 00                   db  0041H, 0000H, 0050H, 00A0H, 0000H, 0000H            ; ~ and DEL
(2)   81/     28D :                     ;------------------------------------------------------------------------------------------
(1)  136/     28D :                                                     INCLUDE "Tty1861.asm"
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm(Tty1861.asm) - Page 20 - 11/14/2020 15:50:22


(2)    1/     28D :                     ; *******************************************************************************************
(2)    2/     28D :                     ; Tty1861 - Teletype Terminal functions
(2)    3/     28D :                     ; Copyright (c) 2020 by Gaston Williams
(2)    4/     28D :                     ;
(2)    5/     28D :                     ; These functions implement basic terminal functions in 64x64 bit graphics.
(2)    6/     28D :                     
(2)    7/     28D :                     ; Notes: 
(2)    8/     28D :                     ;       1. Functions named with "Get" or "Put" are safe functions that check before updating
(2)    9/     28D :                     ;       and those named with "Read" or "Write" may not be safe, and the caller is responsible
(2)   10/     28D :                     ;       for checking to see if it's safe before calling them update the video data.
(2)   11/     28D :                     ;
(2)   12/     28D :                     ;       2. BeginTerminal should be called before any video, and the VideoOn and VideoOff 
(2)   13/     28D :                     ;       functions should be used to turn the 1861 on and off.
(2)   14/     28D :                     ;
(2)   15/     28D :                     ;       3. The WaitForSafeUpdate function can be used to check for the end of Video DMA 
(2)   16/     28D :                     ;       when it is safe to update video data.
(2)   17/     28D :                     ;
(2)   18/     28D :                     ; Changes:
(2)   19/     28D :                     ; Gaston Williams, Sept, 2020 - Added 64 x 128 Resolution logic
(2)   20/     28D :                     ; Gaston Williams, Nov,  2020 - Added support for EOT to clear screen
(2)   21/     28D :                     ; *******************************************************************************************
(2)   22/     28D :                     
(2)   23/     28D : =>TRUE                                      IF UseTty == "TRUE"
(2)   24/     28D :                                                     
(2)   25/     28D :                     ; =========================================================================================
(2)   26/     28D :                     ; Initialize system variables for TTY Terminal
(2)   27/     28D :                     ;
(2)   28/     28D :                     ; Note: *** MANDATORY *** This function must be called before any other Terminal functions
(2)   29/     28D :                     ;
(2)   30/     28D :                     ; Internal:
(2)   31/     28D :                     ; RF.0          Value to set Video Flag false
(2)   32/     28D :                     ; =========================================================================================
(2)   33/     28D :                     
(2)   34/     28D : E2                  BeginTerminal:          SEX  R2                 ; make sure X points to stack pointer
(2)   35/     28E :                                             
(2)   36/     28E : F8 00                                       LDI  00H                ; set the video flag to false
(2)   37/     290 : AF                                          PLO  RF                                         
(2)   38/     291 : (MACRO)                                     CALL SetVideoFlag
(2)   38/     291 : D4                          SEP R4
(2)   38/     292 : 02 E6                       dw  SETVIDEOFLAG
(2)   39/     294 :                                                                     
(2)   40/     294 : (MACRO)                                     CALL ClearScreen        ; set cursor to home
(2)   40/     294 : D4                          SEP R4
(2)   40/     295 : 03 D8                       dw  CLEARSCREEN
(2)   41/     297 :                                             
(2)   42/     297 : =>FALSE                             IF BackBuffer <> "OFF"
(2)   43/     297 :                                             CALL CopyBackBuffer     ; clear second video buffer
(2)   44/     297 : [42]                                ENDIF
(2)   45/     297 :                     
(2)   46/     297 :                                                                             
(2)   47/     297 : (MACRO)                                     RETURN                  
(2)   47/     297 : D5                          SEP R5
(2)   48/     298 :                     ;------------------------------------------------------------------------------------------
(2)   49/     298 :                     
(2)   50/     298 :                     ; =========================================================================================
(2)   51/     298 :                     ; VideoOn - Turn pixie video on and set the flag
(2)   52/     298 :                     ;
(2)   53/     298 :                     ; Note: *** MANDATORY *** This function must be used to turn the video on
(2)   54/     298 :                     ;
(2)   55/     298 :                     ; Internal:
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm(Tty1861.asm) - Page 21 - 11/14/2020 15:50:22


(2)   56/     298 :                     ; RF.0          Value to set Video Flag true
(2)   57/     298 :                     ; =========================================================================================
(2)   58/     298 :                     
(2)   59/     298 : 69                  VideoOn:                INP 1                   ; turn 1861 video on
(2)   60/     299 :                                                                     
(2)   61/     299 : F8 FF                                       LDI  00FFH              ; set video flag to true (-1)
(2)   62/     29B : AF                                          PLO  RF
(2)   63/     29C : (MACRO)                                     CALL SetVideoFlag       
(2)   63/     29C : D4                          SEP R4
(2)   63/     29D : 02 E6                       dw  SETVIDEOFLAG
(2)   64/     29F :                                     
(2)   65/     29F : (MACRO)                                     RETURN
(2)   65/     29F : D5                          SEP R5
(2)   66/     2A0 :                     ;------------------------------------------------------------------------------------------
(2)   67/     2A0 :                     
(2)   68/     2A0 :                     ; =========================================================================================
(2)   69/     2A0 :                     ; VideoOff - Turn pixie video off and clear the flag
(2)   70/     2A0 :                     ;
(2)   71/     2A0 :                     ; Note: *** MANDATORY *** This function must be used to turn the video off
(2)   72/     2A0 :                     ;
(2)   73/     2A0 :                     ; Internal:
(2)   74/     2A0 :                     ; RD            Pointer to video flag
(2)   75/     2A0 :                     ; =========================================================================================
(2)   76/     2A0 :                     
(2)   77/     2A0 : 61                  VideoOff:               OUT 1                   ; turn 1861 video off
(2)   78/     2A1 :                     
(2)   79/     2A1 : 22                                          DEC  R2                 ; The output instruction increments stack
(2)   80/     2A2 :                                                                     ; pointer, so back up the stack pointer to
(2)   81/     2A2 :                                                                     ; point to its previous location.
(2)   82/     2A2 :                                                                     
(2)   83/     2A2 : F8 00                                       LDI  00H                ; set the video flag to false
(2)   84/     2A4 : AF                                          PLO  RF                                         
(2)   85/     2A5 : (MACRO)                                     CALL SetVideoFlag
(2)   85/     2A5 : D4                          SEP R4
(2)   85/     2A6 : 02 E6                       dw  SETVIDEOFLAG
(2)   86/     2A8 :                                     
(2)   87/     2A8 : (MACRO)                                     RETURN
(2)   87/     2A8 : D5                          SEP R5
(2)   88/     2A9 :                     ;------------------------------------------------------------------------------------------
(2)   89/     2A9 :                     
(2)   90/     2A9 :                     ; =========================================================================================
(2)   91/     2A9 :                     ; WaitForSafeUpdate -
(2)   92/     2A9 :                     ;               Check the 1861 video status and wait for DMA to complete before returning.
(2)   93/     2A9 :                     ;               When this function returns it is safe to make updates to the video.
(2)   94/     2A9 :                     ;               There will be time for about 8000 instruction cycles (at 2MHz) before the
(2)   95/     2A9 :                     ;               next DMA to occur.  All Get/Put video functions call this function before
(2)   96/     2A9 :                     ;               making any changes.  This logic is based on code found in Tom Pittman's, 
(2)   97/     2A9 :                     ;               Short Course In Programming, Chapter 7, Interrupts and DMA.
(2)   98/     2A9 :                     ;               
(2)   99/     2A9 :                     ;               Before DMA begins, EF1 is asserted for 28 instruction cycles, and before
(2)  100/     2A9 :                     ;               DMA ends EF1 is asserted for only 12 instruction cycles.  This code counts
(2)  101/     2A9 :                     ;               cycles while EF1 is asserted to determine when DMA has ended.
(2)  102/     2A9 :                     ;
(2)  103/     2A9 :                     ; Note: *REQUIRED* to guarantee safety before accessing video data. 
(2)  104/     2A9 :                     ;               Must call this function before calling any UNSAFE function.
(2)  105/     2A9 :                     ;
(2)  106/     2A9 :                     ; Internal:
(2)  107/     2A9 :                     ; RD            Pointer to video flag
(2)  108/     2A9 :                     ; =========================================================================================
(2)  109/     2A9 :                     
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm(Tty1861.asm) - Page 22 - 11/14/2020 15:50:22


(2)  110/     2A9 : (MACRO)             WaitForSafeUpdate:      LOAD RD, VideoFlag      ; set pointer to video flag                                             
(2)  110/     2A9 : F8 07                       LDI  lo(VIDEOFLAG)
(2)  110/     2AB : AD                          PLO  RD
(2)  110/     2AC : F8 7F                       LDI  hi(VIDEOFLAG)
(2)  110/     2AE : BD                          PHI  RD     
(2)  111/     2AF : 0D                                          LDN  RD                 ; check video flag so we don't wait forever
(2)  112/     2B0 : 32 BF                                       BZ   WFSU_Exit          ; for an EF1 signal that never occurs.
(2)  113/     2B2 :                                                                     ; Any updates are fine when video is off
(2)  114/     2B2 :                                             
(2)  115/     2B2 :                     
(2)  116/     2B2 : 34 B2               WFSU_Check_DMA:         B1   WFSU_Check_DMA     ; wait for first EF1 siginal
(2)  117/     2B4 :                                     
(2)  118/     2B4 : F8 14               WFSU_Sync:              LDI  14H                ; 20 instruction cycles
(2)  119/     2B6 :                     
(2)  120/     2B6 : 3C B6               WFSU_New_EF1:           BN1  WFSU_New_EF1       ; wait for next EF1 signal to start count
(2)  121/     2B8 :                     
(2)  122/     2B8 : FF 02               WFSU_Count:             SMI  02                 ; count down by 2 and keep counting for 12
(2)  123/     2BA : 34 B8                                       B1   WFSU_Count         ; (DMA end) or 28 (DMA begin) instructions
(2)  124/     2BC :                                             
(2)  125/     2BC : FE                                          SHL                     ; check sign bit to see if negative (20-28)
(2)  126/     2BD : 33 B4                                       BDF  WFSU_Sync          ; at DMA begin. DF = 1, means DMA begin
(2)  127/     2BF :                                                                     ; and we must wait for the DMA end
(2)  128/     2BF :                     
(2)  129/     2BF : (MACRO)             WFSU_Exit:              RETURN                  ; return now that DMA has ended
(2)  129/     2BF : D5                          SEP R5
(2)  130/     2C0 :                     ;------------------------------------------------------------------------------------------                     
(2)  131/     2C0 :                     
(2)  132/     2C0 :                     ; =========================================================================================
(2)  133/     2C0 :                     ; Create a pointer into a Video buffer at the location specified by Y location
(2)  134/     2C0 :                     ;
(2)  135/     2C0 :                     ; Note: *Internal* - Used to manipulator pointer into video buffer
(2)  136/     2C0 :                     ;
(2)  137/     2C0 :                     ; Parameters:
(2)  138/     2C0 :                     ; RE.0          X coordinate of the character
(2)  139/     2C0 :                     ; RE.1          Y coordinate of the character
(2)  140/     2C0 :                     ;
(2)  141/     2C0 :                     ; Internal:
(2)  142/     2C0 :                     ; R7.0          Swap Pointer for video buffers
(2)  143/     2C0 :                     ;
(2)  144/     2C0 :                     ; Return:
(2)  145/     2C0 :                     ; RF            Pointer to video buffer with Y Offset
(2)  146/     2C0 :                     ; =========================================================================================
(2)  147/     2C0 :                     
(2)  148/     2C0 : =>TRUE              VideoOffsetY:           IF BackBuffer == "OFF"
(2)  149/     2C0 : F8 7E                                               LDI  hi(DisplayBuffer)  ; prepare the pointer to the video buffer
(2)  150/     2C2 : BF                                                  PHI  RF
(2)  151/     2C3 : [148]                                       ENDIF
(2)  152/     2C3 :                     
(2)  153/     2C3 : =>FALSE                                     IF BackBuffer == "COPY"
(2)  154/     2C3 :                                                     LDI  hi(DoubleBuffer)   ; prepare the pointer to the back buffer
(2)  155/     2C3 :                                                     PHI  RF
(2)  156/     2C3 : [153]                                       ENDIF
(2)  157/     2C3 :                     
(2)  158/     2C3 : =>FALSE                                     IF BackBuffer == "SWAP"
(2)  159/     2C3 :                                                     GLO  R7                 ; prepare pointer to the current back buffer
(2)  160/     2C3 :                                                     PHI  RF
(2)  161/     2C3 : [158]                                       ENDIF                                   
(2)  162/     2C3 :                                             
(2)  163/     2C3 : 9E                                                  GHI  RE                 ; get the y position into video buffer                          
(2)  164/     2C4 :                                                     
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm(Tty1861.asm) - Page 23 - 11/14/2020 15:50:22


(2)  165/     2C4 : =>TRUE                                      IF Resolution == "64x32"
(2)  166/     2C4 : FA 1F                                               ANI  1FH                ; between 0 - 31
(2)  167/     2C6 : [165]                                       ENDIF
(2)  168/     2C6 :                                                                                     
(2)  169/     2C6 : =>FALSE                                     IF Resolution == "64x64"
(2)  170/     2C6 :                                                     ANI  3FH                ; or 0 - 63
(2)  171/     2C6 : [169]                                       ENDIF
(2)  172/     2C6 :                                             
(2)  173/     2C6 : =>FALSE                                     IF Resolution == "64x128"
(2)  174/     2C6 :                                                     ANI  7FH                ; or 0 - 127
(2)  175/     2C6 : [173]                                       ENDIF
(2)  176/     2C6 : FE                                                  SHL                     ; Convert Y value to position offset = (y * 8)
(2)  177/     2C7 : FE                                                  SHL                     ; check high bit of 64x128 count in df
(2)  178/     2C8 :                     
(2)  179/     2C8 : =>FALSE                                     IF Resolution == "64x128"
(2)  180/     2C8 :                                                     PLO  RF                 ; save RF low byte
(2)  181/     2C8 :                                                     BNF  VY_SkipHighInc     ; check high order bit of 64x128 count
(2)  182/     2C8 :                                                     GHI  RF                 ; get RF high byte
(2)  183/     2C8 :                                                     ADI  02H                ; df represents two's bit after shifting
(2)  184/     2C8 :                                                     PHI  RF                 ; update RF high byte
(2)  185/     2C8 :                     VY_SkipHighInc:                 GLO  RF                 ; restore RF low byte and continue shifting
(2)  186/     2C8 :                     
(2)  187/     2C8 : [179]                                       ENDIF                           
(2)  188/     2C8 : FE                                                  SHL
(2)  189/     2C9 : AF                                                  PLO  RF
(2)  190/     2CA : 3B D0                                               BNF  VY_SkipLowInc
(2)  191/     2CC : 9F                                                  GHI  RF
(2)  192/     2CD : FC 01                                               ADI  01H
(2)  193/     2CF : BF                                                  PHI  RF
(2)  194/     2D0 :                     
(2)  195/     2D0 : (MACRO)             VY_SkipLowInc:                  RETURN
(2)  195/     2D0 : D5                          SEP R5
(2)  196/     2D1 :                     ;------------------------------------------------------------------------------------------
(2)  197/     2D1 :                     
(2)  198/     2D1 :                     
(2)  199/     2D1 :                     ; =========================================================================================
(2)  200/     2D1 :                     ; Add the X byte offset to a pointer into a Video buffer
(2)  201/     2D1 :                     ;
(2)  202/     2D1 :                     ; Note: *Internal* - Used to manipulator pointer into video buffer
(2)  203/     2D1 :                     ;
(2)  204/     2D1 :                     ; Parameters:
(2)  205/     2D1 :                     ; RF            Pointer to video buffer with Y Offset
(2)  206/     2D1 :                     ; RE.0          X coordinate of the character
(2)  207/     2D1 :                     ; RE.1          Y coordinate of the character
(2)  208/     2D1 :                     ;
(2)  209/     2D1 :                     ; Return:
(2)  210/     2D1 :                     ; RF            Pointer to video buffer at X,Y byte Offset
(2)  211/     2D1 :                     ; RC.1          X Offset byte value
(2)  212/     2D1 :                     ; RC.0          X Offset bit value
(2)  213/     2D1 :                     ; =========================================================================================
(2)  214/     2D1 :                     
(2)  215/     2D1 : 8E                  VideoOffsetX:           GLO  RE         ; get the x bit position 
(2)  216/     2D2 : FA 07                                       ANI  07H        ; mask off all but lowest 3 bits
(2)  217/     2D4 : AC                                          PLO  RC         ; save bit value in RC.0
(2)  218/     2D5 :                                                     
(2)  219/     2D5 : 8E                                          GLO  RE         ; get the x byte position into video buffer
(2)  220/     2D6 : FA 3F                                       ANI  3FH        ; value 0 - 63
(2)  221/     2D8 : F6                                          SHR             ; Convert x value to position offset = (x / 8)
(2)  222/     2D9 : F6                                          SHR                     
(2)  223/     2DA : F6                                          SHR
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm(Tty1861.asm) - Page 24 - 11/14/2020 15:50:22


(2)  224/     2DB : BC                                          PHI  RC         ; save byte value in RC.1
(2)  225/     2DC :                                                                     
(2)  226/     2DC :                     
(2)  227/     2DC : 73                                          STXD            ; byte position offset in M(X)
(2)  228/     2DD : 60                                          IRX
(2)  229/     2DE :                                                     
(2)  230/     2DE : 8F                                          GLO  RF         ; advance the pointer coordinate by byte offset                         
(2)  231/     2DF : F4                                          ADD             ; add the offset to pointer                                     
(2)  232/     2E0 : AF                                          PLO  RF         ; save lower byte
(2)  233/     2E1 :                                             
(2)  234/     2E1 : 9F                                          GHI  RF         ; update high byte if needed                    
(2)  235/     2E2 : 7C 00                                       ADCI 00H        ; Add carry into high byte and save
(2)  236/     2E4 : BF                                          PHI  RF
(2)  237/     2E5 :                                                     
(2)  238/     2E5 : (MACRO)                                     RETURN
(2)  238/     2E5 : D5                          SEP R5
(2)  239/     2E6 :                     ;------------------------------------------------------------------------------------------
(2)  240/     2E6 :                     
(2)  241/     2E6 :                     ; =========================================================================================
(2)  242/     2E6 :                     ; SetVideoFlag - Set the video flag to false or true
(2)  243/     2E6 :                     ;
(2)  244/     2E6 :                     ; Note: *Internal* - Use VideoOn and VideOff to set or clear the video flag
(2)  245/     2E6 :                     ;
(2)  246/     2E6 :                     ; Parameters:
(2)  247/     2E6 :                     ; RF.0          Value for flag, zero for false, non-zero for true
(2)  248/     2E6 :                     ; Internal:
(2)  249/     2E6 :                     ; RD            Pointer to video flag
(2)  250/     2E6 :                     ; =========================================================================================
(2)  251/     2E6 : (MACRO)             SetVideoFlag:           LOAD RD, VideoFlag      ; set pointer to video flag                                                     
(2)  251/     2E6 : F8 07                       LDI  lo(VIDEOFLAG)
(2)  251/     2E8 : AD                          PLO  RD
(2)  251/     2E9 : F8 7F                       LDI  hi(VIDEOFLAG)
(2)  251/     2EB : BD                          PHI  RD     
(2)  252/     2EC : 8F                                          GLO  RF                 ; get the value for the flag
(2)  253/     2ED : 5D                                          STR  RD                 ; store the flag
(2)  254/     2EE :                                             
(2)  255/     2EE : (MACRO)                                     RETURN
(2)  255/     2EE : D5                          SEP R5
(2)  256/     2EF :                     ;------------------------------------------------------------------------------------------                     
(2)  257/     2EF :                     
(2)  258/     2EF :                     ; =========================================================================================
(2)  259/     2EF :                     ; Clear a line of text on the video console (6 rows of pixels at 8 bytes per row) along
(2)  260/     2EF :                     ; with the 2 rows of the next row of text.
(2)  261/     2EF :                     ;
(2)  262/     2EF :                     ; Note: *** UNSAFE *** This function does not check before accessing video data.
(2)  263/     2EF :                     ;               Must call WaitForSafeUpdate function before calling this function.
(2)  264/     2EF :                     ;
(2)  265/     2EF :                     ; Parameters:
(2)  266/     2EF :                     ; RE.0          X coordinate of the character
(2)  267/     2EF :                     ; RE.1          Y coordinate of the character
(2)  268/     2EF :                     ;
(2)  269/     2EF :                     ; Internal:
(2)  270/     2EF :                     ; RF            Pointer to video buffer
(2)  271/     2EF :                     ; RD            Counter
(2)  272/     2EF :                     ; R7.0          Swap Pointer for video buffers
(2)  273/     2EF :                     ; =========================================================================================
(2)  274/     2EF :                     
(2)  275/     2EF : (MACRO)             BlankLine:              CALL VideoOffsetY
(2)  275/     2EF : D4                          SEP R4
(2)  275/     2F0 : 02 C0                       dw  VIDEOOFFSETY
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm(Tty1861.asm) - Page 25 - 11/14/2020 15:50:22


(2)  276/     2F2 :                                                                                                     
(2)  277/     2F2 :                                                             
(2)  278/     2F2 : F8 00                                       LDI  00H        ; load byte counter
(2)  279/     2F4 : BD                                          PHI  RD
(2)  280/     2F5 : AD                                          PLO  RD
(2)  281/     2F6 :                     
(2)  282/     2F6 : F8 00               BL_Loop:                LDI  00H
(2)  283/     2F8 : 5F                                          STR  RF
(2)  284/     2F9 : 1F                                          INC  RF
(2)  285/     2FA : 1D                                          INC  RD
(2)  286/     2FB :                                                             
(2)  287/     2FB : 8D                                          GLO  RD
(2)  288/     2FC :                                             
(2)  289/     2FC : FD 40                                       SDI  40H        ;do 64 times (6 rows of pixels x 8 bytes per row                                        
(2)  290/     2FE :                                                             ; + 2 rows to overwrite existing text on line below.)                           
(2)  291/     2FE : CA 02 F6                                    LBNZ BL_Loop    
(2)  292/     301 :                                                             
(2)  293/     301 : (MACRO)                                     RETURN
(2)  293/     301 : D5                          SEP R5
(2)  294/     302 :                     ;------------------------------------------------------------------------------------------
(2)  295/     302 :                     
(2)  296/     302 :                     ; =========================================================================================
(2)  297/     302 :                     ; Advance cursor to next tab stop: 08H, 10H, 18H, 20H, 28H, 30H, 38H, 00H (NextLine)
(2)  298/     302 :                     ;
(2)  299/     302 :                     ; Note: Safe - This function does not access video data
(2)  300/     302 :                     ;
(2)  301/     302 :                     ; Parameters:
(2)  302/     302 :                     ; RE.0          X coordinate of the character
(2)  303/     302 :                     ; RE.1          Y coordinate of the character
(2)  304/     302 :                     ;
(2)  305/     302 :                     ;
(2)  306/     302 :                     ; Return:
(2)  307/     302 :                     ; RE.0          Updated X coordinate
(2)  308/     302 :                     ; RE.1          Updated Y coordinate
(2)  309/     302 :                     ; =========================================================================================
(2)  310/     302 :                     
(2)  311/     302 : 8E                  TabCursor:              GLO  RE                 ; get cursorX value
(2)  312/     303 : FC 08                                       ADI  08H                ; advance 8 pixels, 2 avg char widths
(2)  313/     305 : FA 78                                       ANI  78H                ; mask off lower 3 bits (truncate to 8)
(2)  314/     307 : AE                                          PLO  RE                 ; set the x cursor to begining of line (zero) 
(2)  315/     308 :                     
(2)  316/     308 : FD 38                                       SDI  38H                ; check to see if we went past last tab stop
(2)  317/     30A : 33 0F                                       BGE  TAB_Exit           ; If not, we're done
(2)  318/     30C :                                             
(2)  319/     30C : (MACRO)                                     CALL NextLine           ; If we went over go to next line
(2)  319/     30C : D4                          SEP R4
(2)  319/     30D : 03 2D                       dw  NEXTLINE
(2)  320/     30F :                                             
(2)  321/     30F :                                                                                     
(2)  322/     30F : (MACRO)             TAB_Exit:               RETURN
(2)  322/     30F : D5                          SEP R5
(2)  323/     310 :                     ;------------------------------------------------------------------------------------------
(2)  324/     310 :                     ; =========================================================================================
(2)  325/     310 :                     ; Move cursor back one position and delete the character
(2)  326/     310 :                     ;
(2)  327/     310 :                     ; Note: *** UNSAFE *** This function does not check before accessing video data.
(2)  328/     310 :                     ;               Must call WaitForSafeUpdate function before calling this function.
(2)  329/     310 :                     
(2)  330/     310 :                     ;
(2)  331/     310 :                     ; Parameters:
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm(Tty1861.asm) - Page 26 - 11/14/2020 15:50:22


(2)  332/     310 :                     ; RE.0          X coordinate of the character
(2)  333/     310 :                     ; RE.1          Y coordinate of the character
(2)  334/     310 :                     ; 
(2)  335/     310 :                     ; Internals:
(2)  336/     310 :                     ; RF.0          Width of average character to back up
(2)  337/     310 :                     ;
(2)  338/     310 :                     ; Return:
(2)  339/     310 :                     ; RE.0          Updated X coordinate
(2)  340/     310 :                     ; RE.1          Updated Y coordinate
(2)  341/     310 :                     ; =========================================================================================
(2)  342/     310 :                     
(2)  343/     310 : F8 04               Backspace:              LDI  04H                ; average charcter width = 4 pixels
(2)  344/     312 : AF                                          PLO  RF                 ; RD.0 has width to back pu
(2)  345/     313 : (MACRO)                                     CALL LeftCursor         ; Move cursor back one character                
(2)  345/     313 : D4                          SEP R4
(2)  345/     314 : 03 80                       dw  LEFTCURSOR
(2)  346/     316 :                                             
(2)  347/     316 : (MACRO)                                     CALL BlankCharacter     ; erase the previous character  
(2)  347/     316 : D4                          SEP R4
(2)  347/     317 : 03 4B                       dw  BLANKCHARACTER
(2)  348/     319 :                                                                                     
(2)  349/     319 : (MACRO)                                     RETURN
(2)  349/     319 : D5                          SEP R5
(2)  350/     31A :                     ;------------------------------------------------------------------------------------------
(2)  351/     31A :                     
(2)  352/     31A :                     
(2)  353/     31A :                     ; =========================================================================================
(2)  354/     31A :                     ; Create mask for blanking character bits in video buffer
(2)  355/     31A :                     ;
(2)  356/     31A :                     ; Note: *Internal* - Used for removing character pixels
(2)  357/     31A :                     ;
(2)  358/     31A :                     ; Parameters:
(2)  359/     31A :                     ; RE.0          X coordinate of the character
(2)  360/     31A :                     ; RE.1          Y coordinate of the character
(2)  361/     31A :                     ; RC.0          X Offset bit value
(2)  362/     31A :                     ; RC.1          X Offset byte value
(2)  363/     31A :                     ;
(2)  364/     31A :                     ; Internals:
(2)  365/     31A :                     ; RD.0          Counter for calculating Mask
(2)  366/     31A :                     ;
(2)  367/     31A :                     ; Returns:
(2)  368/     31A :                     ; RD.1          Mask for video bit values X byte
(2)  369/     31A :                     ; =========================================================================================
(2)  370/     31A : F8 FF               CreateMask:             LDI  00FFH              ; load bit mask
(2)  371/     31C : BD                                          PHI  RD         
(2)  372/     31D : 8C                                          GLO  RC                 ; put the X offset bit value in counter
(2)  373/     31E : AD                                          PLO  RD                  
(2)  374/     31F :                                             
(2)  375/     31F : 32 28               CM_Test:                BZ   CM_Done            ; keep going to counter exhausted
(2)  376/     321 : 9D                                          GHI  RD                 ; get the mask byte
(2)  377/     322 : F6                                          SHR                     ; shift once for each bit offset
(2)  378/     323 : BD                                          PHI  RD                 ; save mask value
(2)  379/     324 : 2D                                          DEC  RD                 ; decrement counter
(2)  380/     325 : 8D                                          GLO  RD                 ; test byte for zero
(2)  381/     326 : 30 1F                                       BR   CM_Test
(2)  382/     328 :                                             
(2)  383/     328 : 9D                  CM_Done:                GHI  RD                 ; get mask value
(2)  384/     329 : FB FF                                       XRI  00FFH              ; invert all the bits for ANDing
(2)  385/     32B : BD                                          PHI  RD                 ; put bit mask back in RD.1
(2)  386/     32C :                     
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm(Tty1861.asm) - Page 27 - 11/14/2020 15:50:22


(2)  387/     32C :                     
(2)  388/     32C : (MACRO)                                     RETURN
(2)  388/     32C : D5                          SEP R5
(2)  389/     32D :                     ;------------------------------------------------------------------------------------------
(2)  390/     32D :                     
(2)  391/     32D :                     
(2)  392/     32D :                     ; =========================================================================================
(2)  393/     32D :                     ; Advance cursor to begining of the next line. 
(2)  394/     32D :                     ;
(2)  395/     32D :                     ; Note: Safe - This function does not access video data
(2)  396/     32D :                     ;
(2)  397/     32D :                     ; Parameters:
(2)  398/     32D :                     ; RE.0          X coordinate of the character
(2)  399/     32D :                     ; RE.1          Y coordinate of the character
(2)  400/     32D :                     ;
(2)  401/     32D :                     ;
(2)  402/     32D :                     ; Return:
(2)  403/     32D :                     ; RE.0          Updated X coordinate
(2)  404/     32D :                     ; RE.1          Updated Y coordinate
(2)  405/     32D :                     ; =========================================================================================
(2)  406/     32D :                     
(2)  407/     32D : F8 00               NextLine:               LDI  00H                ; load zero and save as cursorX
(2)  408/     32F : AE                                          PLO  RE                 ; set the x cursor to begining of line (zero) 
(2)  409/     330 :                     
(2)  410/     330 : 9E                                          GHI  RE                 ; advance y cursor to point to next line                                                                        
(2)  411/     331 : FC 06                                       ADI  06H                ; each line is 6 pixels high
(2)  412/     333 : BE                                          PHI  RE                 ; update cursorY 
(2)  413/     334 :                     
(2)  414/     334 : =>FALSE                             IF Resolution == "64x128"       
(2)  415/     334 :                                             SDI  78H                ; check to see if we are past the end           
(2)  416/     334 :                                             BGE NL_Exit             ; DF = 1 means haven't gone past 120 y pixels                                                   
(2)  417/     334 :                                             
(2)  418/     334 :                                             LDI  04H                ; go back to top line
(2)  419/     334 :                                             PHI  RE                 ; update cursorY                
(2)  420/     334 : [414]                               ENDIF
(2)  421/     334 :                                             
(2)  422/     334 : =>FALSE                             IF Resolution == "64x64"        
(2)  423/     334 :                                             SDI  3CH                ; check to see if we are past the end
(2)  424/     334 :                                             BGE NL_Exit             ; DF = 1 means haven't gone past 60 y pixels                            
(2)  425/     334 :                                             
(2)  426/     334 :                                             LDI  02H                ; go back to top line
(2)  427/     334 :                                             PHI  RE                 ; update cursorY                
(2)  428/     334 : [422]                               ENDIF
(2)  429/     334 :                                             
(2)  430/     334 : =>TRUE                              IF Resolution == "64x32"        
(2)  431/     334 : FD 1E                                       SDI  1EH                ; check to see if we are past the end
(2)  432/     336 : 33 3B                                       BGE NL_Exit             ; DF = 1 means haven't gone past 30 y pixels                            
(2)  433/     338 :                                             
(2)  434/     338 : F8 01                                       LDI  01H                ; go back to top line
(2)  435/     33A : BE                                          PHI  RE                 ; update cursorY
(2)  436/     33B : [430]                               ENDIF
(2)  437/     33B :                                                                                     
(2)  438/     33B : (MACRO)             NL_Exit:                RETURN
(2)  438/     33B : D5                          SEP R5
(2)  439/     33C :                     ;------------------------------------------------------------------------------------------
(2)  440/     33C :                     
(2)  441/     33C :                     ; =========================================================================================
(2)  442/     33C :                     ; Advance cursor down to next line without changing x location
(2)  443/     33C :                     ;
(2)  444/     33C :                     ; Note: *** UNSAFE *** This function does not check before accessing video data.
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm(Tty1861.asm) - Page 28 - 11/14/2020 15:50:22


(2)  445/     33C :                     ;               Must call WaitForSafeUpdate function before calling this function.
(2)  446/     33C :                     ;
(2)  447/     33C :                     ; Parameters:
(2)  448/     33C :                     ; RE.0          X coordinate of the character
(2)  449/     33C :                     ; RE.1          Y coordinate of the character
(2)  450/     33C :                     ;
(2)  451/     33C :                     ;
(2)  452/     33C :                     ; Return:
(2)  453/     33C :                     ; RE.0          Updated X coordinate
(2)  454/     33C :                     ; RE.1          Updated Y coordinate
(2)  455/     33C :                     ; =========================================================================================
(2)  456/     33C :                     
(2)  457/     33C : 9E                  DownCursor:             GHI  RE                 ; move y by 6 pixels
(2)  458/     33D : FC 06                                       ADI  06H
(2)  459/     33F : BE                                          PHI  RE                 ; save y
(2)  460/     340 :                                             
(2)  461/     340 : =>FALSE                             IF Resolution == "64x128"                                                                                       
(2)  462/     340 :                                             SDI  78H                ; check y value to see if we went past 120
(2)  463/     340 :                                             BGE  DC_Blank           ; if not, erase the next line                   
(2)  464/     340 :                     
(2)  465/     340 :                                             LDI  04H                ; if so, move back to first line at top of console
(2)  466/     340 :                                             PHI  RE                 ; save y
(2)  467/     340 : [461]                               ENDIF
(2)  468/     340 :                                     
(2)  469/     340 : =>FALSE                             IF Resolution == "64x64"                                                                                        
(2)  470/     340 :                                             SDI  3CH                ; check y value to see if we went past 60
(2)  471/     340 :                                             BGE  DC_Blank           ; if not, erase the next line
(2)  472/     340 :                                             
(2)  473/     340 :                                             LDI  02H                ; if so, move back to first line at top of console
(2)  474/     340 :                                             PHI  RE                 ; save y
(2)  475/     340 : [469]                               ENDIF
(2)  476/     340 :                                             
(2)  477/     340 : =>TRUE                              IF Resolution == "64x32"        
(2)  478/     340 : FD 1E                                       SDI  1EH                ; check y value to see if we went past 30
(2)  479/     342 : 33 47                                       BGE  DC_Blank           ; if not, erase the next line
(2)  480/     344 :                                             
(2)  481/     344 : F8 01                                       LDI  01H                ; if so, move back to first line at top of console
(2)  482/     346 : BE                                          PHI  RE                 ; save y        
(2)  483/     347 : [477]                               ENDIF
(2)  484/     347 :                                             
(2)  485/     347 : (MACRO)             DC_Blank:               CALL BlankLine          ; erase existing text
(2)  485/     347 : D4                          SEP R4
(2)  485/     348 : 02 EF                       dw  BLANKLINE
(2)  486/     34A :                                             
(2)  487/     34A :                                                                                     
(2)  488/     34A : (MACRO)                                     RETURN
(2)  488/     34A : D5                          SEP R5
(2)  489/     34B :                     ;------------------------------------------------------------------------------------------
(2)  490/     34B :                     
(2)  491/     34B :                     ; =========================================================================================
(2)  492/     34B :                     ; Clear character pixels from the current cursor location
(2)  493/     34B :                     ;
(2)  494/     34B :                     ; Note: *** UNSAFE *** This function does not check before accessing video data.
(2)  495/     34B :                     ;               Must call WaitForSafeUpdate function before calling this function.
(2)  496/     34B :                     ;
(2)  497/     34B :                     ; Parameters:
(2)  498/     34B :                     ; RE.0          X coordinate of the character
(2)  499/     34B :                     ; RE.1          Y coordinate of the character
(2)  500/     34B :                     ;
(2)  501/     34B :                     ; Internal:
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm(Tty1861.asm) - Page 29 - 11/14/2020 15:50:22


(2)  502/     34B :                     ; RF            Pointer to video buffer
(2)  503/     34B :                     ; RD.1          Mask for video bit values X byte
(2)  504/     34B :                     ; RD.0          Counter
(2)  505/     34B :                     ; RC.0          X Offset bit value
(2)  506/     34B :                     ; RC.1          X Offset byte value
(2)  507/     34B :                     ; =========================================================================================
(2)  508/     34B :                     
(2)  509/     34B : (MACRO)             BlankCharacter:         CALL VideoOffsetY       ; set pointer to video at y location
(2)  509/     34B : D4                          SEP R4
(2)  509/     34C : 02 C0                       dw  VIDEOOFFSETY
(2)  510/     34E : (MACRO)                                     CALL VideoOffsetX       ; set pointer to video at x,y location
(2)  510/     34E : D4                          SEP R4
(2)  510/     34F : 02 D1                       dw  VIDEOOFFSETX
(2)  511/     351 :                     
(2)  512/     351 : 8E                                          GLO  RE                 ; check x location
(2)  513/     352 : 3A 59                                       BNZ  BCH_GetMask        ; if inside line, calculate masks
(2)  514/     354 :                                             
(2)  515/     354 : (MACRO)                                     CALL BlankLine          ; if we are the begining, just clear the line
(2)  515/     354 : D4                          SEP R4
(2)  515/     355 : 02 EF                       dw  BLANKLINE
(2)  516/     357 : 30 7F                                       BR   BCH_Done                   
(2)  517/     359 :                                                                     
(2)  518/     359 : (MACRO)             BCH_GetMask:            CALL CreateMask         ; get the mask for video bits
(2)  518/     359 : D4                          SEP R4
(2)  518/     35A : 03 1A                       dw  CREATEMASK
(2)  519/     35C :                     
(2)  520/     35C : F8 00                                       LDI  00H                ; initialize counter 
(2)  521/     35E : AD                                          PLO  RD                 
(2)  522/     35F :                                             
(2)  523/     35F :                     
(2)  524/     35F : 9D                  BCH_Blank:              GHI  RD                 ; get mask and put at M(X)
(2)  525/     360 : 73                                          STXD
(2)  526/     361 : 60                                          IRX
(2)  527/     362 :                                             
(2)  528/     362 : 0F                                          LDN  RF                 ; load video byte
(2)  529/     363 : F2                                          AND                     ; and with mask                 
(2)  530/     364 : 5F                                          STR  RF                 ; put it back in memory
(2)  531/     365 :                                             
(2)  532/     365 : 9C                                          GHI  RC                 ; get the byte offset value
(2)  533/     366 : FD 07                                       SDI  07H                ; check for last byte
(2)  534/     368 : 32 6F                                       BZ   BCH_LastByte       ; don't blank next byte after last byte
(2)  535/     36A :                                             
(2)  536/     36A : F8 00                                       LDI  00H                ; blank out next byte after byte 0 to 6
(2)  537/     36C : 1F                                          INC  RF                 ; set video pointer to next byte
(2)  538/     36D : 5F                                          STR  RF                 ; blank out any remaining pixels
(2)  539/     36E : 2F                                          DEC  RF                 ; set video ptr back to x byte
(2)  540/     36F :                                             
(2)  541/     36F : 1D                  BCH_LastByte:           INC  RD                 ; increment counter
(2)  542/     370 : 8D                                          GLO  RD                 ; check if done 5 times
(2)  543/     371 : FD 05                                       SDI  05H                
(2)  544/     373 : 32 7F                                       BZ   BCH_Done           
(2)  545/     375 :                                             
(2)  546/     375 : 8F                                          GLO  RF                 ; Adjust pointer to next line of character
(2)  547/     376 : FC 08                                       ADI  08H                ; each line is 8 bytes 
(2)  548/     378 : AF                                          PLO  RF                 ; save low byte and adjust hi byte with carry
(2)  549/     379 :                                             
(2)  550/     379 : 9F                                          GHI  RF
(2)  551/     37A : 7C 00                                       ADCI 00H                
(2)  552/     37C : BF                                          PHI  RF                 ; video pointer now points to next line of character
(2)  553/     37D : 30 5F                                       BR   BCH_Blank          ; do next line
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm(Tty1861.asm) - Page 30 - 11/14/2020 15:50:22


(2)  554/     37F :                                             
(2)  555/     37F : (MACRO)             BCH_Done:               RETURN
(2)  555/     37F : D5                          SEP R5
(2)  556/     380 :                     ;------------------------------------------------------------------------------------------
(2)  557/     380 :                     
(2)  558/     380 :                     
(2)  559/     380 :                     ; =========================================================================================
(2)  560/     380 :                     ; Move cursor backwards a number of pixel widths
(2)  561/     380 :                     ;
(2)  562/     380 :                     ; Note: Safe - This function does not access video data
(2)  563/     380 :                     ;
(2)  564/     380 :                     ; Parameters:
(2)  565/     380 :                     ; RF.0          Width to back up cursor
(2)  566/     380 :                     ; RE.0          X coordinate of the character
(2)  567/     380 :                     ; RE.1          Y coordinate of the character
(2)  568/     380 :                     ;
(2)  569/     380 :                     ;
(2)  570/     380 :                     ; Return:
(2)  571/     380 :                     ; RE.0          Updated X coordinate
(2)  572/     380 :                     ; RE.1          Updated Y coordinate
(2)  573/     380 :                     ; =========================================================================================
(2)  574/     380 :                     
(2)  575/     380 : 8E                  LeftCursor:             GLO  RE                 ; 
(2)  576/     381 : 32 8F                                       BZ   LC_PreviousLine    ; if begining of line, go back one line
(2)  577/     383 :                                             
(2)  578/     383 : 73                                          STXD                    ; store x location it in M(X)
(2)  579/     384 : 60                                          IRX
(2)  580/     385 :                                             
(2)  581/     385 : 8F                                          GLO  RF                 ; get the pixel width
(2)  582/     386 :                                             
(2)  583/     386 : F5                                          SD                      ; move x back RD.0 pixels
(2)  584/     387 : AE                                          PLO  RE                 ; save x                                                                                
(2)  585/     388 : 33 A4                                       BGE  LC_Exit            ; if positive or zero, we are done
(2)  586/     38A :                                             
(2)  587/     38A : F8 00                                       LDI  00H                ; don't back up before begining of line
(2)  588/     38C : AE                                          PLO  RE
(2)  589/     38D : 30 A4                                       BR   LC_Exit            
(2)  590/     38F :                                             
(2)  591/     38F : 9E                  LC_PreviousLine:        GHI  RE
(2)  592/     390 : FF 06                                       SMI  06H                ; back up one line
(2)  593/     392 : BE                                          PHI  RE
(2)  594/     393 : 3B 9E                                       BL   LC_Home            ; but don't go beyond home
(2)  595/     395 :                                             
(2)  596/     395 : F8 40                                       LDI  40H                ; set M(X) to end of line
(2)  597/     397 : 73                                          STXD                    ; store eol in M(X)
(2)  598/     398 : 60                                          IRX
(2)  599/     399 :                                             
(2)  600/     399 : 8F                                          GLO  RF                 ; get the pixel width
(2)  601/     39A : F5                                          SD                      ; back up from eol                      
(2)  602/     39B : AE                                          PLO  RE         
(2)  603/     39C : 30 A4                                       BR   LC_Exit
(2)  604/     39E :                                             
(2)  605/     39E : =>FALSE             LC_Home:        IF Resolution == "64x128"
(2)  606/     39E :                                             LDI  04H                ; set y to first line
(2)  607/     39E :                                             PHI  RE
(2)  608/     39E : [605]                               ENDIF
(2)  609/     39E :                                     
(2)  610/     39E : =>FALSE                             IF Resolution == "64x64"
(2)  611/     39E :                                             LDI  02H                ; set y to first line
(2)  612/     39E :                                             PHI  RE
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm(Tty1861.asm) - Page 31 - 11/14/2020 15:50:22


(2)  613/     39E : [610]                               ENDIF
(2)  614/     39E :                                     
(2)  615/     39E : =>TRUE                              IF Resolution == "64x32"        
(2)  616/     39E : F8 01                                       LDI  01H                ; set y to first line
(2)  617/     3A0 : BE                                          PHI  RE
(2)  618/     3A1 : [615]                               ENDIF
(2)  619/     3A1 : F8 00                                       LDI  00H                ; set x to beginning
(2)  620/     3A3 : AE                                          PLO  RE
(2)  621/     3A4 :                     
(2)  622/     3A4 : (MACRO)             LC_Exit:                RETURN
(2)  622/     3A4 : D5                          SEP R5
(2)  623/     3A5 :                     ;------------------------------------------------------------------------------------------
(2)  624/     3A5 :                     
(2)  625/     3A5 :                     
(2)  626/     3A5 :                     ; =========================================================================================
(2)  627/     3A5 :                     ; Move cursor forwards a number of pixel widths
(2)  628/     3A5 :                     ;
(2)  629/     3A5 :                     ; Note: Safe - This function does not access video data
(2)  630/     3A5 :                     ;
(2)  631/     3A5 :                     ; Parameters:
(2)  632/     3A5 :                     ; RF.0          Width to advance cursor
(2)  633/     3A5 :                     ; RE.0          X coordinate of the character
(2)  634/     3A5 :                     ; RE.1          Y coordinate of the character
(2)  635/     3A5 :                     ;
(2)  636/     3A5 :                     ;
(2)  637/     3A5 :                     ; Return:
(2)  638/     3A5 :                     ; RE.0          Updated X coordinate
(2)  639/     3A5 :                     ; RE.1          Updated Y coordinate
(2)  640/     3A5 :                     ; =========================================================================================
(2)  641/     3A5 :                     
(2)  642/     3A5 : 8F                  RightCursor:            GLO  RF                 ; advance the x coordinate by the
(2)  643/     3A6 : 73                                          STXD                    ; width of the character + 1
(2)  644/     3A7 : 60                                          IRX                     ; store width in M(X)
(2)  645/     3A8 :                                             
(2)  646/     3A8 : 8E                                          GLO  RE
(2)  647/     3A9 : F4                                          ADD
(2)  648/     3AA : FC 01                                       ADI  01H
(2)  649/     3AC : AE                                          PLO  RE
(2)  650/     3AD :                                                             
(2)  651/     3AD : FD 3C                                       SDI  3CH                ; check x value to see if we went past 60
(2)  652/     3AF : 33 BF                                       BGE  RC_Exit
(2)  653/     3B1 :                                                             
(2)  654/     3B1 : F8 00                                       LDI  00H                ; set x for beginning of next line and adjust y
(2)  655/     3B3 : AE                                          PLO  RE
(2)  656/     3B4 :                                                                                     
(2)  657/     3B4 : 9E                                          GHI  RE                 ; move y by 6 pixels
(2)  658/     3B5 : FC 06                                       ADI  06H
(2)  659/     3B7 : BE                                          PHI  RE
(2)  660/     3B8 :                     
(2)  661/     3B8 : =>FALSE                             IF Resolution == "64x128"               
(2)  662/     3B8 :                                             SDI  78H                ; check y value to see if we went past 120
(2)  663/     3B8 :                                             BGE  RC_Exit
(2)  664/     3B8 :                                                                     
(2)  665/     3B8 :                                             LDI  04H                ; if so move back to first line at top of console
(2)  666/     3B8 :                                             PHI  RE 
(2)  667/     3B8 : [661]                               ENDIF                                   
(2)  668/     3B8 :                                     
(2)  669/     3B8 : =>FALSE                             IF Resolution == "64x64"                
(2)  670/     3B8 :                                             SDI  3CH                ; check y value to see if we went past 60
(2)  671/     3B8 :                                             BGE  RC_Exit
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm(Tty1861.asm) - Page 32 - 11/14/2020 15:50:22


(2)  672/     3B8 :                                             
(2)  673/     3B8 :                                             LDI  02H                ; if so move back to first line at top of console
(2)  674/     3B8 :                                             PHI  RE 
(2)  675/     3B8 : [669]                               ENDIF
(2)  676/     3B8 :                                     
(2)  677/     3B8 : =>TRUE                              IF Resolution == "64x32"        
(2)  678/     3B8 : FD 1E                                       SDI  1EH                ; check y value to see if we went past 30
(2)  679/     3BA : 33 BF                                       BGE  RC_Exit
(2)  680/     3BC :                                                                     
(2)  681/     3BC : F8 01                                       LDI  01H                ; if so move back to first line at top of console
(2)  682/     3BE : BE                                          PHI  RE 
(2)  683/     3BF : [677]                               ENDIF
(2)  684/     3BF :                     
(2)  685/     3BF : (MACRO)             RC_Exit:                RETURN
(2)  685/     3BF : D5                          SEP R5
(2)  686/     3C0 :                     ;------------------------------------------------------------------------------------------
(2)  687/     3C0 :                     
(2)  688/     3C0 :                     ; =========================================================================================
(2)  689/     3C0 :                     ; Move cursor back one pixel position and clear the column
(2)  690/     3C0 :                     ;
(2)  691/     3C0 :                     ; Note: *** UNSAFE *** This function does not check before accessing video data.
(2)  692/     3C0 :                     ;               Must call WaitForSafeUpdate function before calling this function.
(2)  693/     3C0 :                     ;
(2)  694/     3C0 :                     ; Parameters:
(2)  695/     3C0 :                     ; RE.0          X coordinate of the character
(2)  696/     3C0 :                     ; RE.1          Y coordinate of the character
(2)  697/     3C0 :                     ; 
(2)  698/     3C0 :                     ; Internals:
(2)  699/     3C0 :                     ; RF.0          Width of to back up
(2)  700/     3C0 :                     ;
(2)  701/     3C0 :                     ; Return:
(2)  702/     3C0 :                     ; RE.0          Updated X coordinate
(2)  703/     3C0 :                     ; RE.1          Updated Y coordinate
(2)  704/     3C0 :                     ; =========================================================================================
(2)  705/     3C0 :                     
(2)  706/     3C0 : F8 01               Rubout:                 LDI  01H                ; rubout one column of pixels
(2)  707/     3C2 : AF                                          PLO  RF                 ; pixel width to back up
(2)  708/     3C3 : (MACRO)                                     CALL LeftCursor         ; Move cursor back one character                
(2)  708/     3C3 : D4                          SEP R4
(2)  708/     3C4 : 03 80                       dw  LEFTCURSOR
(2)  709/     3C6 :                                             
(2)  710/     3C6 : (MACRO)                                     CALL BlankCharacter     ; erase the previous pixel column       
(2)  710/     3C6 : D4                          SEP R4
(2)  710/     3C7 : 03 4B                       dw  BLANKCHARACTER
(2)  711/     3C9 :                                                                                     
(2)  712/     3C9 : (MACRO)                                     RETURN
(2)  712/     3C9 : D5                          SEP R5
(2)  713/     3CA :                     ;------------------------------------------------------------------------------------------
(2)  714/     3CA :                     
(2)  715/     3CA :                     ; =========================================================================================
(2)  716/     3CA :                     ; Move cursor forward one pixel position
(2)  717/     3CA :                     ;
(2)  718/     3CA :                     ; Note: Safe - This function does not access video data
(2)  719/     3CA :                     ;
(2)  720/     3CA :                     ; Parameters:
(2)  721/     3CA :                     ; RE.0          X coordinate of the character
(2)  722/     3CA :                     ; RE.1          Y coordinate of the character
(2)  723/     3CA :                     ; 
(2)  724/     3CA :                     ; Internals:
(2)  725/     3CA :                     ; RF.0          Width of character (zero)
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm(Tty1861.asm) - Page 33 - 11/14/2020 15:50:22


(2)  726/     3CA :                     ;
(2)  727/     3CA :                     ; Return:
(2)  728/     3CA :                     ; RE.0          Updated X coordinate
(2)  729/     3CA :                     ; RE.1          Updated Y coordinate
(2)  730/     3CA :                     ; =========================================================================================
(2)  731/     3CA : F8 00               UnitSeparator:          LDI  00H                ; put zero as character width
(2)  732/     3CC : AF                                          PLO  RF                 
(2)  733/     3CD :                                             
(2)  734/     3CD : (MACRO)                                     CALL RightCursor        ; advance cursor 0+1 pixel column
(2)  734/     3CD : D4                          SEP R4
(2)  734/     3CE : 03 A5                       dw  RIGHTCURSOR
(2)  735/     3D0 :                                             
(2)  736/     3D0 : (MACRO)                                     RETURN
(2)  736/     3D0 : D5                          SEP R5
(2)  737/     3D1 :                     ; =========================================================================================
(2)  738/     3D1 :                     ; Clear line and position cursror at the begining of the current line. 
(2)  739/     3D1 :                     ;
(2)  740/     3D1 :                     ; Note: *** UNSAFE *** This function does not check before accessing video data.
(2)  741/     3D1 :                     ;               Must call WaitForSafeUpdate function before calling this function.
(2)  742/     3D1 :                     ;
(2)  743/     3D1 :                     ; Parameters:
(2)  744/     3D1 :                     ; RE.0          X coordinate of the character
(2)  745/     3D1 :                     ; RE.1          Y coordinate of the character
(2)  746/     3D1 :                     ;
(2)  747/     3D1 :                     ;
(2)  748/     3D1 :                     ; Return:
(2)  749/     3D1 :                     ; RE.0          Updated X coordinate
(2)  750/     3D1 :                     ; RE.1          Updated Y coordinate
(2)  751/     3D1 :                     ; =========================================================================================
(2)  752/     3D1 :                     
(2)  753/     3D1 : F8 00               CancelLine:             LDI  00H                ; load zero and save as cursorX
(2)  754/     3D3 : AE                                          PLO  RE                 ; set the x cursor to begining of line (zero) 
(2)  755/     3D4 :                     
(2)  756/     3D4 : (MACRO)                                     CALL BlankLine          ; clear the line
(2)  756/     3D4 : D4                          SEP R4
(2)  756/     3D5 : 02 EF                       dw  BLANKLINE
(2)  757/     3D7 :                                             
(2)  758/     3D7 : (MACRO)                                     RETURN
(2)  758/     3D7 : D5                          SEP R5
(2)  759/     3D8 :                     ;------------------------------------------------------------------------------------------
(2)  760/     3D8 :                     
(2)  761/     3D8 :                     ; =========================================================================================
(2)  762/     3D8 :                     ; ClearScreen - Blank the video screen and home the cursor.
(2)  763/     3D8 :                     ;
(2)  764/     3D8 :                     ; Note: Safe - This function checks the video status before accessing video data
(2)  765/     3D8 :                     ;
(2)  766/     3D8 :                     ; Internal:
(2)  767/     3D8 :                     ; RF.1          zero value to fill screen
(2)  768/     3D8 :                     ; RE.0          X coordinate of the character
(2)  769/     3D8 :                     ; RE.1          Y coordinate of the character
(2)  770/     3D8 :                     ; =========================================================================================
(2)  771/     3D8 :                     
(2)  772/     3D8 : (MACRO)             ClearScreen:            CALL WaitForSafeUpdate  ;Wait for DMA to complete before clearing
(2)  772/     3D8 : D4                          SEP R4
(2)  772/     3D9 : 02 A9                       dw  WAITFORSAFEUPDATE
(2)  773/     3DB :                                             
(2)  774/     3DB : F8 00                                       LDI  00H                ; clear screen
(2)  775/     3DD : BF                                          PHI  RF
(2)  776/     3DE : (MACRO)                                     CALL FillScreen
(2)  776/     3DE : D4                          SEP R4
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm(Tty1861.asm) - Page 34 - 11/14/2020 15:50:22


(2)  776/     3DF : 00 6D                       dw  FILLSCREEN
(2)  777/     3E1 :                                             
(2)  778/     3E1 : F8 00                                       LDI  00H                ; set x location to left margin                 
(2)  779/     3E3 : AE                                          PLO  RE
(2)  780/     3E4 :                                             
(2)  781/     3E4 : =>FALSE                             IF Resolution == "64x128"
(2)  782/     3E4 :                                             LDI  04H                ; set y location to top line                    
(2)  783/     3E4 :                                             PHI  RE
(2)  784/     3E4 : [781]                               ENDIF
(2)  785/     3E4 :                                     
(2)  786/     3E4 : =>FALSE                             IF Resolution == "64x64"
(2)  787/     3E4 :                                             LDI  02H                ; set y location to top line                    
(2)  788/     3E4 :                                             PHI  RE
(2)  789/     3E4 : [786]                               ENDIF
(2)  790/     3E4 :                                     
(2)  791/     3E4 : =>TRUE                              IF Resolution == "64x32"
(2)  792/     3E4 : F8 01                                       LDI  01H                ; set y location to top line                    
(2)  793/     3E6 : BE                                          PHI  RE
(2)  794/     3E7 : [791]                               ENDIF
(2)  795/     3E7 : (MACRO)                                     CALL SetCursor          ; send cursor home
(2)  795/     3E7 : D4                          SEP R4
(2)  795/     3E8 : 04 AB                       dw  SETCURSOR
(2)  796/     3EA :                                                             
(2)  797/     3EA : (MACRO)                                     RETURN
(2)  797/     3EA : D5                          SEP R5
(2)  798/     3EB :                     ;------------------------------------------------------------------------------------------
(2)  799/     3EB :                     
(2)  800/     3EB :                     ; =========================================================================================
(2)  801/     3EB :                     ; GetChar - Get Character from Hex Input.  Wait for Input press and read Ascii character
(2)  802/     3EB :                     ;               from data bus.
(2)  803/     3EB :                     ;
(2)  804/     3EB :                     ; Note: Safe - This function does not access video data
(2)  805/     3EB :                     ;
(2)  806/     3EB :                     ; Returns:
(2)  807/     3EB :                     ; RC.0          Ascii character read from hex input
(2)  808/     3EB :                     ; =========================================================================================
(2)  809/     3EB :                     
(2)  810/     3EB : 3F EB               GetChar:                BN4  GetChar            ; Wait for Input press
(2)  811/     3ED :                     
(2)  812/     3ED : 6C                                          INP  4                  ; Input stores byte in M(X)
(2)  813/     3EE :                                                             
(2)  814/     3EE : FA 7F                                       ANI  007FH              ; Ascii is only 7 bits
(2)  815/     3F0 : AC                                          PLO  RC
(2)  816/     3F1 :                                             
(2)  817/     3F1 : 37 F1               GC_Release:             B4   GC_Release         ; Wait for Input release
(2)  818/     3F3 :                     
(2)  819/     3F3 : (MACRO)                                     RETURN
(2)  819/     3F3 : D5                          SEP R5
(2)  820/     3F4 :                     ;------------------------------------------------------------------------------------------
(2)  821/     3F4 :                     
(2)  822/     3F4 :                     ; =========================================================================================
(2)  823/     3F4 :                     ; WriteHexOutput - Write a value out to the hex display
(2)  824/     3F4 :                     ;
(2)  825/     3F4 :                     ; Note: Safe - This function does not access video data
(2)  826/     3F4 :                     ;
(2)  827/     3F4 :                     ; Parameters:
(2)  828/     3F4 :                     ; RC.0          Value to be shown on the hex display 
(2)  829/     3F4 :                     ; =========================================================================================
(2)  830/     3F4 :                     
(2)  831/     3F4 : 8C                  WriteHexOutput:         GLO  RC         ; Get byte to display
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm(Tty1861.asm) - Page 35 - 11/14/2020 15:50:22


(2)  832/     3F5 : 52                                          STR  R2         ; Put byte on the stack
(2)  833/     3F6 :                                             
(2)  834/     3F6 : 64                                          OUT  4          ; Show it. This increments stack pointer,
(2)  835/     3F7 : 22                                          DEC  R2         ; so back up stack pointer to point to the end.
(2)  836/     3F8 :                                                             
(2)  837/     3F8 : (MACRO)                                     RETURN
(2)  837/     3F8 : D5                          SEP R5
(2)  838/     3F9 :                     ;------------------------------------------------------------------------------------------
(2)  839/     3F9 :                     
(2)  840/     3F9 :                     ; =========================================================================================
(2)  841/     3F9 :                     ; ReadHexInput - Read a byte from Hex Input.  Wait for Input press and read from data bus.
(2)  842/     3F9 :                     ;
(2)  843/     3F9 :                     ; Note: Safe - This function does not access video data
(2)  844/     3F9 :                     ;
(2)  845/     3F9 :                     ; Returns:
(2)  846/     3F9 :                     ; RC.0          Byte read from hex input
(2)  847/     3F9 :                     ; =========================================================================================
(2)  848/     3F9 : 3F F9               ReadHexInput:           BN4  ReadHexInput       ; Wait for Input press
(2)  849/     3FB :                     
(2)  850/     3FB : 6C                                          INP  4                  ; Input stores byte in M(X)                                     
(2)  851/     3FC : AC                                          PLO  RC                 ; Save byte for return
(2)  852/     3FD :                                             
(2)  853/     3FD : 37 FD               RHI_Release:            B4   RHI_Release        ; Wait for Input release
(2)  854/     3FF :                     
(2)  855/     3FF : (MACRO)                                     RETURN                  ; return
(2)  855/     3FF : D5                          SEP R5
(2)  856/     400 :                     ;------------------------------------------------------------------------------------------
(2)  857/     400 :                     
(2)  858/     400 :                     ; =========================================================================================
(2)  859/     400 :                     ; WaitForInput - Wait for Input key press and release.  No data is read.
(2)  860/     400 :                     ;
(2)  861/     400 :                     ; Note: Safe - This function does not access video data
(2)  862/     400 :                     ;
(2)  863/     400 :                     ; Returns:
(2)  864/     400 :                     ;
(2)  865/     400 :                     ; =========================================================================================
(2)  866/     400 :                     
(2)  867/     400 : 3F 00               WaitForInput:           BN4  WaitForInput       ; Wait for Input press
(2)  868/     402 :                     
(2)  869/     402 :                                             
(2)  870/     402 : 37 02               WFI_Release:            B4   WFI_Release        ; Wait for Input release
(2)  871/     404 :                     
(2)  872/     404 : (MACRO)                                     RETURN                  ; return
(2)  872/     404 : D5                          SEP R5
(2)  873/     405 :                     ;------------------------------------------------------------------------------------------
(2)  874/     405 :                     
(2)  875/     405 :                     
(2)  876/     405 :                     ; =========================================================================================
(2)  877/     405 :                     ; PutChar - Put a character on the screen and advance the cursor
(2)  878/     405 :                     ;
(2)  879/     405 :                     ; Note: Safe - This function checks the video status before accessing video data
(2)  880/     405 :                     ;
(2)  881/     405 :                     ; Parameters:
(2)  882/     405 :                     ; RC.0          ASCII code of the character (20 - 5F)
(2)  883/     405 :                     ;
(2)  884/     405 :                     ; Internal:
(2)  885/     405 :                     ; RC.1          Temporary values
(2)  886/     405 :                     ; RE.0          X coordinate of the character
(2)  887/     405 :                     ; RE.1          Y coordinate of the character
(2)  888/     405 :                     ; RF.0          Width of character from drawCharacter
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm(Tty1861.asm) - Page 36 - 11/14/2020 15:50:22


(2)  889/     405 :                     ; =========================================================================================
(2)  890/     405 : (MACRO)             PutChar:                CALL WaitForSafeUpdate
(2)  890/     405 : D4                          SEP R4
(2)  890/     406 : 02 A9                       dw  WAITFORSAFEUPDATE
(2)  891/     408 :                                             
(2)  892/     408 : (MACRO)                                     CALL WriteChar
(2)  892/     408 : D4                          SEP R4
(2)  892/     409 : 04 69                       dw  WRITECHAR
(2)  893/     40B :                                             
(2)  894/     40B : =>FALSE                             IF BackBuffer <> "OFF"
(2)  895/     40B :                                             CALL CopyBackBuffer     ; update SWAP or COPY buffer
(2)  896/     40B : [894]                               ENDIF   
(2)  897/     40B :                                                             
(2)  898/     40B : (MACRO)                                     RETURN
(2)  898/     40B : D5                          SEP R5
(2)  899/     40C :                     ;------------------------------------------------------------------------------------------
(2)  900/     40C :                     
(2)  901/     40C :                     
(2)  902/     40C :                     ; =========================================================================================
(2)  903/     40C :                     ; HandleControlChar - Process a control character and move the cursor on screen
(2)  904/     40C :                     ;
(2)  905/     40C :                     ; Note: *** UNSAFE *** This function does not check before accessing video data.
(2)  906/     40C :                     ;               Must call WaitForSafeUpdate function before calling this function.
(2)  907/     40C :                     ;
(2)  908/     40C :                     ; Parameters:
(2)  909/     40C :                     ; RC.0          ASCII code of the character (20 - 5F)
(2)  910/     40C :                     ; RE.0          X coordinate of the character
(2)  911/     40C :                     ; RE.1          Y coordinate of the character
(2)  912/     40C :                     
(2)  913/     40C :                     ; Internals:
(2)  914/     40C :                     ; RC.1          Temporary values
(2)  915/     40C :                     ; RF.0          Width of character 
(2)  916/     40C :                     ;
(2)  917/     40C :                     ; Returns:
(2)  918/     40C :                     ; RE.0          Updated X coordinate of the character
(2)  919/     40C :                     ; RE.1          Updated Y coordinate of the character
(2)  920/     40C :                     ; =========================================================================================
(2)  921/     40C : 8C                  HandleControlChar:      GLO  RC                 ; get the character
(2)  922/     40D : FD 0A                                       SDI  0AH                ; check for newline
(2)  923/     40F : 32 63                                       BZ   HCC_NewLine
(2)  924/     411 :                                                                                                     
(2)  925/     411 : 8C                                          GLO  RC                 ; get the character
(2)  926/     412 : FD 0D                                       SDI  0DH                ; check for carriage return
(2)  927/     414 : 32 63                                       BZ   HCC_NewLine
(2)  928/     416 :                                             
(2)  929/     416 : 8C                                          GLO  RC                 ; get the character
(2)  930/     417 : FD 0C                                       SDI  0CH                ; check for form feed
(2)  931/     419 : 32 5E                                       BZ   HCC_FormFeed
(2)  932/     41B :                     
(2)  933/     41B : 8C                                          GLO  RC                 ; get the character
(2)  934/     41C : FD 04                                       SDI  04H                ; check for end of transmission
(2)  935/     41E : 32 5E                                       BZ   HCC_FormFeed
(2)  936/     420 :                                             
(2)  937/     420 : 8C                                          GLO  RC                 ; get the character
(2)  938/     421 : FD 09                                       SDI  09H                ; check for tab
(2)  939/     423 : 32 54                                       BZ   HCC_Tab
(2)  940/     425 :                                             
(2)  941/     425 : 8C                                          GLO  RC                 ; get the character
(2)  942/     426 : FD 0B                                       SDI  0BH                ; check for vertical tab
(2)  943/     428 : 32 59                                       BZ   HCC_VTab
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm(Tty1861.asm) - Page 37 - 11/14/2020 15:50:22


(2)  944/     42A :                                             
(2)  945/     42A : 8C                                          GLO  RC                 ; get the character
(2)  946/     42B : FD 08                                       SDI  08H                ; check for backspace
(2)  947/     42D : 32 4F                                       BZ   HCC_Backspace      
(2)  948/     42F :                                             
(2)  949/     42F : 8C                                          GLO  RC                 ; get the character 
(2)  950/     430 : FD 7F                                       SDI  7FH                ; check for del
(2)  951/     432 : 32 4A                                       BZ   HCC_Del
(2)  952/     434 :                                             
(2)  953/     434 : 8C                                          GLO  RC                 ; get the character
(2)  954/     435 : FD 18                                       SDI  18H                ; check for cancel the line
(2)  955/     437 : 32 45                                       BZ   HCC_Cancel
(2)  956/     439 :                                             
(2)  957/     439 : 8C                                          GLO  RC                 ; get character         
(2)  958/     43A : FD 1F                                       SDI  1FH                ; check for unit separator
(2)  959/     43C : 32 3E                                       BZ   HCC_Unit
(2)  960/     43E :                                             
(2)  961/     43E : (MACRO)             HCC_Unit:               CALL UnitSeparator      ; advance cursor 1 pixel column space
(2)  961/     43E : D4                          SEP R4
(2)  961/     43F : 03 CA                       dw  UNITSEPARATOR
(2)  962/     441 : 30 68                                       BR   HCC_Exit           
(2)  963/     443 :                                             
(2)  964/     443 : 30 68                                       BR   HCC_Exit           ; ignore everything else
(2)  965/     445 :                     
(2)  966/     445 : (MACRO)             HCC_Cancel:             CALL CancelLine         ; erase the current line
(2)  966/     445 : D4                          SEP R4
(2)  966/     446 : 03 D1                       dw  CANCELLINE
(2)  967/     448 : 30 68                                       BR   HCC_Exit
(2)  968/     44A :                     
(2)  969/     44A : (MACRO)             HCC_Del:                CALL Rubout             ; del backs up and rubs out one column                  
(2)  969/     44A : D4                          SEP R4
(2)  969/     44B : 03 C0                       dw  RUBOUT
(2)  970/     44D : 30 68                                       BR   HCC_Exit
(2)  971/     44F :                                             
(2)  972/     44F : (MACRO)             HCC_Backspace:          CALL Backspace          ; move cursor back and delete a character
(2)  972/     44F : D4                          SEP R4
(2)  972/     450 : 03 10                       dw  BACKSPACE
(2)  973/     452 : 30 68                                       BR   HCC_Exit           
(2)  974/     454 :                     
(2)  975/     454 : (MACRO)             HCC_Tab:                CALL TabCursor          ; move to next tab stop
(2)  975/     454 : D4                          SEP R4
(2)  975/     455 : 03 02                       dw  TABCURSOR
(2)  976/     457 : 30 68                                       BR   HCC_Exit
(2)  977/     459 :                                             
(2)  978/     459 : (MACRO)             HCC_VTab:               CALL DownCursor         ; move to next line, same x position
(2)  978/     459 : D4                          SEP R4
(2)  978/     45A : 03 3C                       dw  DOWNCURSOR
(2)  979/     45C : 30 68                                       BR   HCC_Exit
(2)  980/     45E :                     
(2)  981/     45E : (MACRO)             HCC_FormFeed:           CALL ClearScreen        ; form feed clears the screen                   
(2)  981/     45E : D4                          SEP R4
(2)  981/     45F : 03 D8                       dw  CLEARSCREEN
(2)  982/     461 : 30 68                                       BR   HCC_Exit           
(2)  983/     463 :                                                                                                     
(2)  984/     463 : (MACRO)             HCC_NewLine:            CALL NextLine           ; go to next line and end                       
(2)  984/     463 : D4                          SEP R4
(2)  984/     464 : 03 2D                       dw  NEXTLINE
(2)  985/     466 : 30 68                                       BR   HCC_Exit
(2)  986/     468 :                                                                             
(2)  987/     468 : (MACRO)             HCC_Exit:               RETURN
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm(Tty1861.asm) - Page 38 - 11/14/2020 15:50:22


(2)  987/     468 : D5                          SEP R5
(2)  988/     469 :                     ;------------------------------------------------------------------------------------------
(2)  989/     469 :                     
(2)  990/     469 :                     ; =========================================================================================
(2)  991/     469 :                     ; WriteChar - Write a character on the screen and advance the cursor
(2)  992/     469 :                     ;
(2)  993/     469 :                     ; Note: *** UNSAFE *** This function does not check before accessing video data.
(2)  994/     469 :                     ;               Must call WaitForSafeUpdate function before calling this function.
(2)  995/     469 :                     ;
(2)  996/     469 :                     ; Parameters:
(2)  997/     469 :                     ; RC.0          ASCII code of the character (20 - 5F)
(2)  998/     469 :                     ;
(2)  999/     469 :                     ; Internal:
(2) 1000/     469 :                     ; RC.1          Temporary values
(2) 1001/     469 :                     ; RE.0          X coordinate of the character
(2) 1002/     469 :                     ; RE.1          Y coordinate of the character
(2) 1003/     469 :                     ; RF.0          Width of character from drawCharacter
(2) 1004/     469 :                     ; =========================================================================================
(2) 1005/     469 :                     
(2) 1006/     469 : (MACRO)             WriteChar:              CALL GetCursor
(2) 1006/     469 : D4                          SEP R4
(2) 1006/     46A : 04 BC                       dw  GETCURSOR
(2) 1007/     46C :                                                                                     
(2) 1008/     46C : 8E                                          GLO  RE                 ; get the x location
(2) 1009/     46D :                                                                                                                             
(2) 1010/     46D : 3A 72                                       BNZ  WC_SetChar         ; check for beginning of new line
(2) 1011/     46F : (MACRO)                                     CALL BlankLine          ; if at begining, blank the line
(2) 1011/     46F : D4                          SEP R4
(2) 1011/     470 : 02 EF                       dw  BLANKLINE
(2) 1012/     472 :                                             
(2) 1013/     472 : 8C                  WC_SetChar:             GLO  RC                 ; check for DEL the only control char
(2) 1014/     473 : FD 7F                                       SDI  7FH                ; that is greater than 20H
(2) 1015/     475 : 32 7C                                       BZ   WC_Control         
(2) 1016/     477 :                                                                                                                                             
(2) 1017/     477 : 8C                                          GLO  RC                 ; get the character
(2) 1018/     478 : FF 20                                       SMI  20H                ; check for any printable character
(2) 1019/     47A : 33 81                                       BGE  WC_Draw            
(2) 1020/     47C :                                                                                                     
(2) 1021/     47C : (MACRO)             WC_Control:             CALL HandleControlChar  ; everthing else is a control character
(2) 1021/     47C : D4                          SEP R4
(2) 1021/     47D : 04 0C                       dw  HANDLECONTROLCHAR
(2) 1022/     47F : 30 90                                       BR   WC_UpdateCursor    ; save cursor changes after control char
(2) 1023/     481 :                                                     
(2) 1024/     481 : 8E                  WC_Draw:                GLO  RE                 ; push RE with cursor location onto the stack
(2) 1025/     482 : 73                                          STXD
(2) 1026/     483 : 9E                                          GHI  RE
(2) 1027/     484 : 73                                          STXD 
(2) 1028/     485 :                                             
(2) 1029/     485 : (MACRO)                                     CALL DrawCharacter      ; write the chracter
(2) 1029/     485 : D4                          SEP R4
(2) 1029/     486 : 00 F1                       dw  DRAWCHARACTER
(2) 1030/     488 :                                                                                     
(2) 1031/     488 : 60                                          IRX                                     
(2) 1032/     489 : 72                                          LDXA
(2) 1033/     48A : BE                                          PHI  RE                 ; restore RE with cursor location
(2) 1034/     48B : F0                                          LDX
(2) 1035/     48C : AE                                          PLO  RE                         
(2) 1036/     48D :                                             
(2) 1037/     48D : (MACRO)                                     CALL RightCursor        ; advance cursor by character width + 1
(2) 1037/     48D : D4                          SEP R4
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm(Tty1861.asm) - Page 39 - 11/14/2020 15:50:22


(2) 1037/     48E : 03 A5                       dw  RIGHTCURSOR
(2) 1038/     490 :                                             
(2) 1039/     490 : (MACRO)             WC_UpdateCursor:        CALL SetCursor
(2) 1039/     490 : D4                          SEP R4
(2) 1039/     491 : 04 AB                       dw  SETCURSOR
(2) 1040/     493 :                                                             
(2) 1041/     493 : (MACRO)             WC_Exit:                RETURN
(2) 1041/     493 : D5                          SEP R5
(2) 1042/     494 :                     ;------------------------------------------------------------------------------------------
(2) 1043/     494 :                     
(2) 1044/     494 :                     ; =========================================================================================
(2) 1045/     494 :                     ; PutString - Read characters from a string and write to video until a null is read.
(2) 1046/     494 :                     ; Parameters:
(2) 1047/     494 :                     ; RF    - pointer to String
(2) 1048/     494 :                     ;
(2) 1049/     494 :                     ; Note: Safe - This function checks the video status before accessing video data
(2) 1050/     494 :                     ;
(2) 1051/     494 :                     ; Internal:
(2) 1052/     494 :                     ; RC.0  - character value read from input
(2) 1053/     494 :                     ; =========================================================================================
(2) 1054/     494 :                     
(2) 1055/     494 : (MACRO)             PutString:              CALL WaitForSafeUpdate  
(2) 1055/     494 : D4                          SEP R4
(2) 1055/     495 : 02 A9                       dw  WAITFORSAFEUPDATE
(2) 1056/     497 :                     
(2) 1057/     497 : 0F                  PS_WriteString:         LDN  RF                 ; get character, exit if 0 (null)
(2) 1058/     498 : AC                                          PLO  RC
(2) 1059/     499 : 32 AA                                       BZ   PS_Exit
(2) 1060/     49B : 1F                                          INC  RF
(2) 1061/     49C :                                                             
(2) 1062/     49C : 8F                                          GLO  RF                 ; push RF onto the stack
(2) 1063/     49D : 73                                          STXD
(2) 1064/     49E : 9F                                          GHI  RF
(2) 1065/     49F : 73                                          STXD
(2) 1066/     4A0 :                                     
(2) 1067/     4A0 :                                                             
(2) 1068/     4A0 : (MACRO)                                     CALL WriteChar          ; write character to video
(2) 1068/     4A0 : D4                          SEP R4
(2) 1068/     4A1 : 04 69                       dw  WRITECHAR
(2) 1069/     4A3 :                                                                     ; ok to use write since we know it's safe
(2) 1070/     4A3 :                                             
(2) 1071/     4A3 : 60                                          IRX                     ; restore RF from stack
(2) 1072/     4A4 : 72                                          LDXA
(2) 1073/     4A5 : BF                                          PHI  RF
(2) 1074/     4A6 : F0                                          LDX
(2) 1075/     4A7 : AF                                          PLO  RF
(2) 1076/     4A8 :                                                             
(2) 1077/     4A8 : 30 97                                       BR PS_WriteString       ; continue with next character until null
(2) 1078/     4AA :                                             
(2) 1079/     4AA :                     
(2) 1080/     4AA : =>FALSE             PS_Exit:        IF BackBuffer <> "OFF"
(2) 1081/     4AA :                                             CALL CopyBackBuffer     ; update SWAP or COPY buffer
(2) 1082/     4AA : [1080]                              ENDIF   
(2) 1083/     4AA :                     
(2) 1084/     4AA : (MACRO)                                     RETURN
(2) 1084/     4AA : D5                          SEP R5
(2) 1085/     4AB :                     ;------------------------------------------------------------------------------------------
(2) 1086/     4AB :                     ; =========================================================================================
(2) 1087/     4AB :                     ; SetCursor - Save the Cursor value into memory
(2) 1088/     4AB :                     ;
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm(Tty1861.asm) - Page 40 - 11/14/2020 15:50:22


(2) 1089/     4AB :                     ; Note: Safe - This function does not access video data
(2) 1090/     4AB :                     ;
(2) 1091/     4AB :                     ; Parameters:
(2) 1092/     4AB :                     ; RE.0          X coordinate of the character
(2) 1093/     4AB :                     ; RE.1          Y coordinate of the character
(2) 1094/     4AB :                     ;
(2) 1095/     4AB :                     ; Internal:
(2) 1096/     4AB :                     ; RD            Pointer to CursorY and CursorX
(2) 1097/     4AB :                     ; =========================================================================================
(2) 1098/     4AB : (MACRO)             SetCursor:              LOAD RD, CursorX        ; set the x cursor                                                      
(2) 1098/     4AB : F8 05                       LDI  lo(CURSORX)
(2) 1098/     4AD : AD                          PLO  RD
(2) 1098/     4AE : F8 7F                       LDI  hi(CURSORX)
(2) 1098/     4B0 : BD                          PHI  RD     
(2) 1099/     4B1 : 8E                                          GLO  RE                 ; get character x location
(2) 1100/     4B2 : 5D                                          STR  RD                 ; save the x cursor value       
(2) 1101/     4B3 :                                                                                                             
(2) 1102/     4B3 : (MACRO)                                     LOAD RD, CursorY        ; set the y cursor                                                                                                      
(2) 1102/     4B3 : F8 06                       LDI  lo(CURSORY)
(2) 1102/     4B5 : AD                          PLO  RD
(2) 1102/     4B6 : F8 7F                       LDI  hi(CURSORY)
(2) 1102/     4B8 : BD                          PHI  RD     
(2) 1103/     4B9 : 9E                                          GHI  RE                 ; get character y location
(2) 1104/     4BA : 5D                                          STR  RD                 ; save the y cursor value                                                                                               
(2) 1105/     4BB :                                                             
(2) 1106/     4BB : (MACRO)                                     RETURN
(2) 1106/     4BB : D5                          SEP R5
(2) 1107/     4BC :                     ;------------------------------------------------------------------------------------------
(2) 1108/     4BC :                     
(2) 1109/     4BC :                     ; =========================================================================================
(2) 1110/     4BC :                     ; GetCursor - Read the Cursor value from memory
(2) 1111/     4BC :                     ; 
(2) 1112/     4BC :                     ; Note: Safe - This function does not access video data
(2) 1113/     4BC :                     :
(2) 1114/     4BC :                     ; Parameters:
(2) 1115/     4BC :                     ;
(2) 1116/     4BC :                     ; Internal:
(2) 1117/     4BC :                     ; RD            Pointer to CursorY and CursorX
(2) 1118/     4BC :                     ;
(2) 1119/     4BC :                     ; Returns:
(2) 1120/     4BC :                     ; RE.0          X coordinate of the character
(2) 1121/     4BC :                     ; RE.1          Y coordinate of the character
(2) 1122/     4BC :                     ; =========================================================================================
(2) 1123/     4BC : (MACRO)             GetCursor:              LOAD RD, CursorX        ; get the x cursor                                                      
(2) 1123/     4BC : F8 05                       LDI  lo(CURSORX)
(2) 1123/     4BE : AD                          PLO  RD
(2) 1123/     4BF : F8 7F                       LDI  hi(CURSORX)
(2) 1123/     4C1 : BD                          PHI  RD     
(2) 1124/     4C2 : 0D                                          LDN  RD                 ; load the x cursor value                                       
(2) 1125/     4C3 : AE                                          PLO  RE                 ; set character x location
(2) 1126/     4C4 :                                             
(2) 1127/     4C4 : (MACRO)                                     LOAD RD, CursorY        ; get the y cursor                                                                              
(2) 1127/     4C4 : F8 06                       LDI  lo(CURSORY)
(2) 1127/     4C6 : AD                          PLO  RD
(2) 1127/     4C7 : F8 7F                       LDI  hi(CURSORY)
(2) 1127/     4C9 : BD                          PHI  RD     
(2) 1128/     4CA : 0D                                          LDN  RD                 ; load the y cursor value                                                                                       
(2) 1129/     4CB : BE                                          PHI  RE                 ; set character y location
(2) 1130/     4CC :                                                             
(2) 1131/     4CC : (MACRO)                                     RETURN
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm(Tty1861.asm) - Page 41 - 11/14/2020 15:50:22


(2) 1131/     4CC : D5                          SEP R5
(2) 1132/     4CD :                     ;------------------------------------------------------------------------------------------
(2) 1133/     4CD :                     
(2) 1134/     4CD :                     
(2) 1135/     4CD :                     
(2) 1136/     4CD : [23]                                                        ENDIF
(1)  137/     4CD : [133]                                       ENDIF
(1)  138/     4CD :                     
(1)  139/     4CD : =>FALSE                                     IF BackBuffer == "COPY"
(1)  140/     4CD :                                                     INCLUDE "Fonts.asm"
(1)  141/     4CD :                                                     INCLUDE "Text1861.asm"
(1)  142/     4CD :                                                     INCLUDE "Tty1861.asm"
(1)  143/     4CD : [139]                                       ENDIF
(1)  144/     4CD :                     
(1)  145/     4CD : =>FALSE                                     IF BackBuffer == "SWAP"
(1)  146/     4CD :                                                     INCLUDE "Tty1861.asm"
(1)  147/     4CD :                                                     INCLUDE "Text1861.asm"
(1)  148/     4CD :                                                     INCLUDE "Fonts.asm"
(1)  149/     4CD : [145]                                       ENDIF
(1)  150/     4CD :                     
(1)  151/     4CD : [132]                               ENDIF
(1)  152/     4CD :                     
(1)  153/     4CD :                                             ; pad assembled code to end of page to avoid page boundary errors
(1)  154/     4CD :                                                     INCLUDE "Padding.asm"  
(2)    1/     4CD :                     ; *****************************************************************************************
(2)    2/     4CD :                     ; Padding - Code with 64x64 or 64x128 resolution and the Swap or Copy BackBuffer option
(2)    3/     4CD :                     ;           assembles to near the end of a page boundary.  This file contains padding
(2)    4/     4CD :                     ;           definitions to prevent errors in user code caused by branches straddling a page
(2)    5/     4CD :                     ;           boundary.  This can cause 'jump target not on same page' errors when assembling
(2)    6/     4CD :                     ;           user code.  Padding values greater than 32 bytes are commented out.
(2)    7/     4CD :                     ;
(2)    8/     4CD :                     ; Copyright (c) 2020 by Gaston Williams
(2)    9/     4CD :                     ;
(2)   10/     4CD :                     ; Changes:
(2)   11/     4CD :                     ; Sept, 2020 - Added padding definitions for 64x128 resolution
(2)   12/     4CD :                     ; *****************************************************************************************
(2)   13/     4CD :                     
(2)   14/     4CD :                     ; =========================================================================================
(2)   15/     4CD :                     ; Padding definitions for more than 16 bytes are commented out.
(2)   16/     4CD :                     ; =========================================================================================
(2)   17/     4CD :                     
(2)   18/     4CD : =>FALSE                             IF Resolution == "64x128"
(2)   19/     4CD :                                             ; 64x128 resolution user code when assembled with the BackBuffer option "COPY"
(2)   20/     4CD :                                             ; ends exactly on a page boundary so no padding is needed
(2)   21/     4CD :                                             ;IF BackBuffer == "COPY"
(2)   22/     4CD :                                             ;        db 0 dup 00H
(2)   23/     4CD :                                             ;ENDIF
(2)   24/     4CD :                     
(2)   25/     4CD :                                             IF BackBuffer == "SWAP"
(2)   26/     4CD :                                                     db 6 dup 00H
(2)   27/     4CD : [25]                                        ENDIF
(2)   28/     4CD :                     
(2)   29/     4CD :                                             ; Uncomment the lines below if there's a boundary issue with 64x128
(2)   30/     4CD :                                             ; resolution user code when assembled with the BackBuffer option "OFF"
(2)   31/     4CD :                     
(2)   32/     4CD :                                             ;IF BackBuffer == "OFF"
(2)   33/     4CD :                                             ;       db 22H dup 00H
(2)   34/     4CD :                                             ;ENDIF
(2)   35/     4CD :                     
(2)   36/     4CD : [18]                                ENDIF
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm(Padding.asm) - Page 42 - 11/14/2020 15:50:22


(2)   37/     4CD :                     
(2)   38/     4CD : =>FALSE                             IF Resolution == "64x64"
(2)   39/     4CD :                                             IF BackBuffer == "COPY"
(2)   40/     4CD :                                                     db 2 dup 00H
(2)   41/     4CD : [39]                                        ENDIF
(2)   42/     4CD :                     
(2)   43/     4CD :                                             IF BackBuffer == "SWAP"
(2)   44/     4CD :                                                     db 8 dup 00H
(2)   45/     4CD : [43]                                        ENDIF
(2)   46/     4CD :                     
(2)   47/     4CD :                                             ; Uncomment the lines below if there's a boundary issue with 64x64
(2)   48/     4CD :                                             ; resolution user code when assembled with the BackBuffer option "OFF"
(2)   49/     4CD :                     
(2)   50/     4CD :                                             ;IF BackBuffer == "OFF"
(2)   51/     4CD :                                             ;       db 24H dup 00H
(2)   52/     4CD :                                             ;ENDIF
(2)   53/     4CD :                     
(2)   54/     4CD : [38]                                ENDIF
(2)   55/     4CD :                     
(2)   56/     4CD : =>TRUE                              IF Resolution == "64x32"
(2)   57/     4CD : =>FALSE                                     IF BackBuffer == "COPY"
(2)   58/     4CD :                                                    db 13H dup 00H
(2)   59/     4CD : [57]                                        ENDIF
(2)   60/     4CD :                     
(2)   61/     4CD : =>FALSE                                     IF BackBuffer == "SWAP"
(2)   62/     4CD :                                                    db 1BH dup 00H
(2)   63/     4CD : [61]                                        ENDIF
(2)   64/     4CD :                     
(2)   65/     4CD :                                             ; Uncomment the lines below if there's a boundary issue with 64x32
(2)   66/     4CD :                                             ; resolution user code when assembled with the BackBuffer option "OFF"
(2)   67/     4CD :                     
(2)   68/     4CD :                                             ;IF BackBuffer == "OFF"
(2)   69/     4CD :                                             ;       db 33H dup 00H
(2)   70/     4CD :                                             ;ENDIF
(2)   71/     4CD :                     
(2)   72/     4CD : [56]                                ENDIF
(2)   73/     4CD :                     ;------------------------------------------------------------------------------------------
(2)   74/     4CD :                     
(1)  155/     4CD :                     
      16/     4CD :                     
      17/     4CD :                     
      18/     4CD :                     ; =========================================================================================
      19/     4CD :                     ; Main
      20/     4CD :                     ; =========================================================================================
      21/     4CD :                     
      22/     4CD : (MACRO)             Start:                  CALL BeginTerminal
      22/     4CD : D4                          SEP R4
      22/     4CE : 02 8D                       dw  BEGINTERMINAL
      23/     4D0 :                     
      24/     4D0 :                     
      25/     4D0 : (MACRO)                                     CALL VideoOn            ; turn video on
      25/     4D0 : D4                          SEP R4
      25/     4D1 : 02 98                       dw  VIDEOON
      26/     4D3 :                     
      27/     4D3 : (MACRO)             MainLoop:               CALL HelloWorld
      27/     4D3 : D4                          SEP R4
      27/     4D4 : 04 DB                       dw  HELLOWORLD
      28/     4D6 :                     
      29/     4D6 :                     
      30/     4D6 : (MACRO)                                     CALL WaitForInput       ; wait for input from the hex keyboard
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm - Page 43 - 11/14/2020 15:50:22


      30/     4D6 : D4                          SEP R4
      30/     4D7 : 04 00                       dw  WAITFORINPUT
      31/     4D9 :                     
      32/     4D9 : 30 D3                                       BR   MainLoop           ; say Hello! again
      33/     4DB :                     ;----------------------------------------------------------------------------------------
      34/     4DB :                     
      35/     4DB :                     
      36/     4DB :                     ; =========================================================================================
      37/     4DB :                     ; HelloWorld - write a Hello, World! message to the screen using PutChar
      38/     4DB :                     ;
      39/     4DB :                     ; Internals:
      40/     4DB :                     ; RC.0 - Character to write to screen
      41/     4DB :                     ; =========================================================================================
      42/     4DB :                     
      43/     4DB : F8 48               HelloWorld:             LDI  "H"
      44/     4DD : AC                                          PLO  RC
      45/     4DE :                     
      46/     4DE : (MACRO)                                     CALL PutChar
      46/     4DE : D4                          SEP R4
      46/     4DF : 04 05                       dw  PUTCHAR
      47/     4E1 :                     
      48/     4E1 : F8 65                                       LDI  "e"
      49/     4E3 : AC                                          PLO  RC
      50/     4E4 :                     
      51/     4E4 : (MACRO)                                     CALL PutChar
      51/     4E4 : D4                          SEP R4
      51/     4E5 : 04 05                       dw  PUTCHAR
      52/     4E7 :                     
      53/     4E7 : F8 6C                                       LDI  "l"
      54/     4E9 : AC                                          PLO  RC
      55/     4EA :                     
      56/     4EA : (MACRO)                                     CALL PutChar
      56/     4EA : D4                          SEP R4
      56/     4EB : 04 05                       dw  PUTCHAR
      57/     4ED :                     
      58/     4ED : F8 6C                                       LDI  "l"
      59/     4EF : AC                                          PLO  RC
      60/     4F0 :                     
      61/     4F0 : (MACRO)                                     CALL PutChar
      61/     4F0 : D4                          SEP R4
      61/     4F1 : 04 05                       dw  PUTCHAR
      62/     4F3 :                     
      63/     4F3 : F8 6F                                       LDI  "o"
      64/     4F5 : AC                                          PLO  RC
      65/     4F6 :                     
      66/     4F6 : (MACRO)                                     CALL PutChar
      66/     4F6 : D4                          SEP R4
      66/     4F7 : 04 05                       dw  PUTCHAR
      67/     4F9 :                     
      68/     4F9 : F8 2C                                       LDI  ","
      69/     4FB : AC                                          PLO  RC
      70/     4FC :                     
      71/     4FC : (MACRO)                                     CALL PutChar
      71/     4FC : D4                          SEP R4
      71/     4FD : 04 05                       dw  PUTCHAR
      72/     4FF :                     
      73/     4FF : F8 20                                       LDI  " "
      74/     501 : AC                                          PLO  RC
      75/     502 :                     
      76/     502 : (MACRO)                                     CALL PutChar
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm - Page 44 - 11/14/2020 15:50:22


      76/     502 : D4                          SEP R4
      76/     503 : 04 05                       dw  PUTCHAR
      77/     505 :                     
      78/     505 : F8 57                                       LDI  "W"
      79/     507 : AC                                          PLO  RC
      80/     508 :                     
      81/     508 : (MACRO)                                     CALL PutChar
      81/     508 : D4                          SEP R4
      81/     509 : 04 05                       dw  PUTCHAR
      82/     50B :                     
      83/     50B : F8 6F                                       LDI  "o"
      84/     50D : AC                                          PLO  RC
      85/     50E :                     
      86/     50E : (MACRO)                                     CALL PutChar
      86/     50E : D4                          SEP R4
      86/     50F : 04 05                       dw  PUTCHAR
      87/     511 :                     
      88/     511 : F8 72                                       LDI  "r"
      89/     513 : AC                                          PLO  RC
      90/     514 :                     
      91/     514 : (MACRO)                                     CALL PutChar
      91/     514 : D4                          SEP R4
      91/     515 : 04 05                       dw  PUTCHAR
      92/     517 :                     
      93/     517 : F8 6C                                       LDI  "l"
      94/     519 : AC                                          PLO  RC
      95/     51A :                     
      96/     51A : (MACRO)                                     CALL PutChar
      96/     51A : D4                          SEP R4
      96/     51B : 04 05                       dw  PUTCHAR
      97/     51D :                     
      98/     51D : F8 64                                       LDI  "d"
      99/     51F : AC                                          PLO  RC
     100/     520 :                     
     101/     520 : (MACRO)                                     CALL PutChar
     101/     520 : D4                          SEP R4
     101/     521 : 04 05                       dw  PUTCHAR
     102/     523 :                     
     103/     523 : F8 21                                       LDI  "!"
     104/     525 : AC                                          PLO  RC
     105/     526 :                     
     106/     526 : (MACRO)                                     CALL PutChar
     106/     526 : D4                          SEP R4
     106/     527 : 04 05                       dw  PUTCHAR
     107/     529 :                     
     108/     529 : F8 20                                       LDI  " "
     109/     52B : AC                                          PLO  RC
     110/     52C :                     
     111/     52C : (MACRO)                                     CALL PutChar
     111/     52C : D4                          SEP R4
     111/     52D : 04 05                       dw  PUTCHAR
     112/     52F :                     
     113/     52F : (MACRO)                                     RETURN;
     113/     52F : D5                          SEP R5
     114/     530 :                     ;-----------------------------------------------------------------------
     115/     530 :                     
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm - Page 45 - 11/14/2020 15:50:22


  Symbol Table (* = unused):
  --------------------------

*ARCHITECTURE :                                        "i386-unknown-win32" - |
 BACKBUFFER :                 "OFF" - |  BACKSPACE :                    310 C |
 BCH_BLANK :                    35F C |  BCH_DONE :                     37F C |
 BCH_GETMASK :                  359 C |  BCH_LASTBYTE :                 36F C |
 BEGINTERMINAL :                28D C | *BIGENDIAN :                      0 - |
*BITFUNCSINC :                    1 - |  BLANKCHARACTER :               34B C |
 BLANKLINE :                    2EF C |  BL_LOOP :                      2F6 C |
*BRANCHEXT :                      0 - |  CANCELLINE :                   3D1 C |
*CASESENSITIVE :                  0 - | *CBB_EXIT :                     0CB C |
 CHARACTERPATTERN :            7F00 C |  CI_LOOP :                       66 C |
 CLEARSCREEN :                  3D8 C |  CM_DONE :                      328 C |
 CM_TEST :                      31F C | *CONSTPI :        3.141592653589793 - |
*COPYBACKBUFFER :               0CB C | *COPYIMAGE :                     60 C |
 CREATEMASK :                   31A C |  CURSORX :                     7F05 C |
 CURSORY :                     7F06 C | *DATE :                "11/14/2020" - |
 DC_BLANK :                     347 C |  DC_BYTELOOP :                  142 C |
 DC_BYTESHIFT :                 14F C |  DC_BYTEWRITE :                 159 C |
 DC_COPYPATTERN :               13E C |  DC_MASKLOOP :                  12B C |
 DC_PREPARESECOND :             138 C |  DC_SHIFTLOOP :                 151 C |
 DC_SKIPHIGHBYTE :              110 C |  DC_SKIPHIGHBYTE2 :             119 C |
 DELAY :                         3C C |  DISPLAYBUFFER :               7E00 C |
 DISPLAYINT :                    44 C |  DOWNCURSOR :                   33C C |
 DRAWCHARACTER :                0F1 C |  DRAWSPRITE :                    7A C |
 DRAWSTRING :                   0CC C |  DSP_BYTELOOP :                  98 C |
 DSP_EXIT :                     0CA C |  DSP_SHIFTEXIT :                0B7 C |
 DSP_SHIFTLOOP :                0AB C |  DSP_SKIPLOWINC :                8A C |
 DS_EXIT :                      0F0 C | *FALSE :                          0 - |
 FILLSCREEN :                    6D C |  FONT :                         16D C |
 FS_LOOP :                       73 C | *FULLPMMU :                       1 - |
 GC_RELEASE :                   3F1 C |  GETCHAR :                      3EB C |
 GETCURSOR :                    4BC C |  HANDLECONTROLCHAR :            40C C |
*HAS64 :                          0 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
 HCC_BACKSPACE :                44F C |  HCC_CANCEL :                   445 C |
 HCC_DEL :                      44A C |  HCC_EXIT :                     468 C |
 HCC_FORMFEED :                 45E C |  HCC_NEWLINE :                  463 C |
 HCC_TAB :                      454 C |  HCC_UNIT :                     43E C |
 HCC_VTAB :                     459 C |  HELLOWORLD :                   4DB C |
*INEXTMODE :                      0 - | *INIT :                           0 C |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
 INT_EXIT :                      42 C |  INT_LOOP :                      51 C |
 LC_EXIT :                      3A4 C |  LC_HOME :                      39E C |
 LC_PREVIOUSLINE :              38F C |  LEFTCURSOR :                   380 C |
*LISTON :                         1 - | *MACEXP :                         7 - |
 MAINLOOP :                     4D3 C | *MOMCPU :                      1802 - |
*MOMCPUNAME :                "1802" - | *NESTMAX :                      100 - |
 NEXTLINE :                     32D C |  NL_EXIT :                      33B C |
*PACKING :                        0 - | *PADDING :                        1 - |
 PS_EXIT :                      4AA C |  PS_WRITESTRING :               497 C |
 PUTCHAR :                      405 C | *PUTSTRING :                    494 C |
 R0 :                             0 - |  R1 :                             1 - |
 R2 :                             2 - |  R3 :                             3 - |
 R4 :                             4 - |  R5 :                             5 - |
 R6 :                             6 - | *R7 :                             7 - |
*R8 :                             8 - | *R9 :                             9 - |
*RA :                            0A - |  RB :                            0B - |
 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm - Page 46 - 11/14/2020 15:50:22


 RC :                            0C - |  RC_EXIT :                      3BF C |
 RD :                            0D - |  RE :                            0E - |
 READHEXINPUT :                 3F9 C | *RELAXED :                        0 - |
 RESOLUTION :               "64x32" - |  RF :                            0F - |
 RHI_RELEASE :                  3FD C |  RIGHTCURSOR :                  3A5 C |
 RUBOUT :                       3C0 C |  SETCURSOR :                    4AB C |
 SETVIDEOFLAG :                 2E6 C |  STACKTOP :                    7F7F C |
 START :                        4CD C |  STC_EXIT :                      1F C |
 STDCALL :                       20 C |  STDRETURN :                     30 C |
 STR_EXIT :                      2F C |  TABCURSOR :                    302 C |
 TAB_EXIT :                     30F C | *TIME :                  "15:50:22" - |
*TRUE :                           1 - |  UNITSEPARATOR :                3CA C |
 USEGRAPHICS :               "TRUE" - |  USETEXT :                   "TRUE" - |
 USETTY :                    "TRUE" - | *VERSION :                     142F - |
 VIDEOFLAG :                   7F07 C | *VIDEOOFF :                     2A0 C |
 VIDEOOFFSETX :                 2D1 C |  VIDEOOFFSETY :                 2C0 C |
 VIDEOON :                      298 C |  VY_SKIPLOWINC :                2D0 C |
 WAITFORINPUT :                 400 C |  WAITFORSAFEUPDATE :            2A9 C |
 WC_CONTROL :                   47C C |  WC_DRAW :                      481 C |
*WC_EXIT :                      493 C |  WC_SETCHAR :                   472 C |
 WC_UPDATECURSOR :              490 C |  WFI_RELEASE :                  402 C |
 WFSU_CHECK_DMA :               2B2 C |  WFSU_COUNT :                   2B8 C |
 WFSU_EXIT :                    2BF C |  WFSU_NEW_EF1 :                 2B6 C |
 WFSU_SYNC :                    2B4 C |  WRITECHAR :                    469 C |
*WRITEHEXOUTPUT :               3F4 C | *Z80SYNTAX :                      0 - |

    163 symbols
     42 unused symbols

 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm - Page 47 - 11/14/2020 15:50:22


  Defined Macros:
  ---------------

CALL                                  | LOAD                                 
RETURN                                |

      3 macros

 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm - Page 48 - 11/14/2020 15:50:22


  Defined Functions:
  ------------------

ROTRN                                 | ROTLN                                
SHRN                                  | SHLN                                 
GETBIT                                | EVEN                                 
ODD                                   | LOWORD                               
HIWORD                                | LO                                   
HI                                    | CUTOUT                               
INVMASK                               | MASK                                 

 AS V1.42 Beta [Bld 172] - Source File HelloWorld.asm - Page 49 - 11/14/2020 15:50:22


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.19 seconds assembly time

   2502 lines source file
   2708 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
