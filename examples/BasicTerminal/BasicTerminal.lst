 AS V1.42 Beta [Bld 172] - Source File BasicTerminal.asm - Page 1 - 8/28/2020 13:37:18


       1/       0 :                     ; *******************************************************************************************
       2/       0 :                     ; BasicTerminal - Basic Teletype Terminal demo that reads an ASCII charcter from input and 
       3/       0 :                     ;		  writes it to the display.
       4/       0 :                     ;
       5/       0 :                     ; Copyright (c) 2020 by Gaston Williams
       6/       0 :                     ;
       7/       0 :                     ; *******************************************************************************************
       8/       0 :                     
       9/       0 : ="TRUE"             UseGraphics		EQU "TRUE"
      10/       0 : ="64x64"            Resolution		EQU "64x64"		; "64x32" or "64x64"
      11/       0 : ="OFF"              BackBuffer		EQU "OFF"		; 'OFF', 'COPY' or 'SWAP'
      12/       0 :                     
      13/       0 : ="TRUE"             UseText			EQU "TRUE"
      14/       0 : ="TRUE"             UseTty			EQU "TRUE"
      15/       0 :                     
      16/       0 :                     			INCLUDE "StdDefs.asm"
(1)    1/       0 :                     ; *****************************************************************************************
(1)    2/       0 :                     ; Copyright (c) 2020 
(1)    3/       0 :                     ; by Richard Dienstknecht
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; Changes:
(1)    6/       0 :                     ; Gaston Williams, July, 2020   - Added Macros for Std Call and Std Return
(1)    7/       0 :                     ; Gaston Williams  August, 2020 - Added Macro for loading Register
(1)    8/       0 :                     ; *****************************************************************************************
(1)    9/       0 :                     
(1)   10/       0 :                     ; =========================================================================================
(1)   11/       0 :                     ; Register definitions
(1)   12/       0 :                     ; =========================================================================================
(1)   13/       0 :                     
(1)   14/       0 : =0H                 R0					EQU 00H
(1)   15/       0 : =1H                 R1					EQU 01H
(1)   16/       0 : =2H                 R2					EQU 02H
(1)   17/       0 : =3H                 R3					EQU 03H
(1)   18/       0 : =4H                 R4					EQU 04H
(1)   19/       0 : =5H                 R5					EQU 05H
(1)   20/       0 : =6H                 R6					EQU 06H
(1)   21/       0 : =7H                 R7					EQU 07H
(1)   22/       0 : =8H                 R8					EQU 08H
(1)   23/       0 : =9H                 R9					EQU 09H
(1)   24/       0 : =0AH                RA					EQU 0AH
(1)   25/       0 : =0BH                RB					EQU 0BH
(1)   26/       0 : =0CH                RC					EQU 0CH
(1)   27/       0 : =0DH                RD					EQU 0DH
(1)   28/       0 : =0EH                RE					EQU 0EH
(1)   29/       0 : =0FH                RF					EQU 0FH
(1)   30/       0 :                     
(1)   31/       0 :                     ;------------------------------------------------------------------------------------------
(1)   32/       0 :                     ; =========================================================================================
(1)   33/       0 :                     ; Macro definitions for standard call and return
(1)   34/       0 :                     ; See RCA CDP1802 User Manual, page 61 for more information
(1)   35/       0 :                     ; =========================================================================================
(1)   36/       0 :                     
(1)   37/       0 :                     CALL	MACRO	param1
(1)   38/       0 :                     	SEP R4
(1)   39/       0 :                     	dw  param1
(1)   40/       0 :                     	ENDM
(1)   41/       0 :                     	
(1)   42/       0 :                     RETURN	MACRO
(1)   43/       0 :                     	SEP R5
(1)   44/       0 :                     	ENDM
 AS V1.42 Beta [Bld 172] - Source File BasicTerminal.asm(StdDefs.asm) - Page 2 - 8/28/2020 13:37:18


(1)   45/       0 :                     	
(1)   46/       0 :                     LOAD    MACRO 	param1, param2
(1)   47/       0 :                     	LDI  lo(param2)
(1)   48/       0 :                     	PLO  param1
(1)   49/       0 :                     	LDI  hi(param2)
(1)   50/       0 :                     	PHI  param1	
(1)   51/       0 :                     	ENDM
      17/       0 :                     			INCLUDE "Initialize.asm"
(1)    1/       0 :                     ; *****************************************************************************************
(1)    2/       0 :                     ; Copyright (c) 2020 
(1)    3/       0 :                     ; by Richard Dienstknecht
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; Changes:
(1)    6/       0 :                     ; Gaston Williams, July,   2020 - Rewrote Initialisation.asm file as Initialize.asm
(1)    7/       0 :                     ; Gaston Williams, July,   2020 - Removed unused include files
(1)    8/       0 :                     ; Gaston Williams, July,   2020 - Replaced Std Call and Return with Macros
(1)    9/       0 :                     ; Gaston Williams  August, 2020 - Added IF blocks to change compile order
(1)   10/       0 :                     ; Gaston Williams  August, 2020 - Included padding file
(1)   11/       0 :                     ; Gaston Williams  August, 2020 - Added Macro for loading Register
(1)   12/       0 :                     ; *****************************************************************************************
(1)   13/       0 :                     				INCLUDE "bitfuncs.inc"
(2)    1/       0 : =>UNDEFINED         		ifndef   bitfuncsinc    ; avoid multiple inclusion
(2)    2/       0 : =1H                 bitfuncsinc     equ      1
(2)    3/       0 :                     
(2)    4/       0 :                                     save
(2)   77/       0 : ALL                                 restore                 ; allow listing again
(2)   78/       0 :                     
(2)   79/       0 : [1]                                 endif			; bitfuncsinc
(2)   80/       0 :                     
(2)   81/       0 :                     
(1)   14/       0 :                     				INCLUDE "buffers.asm"
(2)    1/       0 :                     ; *****************************************************************************************
(2)    2/       0 :                     ; Copyright (c) 2020 
(2)    3/       0 :                     ; by Richard Dienstknecht
(2)    4/       0 :                     ;
(2)    5/       0 :                     ; Changes:
(2)    6/       0 :                     ; Gaston Williams, July, 2020 - Removed 64 x 128 Resolution logic
(2)    7/       0 :                     ; Gaston Williams, July, 2020 - Put Buffer definitions into a separate file
(2)    8/       0 :                     ; Gaston Williams, August, 2020 - Added Cursor and Video flag definitions
(2)    9/       0 :                     ; *****************************************************************************************
(2)   10/       0 :                     
(2)   11/       0 :                     ; =========================================================================================
(2)   12/       0 :                     ; Define Video Buffers and Main Stack
(2)   13/       0 :                     ; =========================================================================================
(2)   14/       0 :                     					CPU 1802
(2)   15/       0 :                     					
(2)   16/       0 :                     ; =========================================================================================
(2)   17/       0 :                     ; Display buffers
(2)   18/       0 :                     ; =========================================================================================
(2)   19/       0 : =>TRUE              		IF BackBuffer == "OFF"			; OFF uses only one video buffer
(2)   20/       0 : =>FALSE             			IF Resolution == "64x32"
(2)   21/       0 :                     				ORG 7E00H	
(2)   22/       0 :                     DisplayBuffer:			db 256 dup (?)
(2)   23/       0 : [20]                			ENDIF
(2)   24/       0 :                     
(2)   25/       0 : =>TRUE              			IF Resolution == "64x64"
(2)   26/    7D00 :                     				ORG 7D00H
(2)   27/    7D00 :                     DisplayBuffer:			db 512 dup (?)
(2)   28/    7F00 : [25]                			ENDIF
(2)   29/    7F00 :                     					
 AS V1.42 Beta [Bld 172] - Source File BasicTerminal.asm(buffers.asm) - Page 3 - 8/28/2020 13:37:18


(2)   30/    7F00 : =>FALSE             		ELSEIF					; COPY and SWAP use two video buffers
(2)   31/    7F00 :                     			IF Resolution == "64x32"
(2)   32/    7F00 :                     				ORG 7D00H	
(2)   33/    7F00 :                     DisplayBuffer:			db 256 dup (?)
(2)   34/    7F00 :                     DoubleBuffer:			db 256 dup (?)
(2)   35/    7F00 : [31]                			ENDIF
(2)   36/    7F00 :                     
(2)   37/    7F00 :                     			IF Resolution == "64x64"
(2)   38/    7F00 :                     				ORG 7B00H
(2)   39/    7F00 :                     DisplayBuffer:			db 512 dup (?)
(2)   40/    7F00 :                     DoubleBuffer:			db 512 dup (?)
(2)   41/    7F00 : [37]                			ENDIF
(2)   42/    7F00 :                     					
(2)   43/    7F00 : [19]                		ENDIF
(2)   44/    7F00 :                     
(2)   45/    7F00 :                     				ORG 7F00H
(2)   46/    7F00 :                     				
(2)   47/    7F00 :                     ; =========================================================================================
(2)   48/    7F00 :                     ; Buffer for unpacked characters
(2)   49/    7F00 :                     ; =========================================================================================
(2)   50/    7F00 :                     
(2)   51/    7F00 :                     CharacterPattern:	db 5 dup ?
(2)   52/    7F05 :                     
(2)   53/    7F05 :                     ; =========================================================================================
(2)   54/    7F05 :                     ; Cursor location for video console
(2)   55/    7F05 :                     ; =========================================================================================
(2)   56/    7F05 :                     
(2)   57/    7F05 :                     CursorX			db ?
(2)   58/    7F06 :                     
(2)   59/    7F06 :                     CursorY			db ?
(2)   60/    7F07 :                     ;------------------------------------------------------------------------------------------
(2)   61/    7F07 :                     
(2)   62/    7F07 :                     ; =========================================================================================
(2)   63/    7F07 :                     ; Flag to indicate if 1861 Video is currently on or off
(2)   64/    7F07 :                     ; =========================================================================================
(2)   65/    7F07 :                     
(2)   66/    7F07 :                     VideoFlag		db ?
(2)   67/    7F08 :                     ;------------------------------------------------------------------------------------------
(2)   68/    7F08 :                     
(2)   69/    7F08 :                     ; 
(2)   70/    7F08 :                     ;Buffers and variables end at 7F08, leaving 120 bytes available for program stack
(2)   71/    7F08 :                     
(2)   72/    7F08 :                     
(2)   73/    7F08 :                     ; =========================================================================================
(2)   74/    7F08 :                     ; Space for the main stack
(2)   75/    7F08 :                     ; =========================================================================================
(2)   76/    7F08 :                     
(2)   77/    7F08 :                     					
(2)   78/    7F7F :                     			ORG 7F7FH
(2)   79/    7F7F :                     StackTop:
(2)   80/    7F7F :                     ;------------------------------------------------------------------------------------------	
(2)   81/    7F7F :                     
(2)   82/    7F7F :                     ; =========================================================================================
(2)   83/    7F7F :                     ; Reserve 7F80H to 7FFFH for Super Monitor program
(2)   84/    7F7F :                     ; =========================================================================================
(1)   15/    7F7F :                     
(1)   16/    7F7F :                     ; =========================================================================================
(1)   17/    7F7F :                     ; Starting point of the program and initialisation of the CPU registers
(1)   18/    7F7F :                     ;
(1)   19/    7F7F :                     ; R0		Reserved as pointer to the DMA buffer
 AS V1.42 Beta [Bld 172] - Source File BasicTerminal.asm(Initialize.asm) - Page 4 - 8/28/2020 13:37:18


(1)   20/    7F7F :                     ; R1		Reserved as interrupt vector
(1)   21/    7F7F :                     ; R2		Main stack pointer
(1)   22/    7F7F :                     ; R3		Main program counter
(1)   23/    7F7F :                     ; R4		Program counter for standard call procedure
(1)   24/    7F7F :                     ; R5		Program counter for standard return procedure
(1)   25/    7F7F :                     ; R6		Reserved for temporary values from standard call/return procedures
(1)   26/    7F7F :                     ; R7 - RF	Free to use in the program, not initialized
(1)   27/    7F7F :                     ; =========================================================================================	
(1)   28/    7F7F :                     				CPU 1802
(1)   29/       0 :                     				ORG 0000H
(1)   30/       0 :                     		
(1)   31/       0 : (MACRO)             Init:				LOAD R1, DisplayInt	; DMA Buffer pointer
(1)   31/       0 : F8 44                       LDI  lo(DISPLAYINT)
(1)   31/       2 : A1                          PLO  R1
(1)   31/       3 : F8 00                       LDI  hi(DISPLAYINT)
(1)   31/       5 : B1                          PHI  R1     
(1)   32/       6 :                     				
(1)   33/       6 : (MACRO)             				LOAD R2, StackTop	; Main Stack pointer
(1)   33/       6 : F8 7F                       LDI  lo(STACKTOP)
(1)   33/       8 : A2                          PLO  R2
(1)   33/       9 : F8 7F                       LDI  hi(STACKTOP)
(1)   33/       B : B2                          PHI  R2     
(1)   34/       C :                     				
(1)   35/       C : (MACRO)             				LOAD R3, Start		; Main Program Counter
(1)   35/       C : F8 D7                       LDI  lo(START)
(1)   35/       E : A3                          PLO  R3
(1)   35/       F : F8 04                       LDI  hi(START)
(1)   35/      11 : B3                          PHI  R3     
(1)   36/      12 :                     				
(1)   37/      12 : (MACRO)             				LOAD R4, StdCall	; Standard CALL procedure
(1)   37/      12 : F8 20                       LDI  lo(STDCALL)
(1)   37/      14 : A4                          PLO  R4
(1)   37/      15 : F8 00                       LDI  hi(STDCALL)
(1)   37/      17 : B4                          PHI  R4     
(1)   38/      18 :                     				
(1)   39/      18 : (MACRO)             				LOAD R5, StdReturn	; Standard RETURN procedure
(1)   39/      18 : F8 30                       LDI  lo(STDRETURN)
(1)   39/      1A : A5                          PLO  R5
(1)   39/      1B : F8 00                       LDI  hi(STDRETURN)
(1)   39/      1D : B5                          PHI  R5     
(1)   40/      1E :                     				
(1)   41/      1E : D3                  				SEP  R3			; Run Main program
(1)   42/      1F :                     ;------------------------------------------------------------------------------------------
(1)   43/      1F :                     
(1)   44/      1F :                     
(1)   45/      1F :                     ; =========================================================================================
(1)   46/      1F :                     ; Standard Call Procedure
(1)   47/      1F :                     ; as described in RCA CDP1802 User Manual, page 61 
(1)   48/      1F :                     ; =========================================================================================
(1)   49/      1F : D3                  STC_Exit:			SEP  R3
(1)   50/      20 : E2                  StdCall:			SEX  R2
(1)   51/      21 : 96                  				GHI  R6
(1)   52/      22 : 73                  				STXD
(1)   53/      23 : 86                  				GLO  R6
(1)   54/      24 : 73                  				STXD
(1)   55/      25 : 93                  				GHI  R3
(1)   56/      26 : B6                  				PHI  R6
(1)   57/      27 : 83                  				GLO  R3
(1)   58/      28 : A6                  				PLO  R6
(1)   59/      29 : 46                  				LDA  R6
 AS V1.42 Beta [Bld 172] - Source File BasicTerminal.asm(Initialize.asm) - Page 5 - 8/28/2020 13:37:18


(1)   60/      2A : B3                  				PHI  R3
(1)   61/      2B : 46                  				LDA  R6
(1)   62/      2C : A3                  				PLO  R3
(1)   63/      2D : 30 1F               				BR   STC_Exit
(1)   64/      2F :                     
(1)   65/      2F :                     ;------------------------------------------------------------------------------------------
(1)   66/      2F :                     
(1)   67/      2F :                     
(1)   68/      2F :                     ; =========================================================================================
(1)   69/      2F :                     ; Standard Return Procedure
(1)   70/      2F :                     ; as described in RCA CDP1802 User Manual, page 61 
(1)   71/      2F :                     ; =========================================================================================
(1)   72/      2F : D3                  STR_Exit:			SEP  R3
(1)   73/      30 : 96                  StdReturn			GHI  R6
(1)   74/      31 : B3                  				PHI  R3
(1)   75/      32 : 86                  				GLO  R6
(1)   76/      33 : A3                  				PLO  R3
(1)   77/      34 : E2                  				SEX  R2
(1)   78/      35 : 12                  				INC  R2
(1)   79/      36 : 72                  				LDXA
(1)   80/      37 : A6                  				PLO  R6
(1)   81/      38 : F0                  				LDX
(1)   82/      39 : B6                  				PHI  R6
(1)   83/      3A : 30 2F               				BR   STR_Exit
(1)   84/      3C :                     
(1)   85/      3C :                     ;------------------------------------------------------------------------------------------
(1)   86/      3C :                     
(1)   87/      3C :                     
(1)   88/      3C :                     ; =========================================================================================
(1)   89/      3C :                     ; Simple delay loop
(1)   90/      3C :                     ; 
(1)   91/      3C :                     ; Parameters:
(1)   92/      3C :                     ; RF.0				Delay time
(1)   93/      3C :                     ; =========================================================================================
(1)   94/      3C : C4                  Delay:				NOP
(1)   95/      3D : 2F                  				DEC  RF
(1)   96/      3E : 8F                  				GLO  RF
(1)   97/      3F : 3A 3C               				BNZ  Delay
(1)   98/      41 : (MACRO)             				RETURN
(1)   98/      41 : D5                          SEP R5
(1)   99/      42 :                     
(1)  100/      42 :                     ;------------------------------------------------------------------------------------------
(1)  101/      42 :                     
(1)  102/      42 :                     
(1)  103/      42 :                     ; =========================================================================================
(1)  104/      42 :                     ; Includes - Change order of compiling to jump target not on same page errors
(1)  105/      42 :                     ; =========================================================================================
(1)  106/      42 :                     
(1)  107/      42 :                     				INCLUDE "Graphics1861.asm"
(2)    1/      42 :                     ; *****************************************************************************************
(2)    2/      42 :                     ; Copyright (c) 2020 
(2)    3/      42 :                     ; by Richard Dienstknecht
(2)    4/      42 :                     ;
(2)    5/      42 :                     ; Changes:
(2)    6/      42 :                     ; Gaston Williams, July, 2020   - Removed 64 x 128 Resolution logic
(2)    7/      42 :                     ; Gaston Williams, July, 2020   - Replaced Std Call and Std Return with Macros
(2)    8/      42 :                     ; Gaston Williams  August, 2020 - Added Macro for loading Register
(2)    9/      42 :                     ; *****************************************************************************************
(2)   10/      42 :                     
(2)   11/      42 : =>TRUE              				IF UseGraphics == "TRUE"
 AS V1.42 Beta [Bld 172] - Source File BasicTerminal.asm(Graphics1861.asm) - Page 6 - 8/28/2020 13:37:18


(2)   12/      42 :                     
(2)   13/      42 :                     
(2)   14/      42 :                     ; =========================================================================================
(2)   15/      42 :                     ; Interrupt and DMA service routine for the CDP1861 to display an effective resolution
(2)   16/      42 :                     ; of 64 x 32 pixels, using a display buffer of 256 bytes.
(2)   17/      42 :                     ; =========================================================================================
(2)   18/      42 :                     
(2)   19/      42 : =>FALSE             					IF Resolution == "64x32"
(2)   20/      42 :                     
(2)   21/      42 :                     INT_Exit:			LDXA
(2)   22/      42 :                     					RET
(2)   23/      42 :                     DisplayInt:			DEC  R2
(2)   24/      42 :                     					SAV
(2)   25/      42 :                     					DEC  R2
(2)   26/      42 :                     					STR  R2
(2)   27/      42 :                     					NOP
(2)   28/      42 :                     					NOP
(2)   29/      42 :                     					NOP
(2)   30/      42 :                     
(2)   31/      42 :                     					IF BackBuffer <> "SWAP"
(2)   32/      42 :                     					LDI  hi(DisplayBuffer)
(2)   33/      42 : [31]                					ENDIF
(2)   34/      42 :                     
(2)   35/      42 :                     					IF BackBuffer == "SWAP"
(2)   36/      42 :                     					GHI  R7
(2)   37/      42 : [35]                					ENDIF
(2)   38/      42 :                     
(2)   39/      42 :                     					PHI  R0
(2)   40/      42 :                     					LDI  00H
(2)   41/      42 :                     					PLO  R0
(2)   42/      42 :                     INT_Loop:			GLO  R0
(2)   43/      42 :                     					SEX  R2
(2)   44/      42 :                     					SEX  R2
(2)   45/      42 :                     					DEC  R0
(2)   46/      42 :                     					PLO  R0
(2)   47/      42 :                     					SEX  R2
(2)   48/      42 :                     					DEC  R0
(2)   49/      42 :                     					PLO  R0
(2)   50/      42 :                     					SEX  R2
(2)   51/      42 :                     					DEC  R0
(2)   52/      42 :                     					PLO  R0
(2)   53/      42 :                     					BN1  INT_Loop
(2)   54/      42 :                     					BR   INT_Exit
(2)   55/      42 :                     
(2)   56/      42 : [19]                					ENDIF
(2)   57/      42 :                     				
(2)   58/      42 :                     ;------------------------------------------------------------------------------------------
(2)   59/      42 :                     
(2)   60/      42 :                     
(2)   61/      42 :                     ; =========================================================================================
(2)   62/      42 :                     ; Interrupt and DMA service routine for the CDP1861 to display an effective resolution
(2)   63/      42 :                     ; of 64 x 64 pixels, using a display buffer of 512 bytes.
(2)   64/      42 :                     ; =========================================================================================
(2)   65/      42 :                     
(2)   66/      42 : =>TRUE              					IF Resolution == "64x64"
(2)   67/      42 :                     
(2)   68/      42 : 72                  INT_Exit:			LDXA
(2)   69/      43 : 70                  					RET
(2)   70/      44 : C4                  DisplayInt:			NOP
(2)   71/      45 : 22                  					DEC  R2
 AS V1.42 Beta [Bld 172] - Source File BasicTerminal.asm(Graphics1861.asm) - Page 7 - 8/28/2020 13:37:18


(2)   72/      46 : 78                  					SAV
(2)   73/      47 : 22                  					DEC  R2
(2)   74/      48 : 52                  					STR  R2
(2)   75/      49 :                     
(2)   76/      49 : =>TRUE              					IF BackBuffer <> "SWAP"
(2)   77/      49 : F8 7D               					LDI  hi(DisplayBuffer)
(2)   78/      4B : [76]                					ENDIF
(2)   79/      4B :                     
(2)   80/      4B : =>FALSE             					IF BackBuffer == "SWAP"
(2)   81/      4B :                     					GHI  R7
(2)   82/      4B : [80]                					ENDIF
(2)   83/      4B :                     
(2)   84/      4B : B0                  					PHI  R0
(2)   85/      4C : F8 00               					LDI  00H
(2)   86/      4E : A0                  					PLO  R0
(2)   87/      4F : C4                  					NOP
(2)   88/      50 : C4                  					NOP
(2)   89/      51 : E2                  					SEX  R2
(2)   90/      52 : 80                  INT_Loop:			GLO  R0
(2)   91/      53 : E2                  					SEX  R2
(2)   92/      54 : 20                  					DEC  R0
(2)   93/      55 : A0                  					PLO  R0
(2)   94/      56 : E2                  					SEX  R2
(2)   95/      57 : 3C 52               					BN1  INT_Loop
(2)   96/      59 : 80                  INT_Rest:			GLO  R0
(2)   97/      5A : E2                  					SEX  R2
(2)   98/      5B : 20                  					DEC  R0
(2)   99/      5C : A0                  					PLO  R0
(2)  100/      5D : 34 59               					B1   INT_Rest
(2)  101/      5F : 30 42               					BR   INT_Exit
(2)  102/      61 :                     
(2)  103/      61 : [66]                					ENDIF
(2)  104/      61 :                     
(2)  105/      61 :                     ;------------------------------------------------------------------------------------------
(2)  106/      61 :                     
(2)  107/      61 :                     ; =========================================================================================
(2)  108/      61 :                     ; Parameters:
(2)  109/      61 :                     ; RF		Pointer to the image
(2)  110/      61 :                     ;
(2)  111/      61 :                     ; Internal:
(2)  112/      61 :                     ; RE		Pointer to video buffer
(2)  113/      61 :                     ; =========================================================================================
(2)  114/      61 :                     
(2)  115/      61 :                     					
(2)  116/      61 : =>TRUE              CopyImage:			IF BackBuffer == "OFF"
(2)  117/      61 : F8 7D               					LDI  hi(DisplayBuffer)			; prepare the pointer to the video buffer
(2)  118/      63 : BE                  					PHI  RE
(2)  119/      64 : [116]               					ENDIF
(2)  120/      64 :                     
(2)  121/      64 : =>FALSE             					IF BackBuffer == "COPY"
(2)  122/      64 :                     					LDI  hi(DoubleBuffer)			; prepare the pointer to the back buffer
(2)  123/      64 :                     					PHI  RE
(2)  124/      64 : [121]               					ENDIF
(2)  125/      64 :                     
(2)  126/      64 : =>FALSE             					IF BackBuffer == "SWAP"
(2)  127/      64 :                     					GLO  R7							; prepare the pointer to the current back buffer
(2)  128/      64 :                     					PHI  RE
(2)  129/      64 : [126]               					ENDIF
(2)  130/      64 :                     
(2)  131/      64 : F8 00               					LDI  00H
 AS V1.42 Beta [Bld 172] - Source File BasicTerminal.asm(Graphics1861.asm) - Page 8 - 8/28/2020 13:37:18


(2)  132/      66 : AE                  					PLO  RE
(2)  133/      67 :                     
(2)  134/      67 : 4F                  CI_Loop:			LDA  RF
(2)  135/      68 : 5E                  					STR  RE
(2)  136/      69 : 1E                  					INC  RE
(2)  137/      6A : 8E                  					GLO  RE
(2)  138/      6B : 3A 67               					BNZ  CI_Loop
(2)  139/      6D :                     					
(2)  140/      6D : =>TRUE              					IF Resolution == "64x64"					
(2)  141/      6D : =>TRUE              					IF BackBuffer == "OFF"
(2)  142/      6D : F8 7E               					LDI   hi(DisplayBuffer) + 1
(2)  143/      6F : [141]               					ENDIF
(2)  144/      6F :                     
(2)  145/      6F : =>FALSE             					IF BackBuffer == "COPY"
(2)  146/      6F :                     					LDI   hi(DoubleBuffer) + 1
(2)  147/      6F : [145]               					ENDIF
(2)  148/      6F :                     
(2)  149/      6F : =>FALSE             					IF BackBuffer == "SWAP"
(2)  150/      6F :                     					GLO  R7
(2)  151/      6F :                     					ADI	 01H
(2)  152/      6F : [149]               					ENDIF
(2)  153/      6F :                     
(2)  154/      6F : 52                  					STR  R2
(2)  155/      70 : 9E                  					GHI  RE
(2)  156/      71 : F5                  					SD
(2)  157/      72 : 33 67               					BDF  CI_Loop				
(2)  158/      74 : [140]               					ENDIF
(2)  159/      74 :                     									
(2)  160/      74 : (MACRO)             					RETURN					
(2)  160/      74 : D5                          SEP R5
(2)  161/      75 :                     
(2)  162/      75 :                     ;------------------------------------------------------------------------------------------
(2)  163/      75 :                     
(2)  164/      75 :                     
(2)  165/      75 :                     ; =========================================================================================
(2)  166/      75 :                     ; Parameters:
(2)  167/      75 :                     ; RF		Value for filling
(2)  168/      75 :                     ;
(2)  169/      75 :                     ; Internal:
(2)  170/      75 :                     ; RE		Pointer to video buffer
(2)  171/      75 :                     ; =========================================================================================
(2)  172/      75 :                     
(2)  173/      75 : =>TRUE              FillScreen:			IF BackBuffer == "OFF"
(2)  174/      75 : F8 7D               					LDI  hi(DisplayBuffer)			; prepare the pointer to the video buffer
(2)  175/      77 : BE                  					PHI  RE
(2)  176/      78 : [173]               					ENDIF
(2)  177/      78 :                     
(2)  178/      78 : =>FALSE             					IF BackBuffer == "COPY"
(2)  179/      78 :                     					LDI  hi(DoubleBuffer)			; prepare the pointer to the back buffer
(2)  180/      78 :                     					PHI  RE
(2)  181/      78 : [178]               					ENDIF
(2)  182/      78 :                     
(2)  183/      78 : =>FALSE             					IF BackBuffer == "SWAP"
(2)  184/      78 :                     					GLO  R7							; prepare the pointer to the current back buffer
(2)  185/      78 :                     					PHI  RE
(2)  186/      78 : [183]               					ENDIF
(2)  187/      78 :                     
(2)  188/      78 : F8 00               					LDI  00H
(2)  189/      7A : AE                  					PLO  RE
(2)  190/      7B :                     
 AS V1.42 Beta [Bld 172] - Source File BasicTerminal.asm(Graphics1861.asm) - Page 9 - 8/28/2020 13:37:18


(2)  191/      7B : 9F                  FS_Loop:			GHI  RF
(2)  192/      7C : 5E                  					STR  RE
(2)  193/      7D : 1E                  					INC  RE
(2)  194/      7E : 8E                  					GLO  RE
(2)  195/      7F : 3A 7B               					BNZ  FS_Loop
(2)  196/      81 :                     					
(2)  197/      81 : =>TRUE              					IF Resolution == "64x64"
(2)  198/      81 : =>TRUE              					IF BackBuffer == "OFF"
(2)  199/      81 : F8 7E               					LDI   hi(DisplayBuffer) + 1
(2)  200/      83 : [198]               					ENDIF
(2)  201/      83 :                     
(2)  202/      83 : =>FALSE             					IF BackBuffer == "COPY"
(2)  203/      83 :                     					LDI   hi(DoubleBuffer) + 1
(2)  204/      83 : [202]               					ENDIF
(2)  205/      83 :                     
(2)  206/      83 : =>FALSE             					IF BackBuffer == "SWAP"
(2)  207/      83 :                     					GLO  R7
(2)  208/      83 :                     					ADI  01H
(2)  209/      83 : [206]               					ENDIF
(2)  210/      83 :                     
(2)  211/      83 : 52                  					STR  R2
(2)  212/      84 : 9E                  					GHI  RE
(2)  213/      85 : F5                  					SD
(2)  214/      86 : 33 7B               					BDF  FS_Loop				
(2)  215/      88 : [197]               					ENDIF
(2)  216/      88 :                     					
(2)  217/      88 : (MACRO)             					RETURN					
(2)  217/      88 : D5                          SEP R5
(2)  218/      89 :                     
(2)  219/      89 :                     ;------------------------------------------------------------------------------------------
(2)  220/      89 :                     
(2)  221/      89 :                     
(2)  222/      89 :                     ; =========================================================================================
(2)  223/      89 :                     ; Parameters:
(2)  224/      89 :                     ; RE.0		X coordinate of the sprite
(2)  225/      89 :                     ; RE.1		Y coordinate of the sprite
(2)  226/      89 :                     ; RF		Pointer to sprite
(2)  227/      89 :                     ; RD		Size of the sprite in bytes
(2)  228/      89 :                     ;
(2)  229/      89 :                     ; Internal:
(2)  230/      89 :                     ; RC		Pointer to video memory
(2)  231/      89 :                     ; =========================================================================================
(2)  232/      89 :                     
(2)  233/      89 : =>TRUE              DrawSprite:			IF BackBuffer == "OFF"
(2)  234/      89 : F8 7D               					LDI  hi(DisplayBuffer)			; prepare the pointer to the video buffer
(2)  235/      8B : [233]               					ENDIF
(2)  236/      8B :                     
(2)  237/      8B : =>FALSE             					IF BackBuffer == "COPY"
(2)  238/      8B :                     					LDI  hi(DoubleBuffer)			; prepare the pointer to the back buffer
(2)  239/      8B : [237]               					ENDIF
(2)  240/      8B :                     
(2)  241/      8B : =>FALSE             					IF BackBuffer == "SWAP"
(2)  242/      8B :                     					GLO  R7							; prepare the pointer to the current back buffer
(2)  243/      8B : [241]               					ENDIF
(2)  244/      8B :                     					
(2)  245/      8B : BC                  					PHI  RC							; DisplayBuffer + Y * 8 + X / 8
(2)  246/      8C : 9E                  					GHI  RE							; result goes to RC
(2)  247/      8D :                     
(2)  248/      8D : =>FALSE             					IF Resolution == "64x32"
(2)  249/      8D :                     					ANI  1FH						; between 0 - 31
 AS V1.42 Beta [Bld 172] - Source File BasicTerminal.asm(Graphics1861.asm) - Page 10 - 8/28/2020 13:37:18


(2)  250/      8D : [248]               					ENDIF
(2)  251/      8D :                     				
(2)  252/      8D : =>TRUE              					IF Resolution == "64x64"
(2)  253/      8D : FA 3F               					ANI  3FH						; or 0 - 63
(2)  254/      8F : [252]               					ENDIF
(2)  255/      8F :                     
(2)  256/      8F : FE                  					SHL
(2)  257/      90 : FE                  					SHL
(2)  258/      91 : FE                  					SHL
(2)  259/      92 : AC                  					PLO  RC
(2)  260/      93 : 3B 99               					BNF  DSP_SkipIncrement
(2)  261/      95 : 9C                  					GHI  RC
(2)  262/      96 : FC 01               					ADI  01H
(2)  263/      98 : BC                  					PHI  RC
(2)  264/      99 :                     					
(2)  265/      99 : 8C                  DSP_SkipIncrement:	GLO  RC
(2)  266/      9A : 52                  					STR  R2
(2)  267/      9B : 8E                  					GLO  RE
(2)  268/      9C : FA 3F               					ANI  3FH
(2)  269/      9E : F6                  					SHR
(2)  270/      9F : F6                  					SHR
(2)  271/      A0 : F6                  					SHR
(2)  272/      A1 : F4                  					ADD
(2)  273/      A2 : AC                  					PLO  RC
(2)  274/      A3 : 8E                  					GLO  RE							; calculate the number of required shifts 
(2)  275/      A4 : FA 07               					ANI  07H						; result to RE.1, replacing the Y coordinate
(2)  276/      A6 : BE                  					PHI  RE							; RE.0 will be used later to count the shifts
(2)  277/      A7 :                     
(2)  278/      A7 : 8D                  DSP_ByteLoop:		GLO  RD							; exit if all bytes of the sprite have been drawn
(2)  279/      A8 : 32 D9               					BZ   DSP_Exit
(2)  280/      AA :                     					
(2)  281/      AA : =>FALSE             					IF Resolution == "64x32"		; or if we are about to draw outside the video buffer
(2)  282/      AA :                     					IF BackBuffer == "OFF"
(2)  283/      AA :                     					LDI   hi(DisplayBuffer)
(2)  284/      AA : [282]               					ENDIF
(2)  285/      AA :                     
(2)  286/      AA :                     					IF BackBuffer == "COPY"
(2)  287/      AA :                     					LDI   hi(DoubleBuffer)
(2)  288/      AA : [286]               					ENDIF
(2)  289/      AA :                     
(2)  290/      AA :                     					IF BackBuffer == "SWAP"
(2)  291/      AA :                     					GLO  R7
(2)  292/      AA : [290]               					ENDIF
(2)  293/      AA : [281]               					ENDIF
(2)  294/      AA :                     
(2)  295/      AA : =>TRUE              					IF Resolution == "64x64"
(2)  296/      AA : =>TRUE              					IF BackBuffer == "OFF"
(2)  297/      AA : F8 7E               					LDI   hi(DisplayBuffer) + 1
(2)  298/      AC : [296]               					ENDIF
(2)  299/      AC :                     
(2)  300/      AC : =>FALSE             					IF BackBuffer == "COPY"
(2)  301/      AC :                     					LDI   hi(DoubleBuffer) + 1
(2)  302/      AC : [300]               					ENDIF
(2)  303/      AC :                     
(2)  304/      AC : =>FALSE             					IF BackBuffer == "SWAP"
(2)  305/      AC :                     					GLO  R7
(2)  306/      AC :                     					ADI  01H
(2)  307/      AC : [304]               					ENDIF
(2)  308/      AC : [295]               					ENDIF
(2)  309/      AC :                     
 AS V1.42 Beta [Bld 172] - Source File BasicTerminal.asm(Graphics1861.asm) - Page 11 - 8/28/2020 13:37:18


(2)  310/      AC : 52                  					STR  R2
(2)  311/      AD : 9C                  					GHI  RC
(2)  312/      AE : F5                  					SD
(2)  313/      AF : 3B D9               					BNF  DSP_Exit
(2)  314/      B1 : 0F                  					LDN	 RF							; load the next byte of the sprite into RB.0
(2)  315/      B2 : AB                  					PLO  RB
(2)  316/      B3 : F8 00               					LDI  00H						; set RB.1 to OOH
(2)  317/      B5 : BB                  					PHI  RB
(2)  318/      B6 : 2D                  					DEC  RD							; decrement the sprite's byte counter
(2)  319/      B7 : 1F                  					INC  RF							; increment the pointer to the sprite's bytes
(2)  320/      B8 : 9E                  					GHI  RE							; prepare the shift counter
(2)  321/      B9 : AE                  					PLO  RE
(2)  322/      BA : 8E                  DSP_ShiftLoop:		GLO  RE							; exit the loop if all shifts have been performed
(2)  323/      BB : 32 C6               					BZ   DSP_ShiftExit
(2)  324/      BD : 2E                  					DEC  RE							; decrement the shift counter
(2)  325/      BE : 8B                  					GLO  RB							; shift the values in RB
(2)  326/      BF : F6                  					SHR
(2)  327/      C0 : AB                  					PLO  RB
(2)  328/      C1 : 9B                  					GHI  RB
(2)  329/      C2 : 76                  					RSHR
(2)  330/      C3 : BB                  					PHI  RB
(2)  331/      C4 : 30 BA               					BR   DSP_ShiftLoop
(2)  332/      C6 : EC                  DSP_ShiftExit:		SEX  RC							; store the shifted bytes in the video buffer
(2)  333/      C7 : 8B                  					GLO  RB
(2)  334/      C8 : F3                  					XOR
(2)  335/      C9 : 5C                  					STR  RC
(2)  336/      CA : 1C                  					INC  RC
(2)  337/      CB : 9B                  					GHI  RB
(2)  338/      CC : F3                  					XOR
(2)  339/      CD : 5C                  					STR  RC
(2)  340/      CE : E2                  					SEX  R2
(2)  341/      CF : 8C                  					GLO  RC							; advance the video buffer pointer to the next line
(2)  342/      D0 : FC 07               					ADI  07H
(2)  343/      D2 : AC                  					PLO  RC
(2)  344/      D3 : 9C                  					GHI  RC
(2)  345/      D4 : 7C 00               					ADCI 00H
(2)  346/      D6 : BC                  					PHI  RC
(2)  347/      D7 : 30 A7               					BR   DSP_ByteLoop
(2)  348/      D9 : (MACRO)             DSP_Exit			RETURN
(2)  348/      D9 : D5                          SEP R5
(2)  349/      DA :                     
(2)  350/      DA :                     ;------------------------------------------------------------------------------------------
(2)  351/      DA :                     
(2)  352/      DA :                     
(2)  353/      DA :                     ; =========================================================================================
(2)  354/      DA :                     ; Parameters:
(2)  355/      DA :                     ; ----
(2)  356/      DA :                     ;
(2)  357/      DA :                     ; Internal:
(2)  358/      DA :                     ; RE		Pointer to video buffer
(2)  359/      DA :                     ; RF		Pointer to back buffer
(2)  360/      DA :                     ; =========================================================================================
(2)  361/      DA :                     					
(2)  362/      DA : =>FALSE             CopyBackBuffer:		IF BackBuffer <> "OFF"
(2)  363/      DA :                     
(2)  364/      DA :                     					IF BackBuffer == "COPY"					
(2)  365/      DA :                     					LOAD RE, DisplayBuffer			; prepare the pointer to the video buffer
(2)  366/      DA :                     
(2)  367/      DA :                     					LOAD RF, DoubleBuffer			; prepare the pointer to the back buffer
(2)  368/      DA :                     										
 AS V1.42 Beta [Bld 172] - Source File BasicTerminal.asm(Graphics1861.asm) - Page 12 - 8/28/2020 13:37:18


(2)  369/      DA :                     CBB_Loop:				LDA  RF
(2)  370/      DA :                     					STR  RE
(2)  371/      DA :                     					INC  RE
(2)  372/      DA :                     					GLO  RE
(2)  373/      DA :                     					BNZ  CBB_Loop
(2)  374/      DA :                     					
(2)  375/      DA :                     					IF Resolution == "64x64"
(2)  376/      DA :                     					LDI   hi(DisplayBuffer) + 1
(2)  377/      DA : [375]               					ENDIF
(2)  378/      DA :                     
(2)  379/      DA :                     					STR  R2
(2)  380/      DA :                     					GHI  RE
(2)  381/      DA :                     					SD
(2)  382/      DA :                     					BDF  CBB_Loop
(2)  383/      DA : [364]               					ENDIF
(2)  384/      DA :                     
(2)  385/      DA :                     					IF BackBuffer == "SWAP"
(2)  386/      DA :                     					GHI  R7
(2)  387/      DA :                     					SMI  hi(DisplayBuffer)
(2)  388/      DA :                     					BZ   CBB_Swap
(2)  389/      DA :                     					LDI  hi(DisplayBuffer)
(2)  390/      DA :                     					PHI  R7
(2)  391/      DA :                     					LDI  hi(DoubleBuffer)
(2)  392/      DA :                     					PLO  R7
(2)  393/      DA :                     					BR   CBB_Exit
(2)  394/      DA :                     CBB_Swap:			LDI  hi(DoubleBuffer)
(2)  395/      DA :                     					PHI  R7
(2)  396/      DA :                     					LDI  hi(DisplayBuffer)
(2)  397/      DA :                     					PLO  R7
(2)  398/      DA :                     					BR   CBB_Exit
(2)  399/      DA : [385]               					ENDIF
(2)  400/      DA :                     
(2)  401/      DA : [362]               					ENDIF					
(2)  402/      DA : (MACRO)             CBB_Exit:			RETURN		
(2)  402/      DA : D5                          SEP R5
(2)  403/      DB :                     
(2)  404/      DB :                     ;------------------------------------------------------------------------------------------
(2)  405/      DB :                     
(2)  406/      DB : [11]                				ENDIF
(2)  407/      DB :                     
(1)  108/      DB :                     				
(1)  109/      DB : =>TRUE              		IF Resolution == "64x64"				
(1)  110/      DB : =>TRUE              			IF BackBuffer == "OFF"
(1)  111/      DB :                     				INCLUDE "Text1861.asm"							
(2)    1/      DB :                     ; *****************************************************************************************
(2)    2/      DB :                     ; Copyright (c) 2020 
(2)    3/      DB :                     ; by Richard Dienstknecht
(2)    4/      DB :                     ;
(2)    5/      DB :                     ; Changes:
(2)    6/      DB :                     ; Gaston Williams, July, 2020   - Removed 64 x 128 Resolution logic
(2)    7/      DB :                     ; Gaston Williams, July, 2020   - Moved Font definitions into separate file
(2)    8/      DB :                     ; Gaston Williams, July, 2020   - Replaced Std Call and Std Return with Macros
(2)    9/      DB :                     ; Gaston Williams  August, 2020 - Added Macro for loading Register
(2)   10/      DB :                     ; *****************************************************************************************
(2)   11/      DB :                     
(2)   12/      DB : =>TRUE              		IF UseText == "TRUE"
(2)   13/      DB :                     
(2)   14/      DB :                     ; =========================================================================================
(2)   15/      DB :                     ; Draws a zero terminated string at specified screen coordinates. 
(2)   16/      DB :                     ;
 AS V1.42 Beta [Bld 172] - Source File BasicTerminal.asm(Text1861.asm) - Page 13 - 8/28/2020 13:37:18


(2)   17/      DB :                     ; Parameters:
(2)   18/      DB :                     ; RF		Pointer to the string
(2)   19/      DB :                     ; RE.0		X coordinate
(2)   20/      DB :                     ; RE.1		Y coordinate
(2)   21/      DB :                     ; =========================================================================================
(2)   22/      DB :                     
(2)   23/      DB : 0F                  DrawString:		LDN  RF			; get character, exit if 0
(2)   24/      DC : AC                  			PLO  RC
(2)   25/      DD : 32 FF               			BZ   DS_Exit
(2)   26/      DF : 1F                  			INC  RF
(2)   27/      E0 :                     					
(2)   28/      E0 : 8F                  			GLO  RF			; push RF onto the stack
(2)   29/      E1 : 73                  			STXD
(2)   30/      E2 : 9F                  			GHI  RF
(2)   31/      E3 : 73                  			STXD
(2)   32/      E4 :                     					
(2)   33/      E4 : 8E                  			GLO  RE			; push RE onto the stack
(2)   34/      E5 : 73                  			STXD
(2)   35/      E6 : 9E                  			GHI  RE
(2)   36/      E7 : 73                  			STXD
(2)   37/      E8 :                     					
(2)   38/      E8 : (MACRO)             			CALL DrawCharacter	; draw the character
(2)   38/      E8 : D4                          SEP R4
(2)   38/      E9 : 01 00                       dw  DRAWCHARACTER
(2)   39/      EB :                     					
(2)   40/      EB : 60                  			IRX			; restore RE
(2)   41/      EC : 72                  			LDXA
(2)   42/      ED : BE                  			PHI  RE
(2)   43/      EE : F0                  			LDX
(2)   44/      EF : AE                  			PLO  RE
(2)   45/      F0 :                     					
(2)   46/      F0 : 8F                  			GLO  RF			; advance the x coordinate by the
(2)   47/      F1 : 73                  			STXD			; width of the character + 1
(2)   48/      F2 : 60                  			IRX
(2)   49/      F3 : 8E                  			GLO  RE
(2)   50/      F4 : F4                  			ADD
(2)   51/      F5 : FC 01               			ADI  01H
(2)   52/      F7 : AE                  			PLO  RE
(2)   53/      F8 :                     			
(2)   54/      F8 : 60                  			IRX			; restore RF
(2)   55/      F9 : 72                  			LDXA
(2)   56/      FA : BF                  			PHI  RF
(2)   57/      FB : F0                  			LDX
(2)   58/      FC : AF                  			PLO  RF
(2)   59/      FD : 30 DB               			BR   DrawString		; continue with the next character
(2)   60/      FF :                     
(2)   61/      FF : (MACRO)             DS_Exit:		RETURN
(2)   61/      FF : D5                          SEP R5
(2)   62/     100 :                     
(2)   63/     100 :                     ;------------------------------------------------------------------------------------------
(2)   64/     100 :                     
(2)   65/     100 :                     
(2)   66/     100 :                     ; =========================================================================================
(2)   67/     100 :                     ; Draws a character at specified screen coordinates 
(2)   68/     100 :                     ;
(2)   69/     100 :                     ; Parameters:
(2)   70/     100 :                     ; RE.0		X coordinate of the character
(2)   71/     100 :                     ; RE.1		Y coordinate of the character
(2)   72/     100 :                     ; RC.0		ASCII code of the character (20 - 7F)
(2)   73/     100 :                     ; 
 AS V1.42 Beta [Bld 172] - Source File BasicTerminal.asm(Text1861.asm) - Page 14 - 8/28/2020 13:37:18


(2)   74/     100 :                     ; Internal:
(2)   75/     100 :                     ; RF		Pointer to the unpacked character's pattern
(2)   76/     100 :                     ; RD		Pointer to the font
(2)   77/     100 :                     ; RC.1		Temporary values
(2)   78/     100 :                     
(2)   79/     100 :                     ; Returns:
(2)   80/     100 :                     ; RF.0		Character width
(2)   81/     100 :                     ; =========================================================================================
(2)   82/     100 :                     
(2)   83/     100 : (MACRO)             DrawCharacter:		LOAD RF, CharacterPattern	; RF points to the buffer for the character pattern
(2)   83/     100 : F8 00                       LDI  lo(CHARACTERPATTERN)
(2)   83/     102 : AF                          PLO  RF
(2)   83/     103 : F8 7F                       LDI  hi(CHARACTERPATTERN)
(2)   83/     105 : BF                          PHI  RF     
(2)   84/     106 :                     								
(2)   85/     106 : (MACRO)             			LOAD RD, Font			; RD points to the font			
(2)   85/     106 : F8 7C                       LDI  lo(FONT)
(2)   85/     108 : AD                          PLO  RD
(2)   85/     109 : F8 01                       LDI  hi(FONT)
(2)   85/     10B : BD                          PHI  RD     
(2)   86/     10C :                     				
(2)   87/     10C : 8C                  			GLO  RC				; calculate the offset in the font
(2)   88/     10D : FF 20               			SMI  020H			; (( character code - 20) / 2) * 6
(2)   89/     10F : FA FE               			ANI  0FEH
(2)   90/     111 : BC                  			PHI  RC
(2)   91/     112 : FE                  			SHL
(2)   92/     113 : 73                  			STXD
(2)   93/     114 : 60                  			IRX					
(2)   94/     115 : 9C                  			GHI  RC
(2)   95/     116 : F4                  			ADD
(2)   96/     117 : 73                  			STXD
(2)   97/     118 : 60                  			IRX
(2)   98/     119 : 3B 1F               			BNF  DC_SkipHighByte
(2)   99/     11B : 9D                  			GHI  RD
(2)  100/     11C : FC 01               			ADI	 01H
(2)  101/     11E : BD                  			PHI  RD
(2)  102/     11F :                     					
(2)  103/     11F : 8D                  DC_SkipHighByte:	GLO  RD				; add to the address in RD
(2)  104/     120 : F4                  			ADD	
(2)  105/     121 : AD                  			PLO  RD
(2)  106/     122 : 3B 28               			BNF  DC_SkipHighByte2
(2)  107/     124 : 9D                  			GHI  RD
(2)  108/     125 : FC 01               			ADI  01H
(2)  109/     127 : BD                  			PHI  RD
(2)  110/     128 :                     
(2)  111/     128 : 0D                  DC_SkipHighByte2:	LDN  RD				; get the width of the first character pattern
(2)  112/     129 : F6                  			SHR
(2)  113/     12A : F6                  			SHR
(2)  114/     12B : F6                  			SHR
(2)  115/     12C : F6                  			SHR
(2)  116/     12D : 73                  			STXD
(2)  117/     12E : 60                  			IRX
(2)  118/     12F :                     
(2)  119/     12F : 8C                  			GLO  RC				; do we need the first or the second pattern?
(2)  120/     130 : FA 01               			ANI  01H
(2)  121/     132 : BC                  			PHI  RC
(2)  122/     133 : 3A 47               			BNZ  DC_PrepareSecond
(2)  123/     135 :                     					
(2)  124/     135 : F0                  			LDX				; prepare the mask					
(2)  125/     136 : AB                  			PLO  RB	
 AS V1.42 Beta [Bld 172] - Source File BasicTerminal.asm(Text1861.asm) - Page 15 - 8/28/2020 13:37:18


(2)  126/     137 : F8 00               			LDI  00H
(2)  127/     139 : BB                  			PHI  RB
(2)  128/     13A : 9B                  DC_MaskLoop:		GHI  RB
(2)  129/     13B : F6                  			SHR
(2)  130/     13C : F9 80               			ORI  80H
(2)  131/     13E : BB                  			PHI  RB
(2)  132/     13F : 2B                  			DEC  RB
(2)  133/     140 : 8B                  			GLO  RB
(2)  134/     141 : 3A 3A               			BNZ  DC_MaskLoop
(2)  135/     143 :                     
(2)  136/     143 : F0                  			LDX
(2)  137/     144 : 73                  			STXD				; keep the width of the first pattern on the stack
(2)  138/     145 : 30 4D               			BR   DC_CopyPattern
(2)  139/     147 :                     
(2)  140/     147 : F0                  DC_PrepareSecond:	LDX				; use the width of the first pattern for shifting
(2)  141/     148 : BB                  			PHI  RB
(2)  142/     149 :                     
(2)  143/     149 : 0D                  			LDN  RD				; keep the width of the second character pattern on the stack
(2)  144/     14A : FA 07               			ANI  07H
(2)  145/     14C : 73                  			STXD
(2)  146/     14D :                     
(2)  147/     14D : 1D                  DC_CopyPattern:		INC  RD
(2)  148/     14E : F8 05               			LDI  05H			; prepare a loop over the five bytes of the pattern
(2)  149/     150 : AC                  			PLO  RC
(2)  150/     151 :                     					
(2)  151/     151 : 0D                  DC_ByteLoop:		LDN  RD				; get a byte from the font
(2)  152/     152 : 73                  			STXD
(2)  153/     153 : 60                  			IRX
(2)  154/     154 : 1D                  			INC  RD
(2)  155/     155 :                     					
(2)  156/     155 : 9C                  			GHI  RC
(2)  157/     156 : 3A 5E               			BNZ  DC_ByteShift
(2)  158/     158 :                     
(2)  159/     158 : 9B                  			GHI  RB				; mask out the first pattern
(2)  160/     159 : F2                  			AND
(2)  161/     15A : 73                  			STXD
(2)  162/     15B : 60                  			IRX
(2)  163/     15C : 30 68               			BR   DC_ByteWrite
(2)  164/     15E :                     
(2)  165/     15E : 9B                  DC_ByteShift:		GHI  RB				; shift the second pattern
(2)  166/     15F : AB                  			PLO  RB
(2)  167/     160 : F0                  DC_ShiftLoop:		LDX
(2)  168/     161 : FE                  			SHL
(2)  169/     162 : 73                  			STXD
(2)  170/     163 : 60                  			IRX
(2)  171/     164 : 2B                  			DEC  RB
(2)  172/     165 : 8B                  			GLO  RB
(2)  173/     166 : 3A 60               			BNZ  DC_ShiftLoop
(2)  174/     168 :                     
(2)  175/     168 : F0                  DC_ByteWrite:		LDX				; write the byte
(2)  176/     169 : 5F                  			STR  RF
(2)  177/     16A : 1F                  			INC  RF
(2)  178/     16B :                     
(2)  179/     16B : 2C                  			DEC  RC				; continue until all bytes of the pattern are done
(2)  180/     16C : 8C                  			GLO  RC
(2)  181/     16D : 3A 51               			BNZ  DC_ByteLoop
(2)  182/     16F :                     
(2)  183/     16F : F8 00               			LDI  lo(CharacterPattern)	; restore RF to the beginning of the pattern
(2)  184/     171 : AF                  			PLO  RF
(2)  185/     172 : F8 05               			LDI  05H			; set the length of the pattern
 AS V1.42 Beta [Bld 172] - Source File BasicTerminal.asm(Text1861.asm) - Page 16 - 8/28/2020 13:37:18


(2)  186/     174 : AD                  			PLO  RD
(2)  187/     175 : (MACRO)             			CALL DrawSprite			; call sprite routine to draw  			
(2)  187/     175 : D4                          SEP R4
(2)  187/     176 : 00 89                       dw  DRAWSPRITE
(2)  188/     178 :                     
(2)  189/     178 : 60                  			IRX				; clean up and exit
(2)  190/     179 : F0                  			LDX
(2)  191/     17A : AF                  			PLO  RF
(2)  192/     17B : (MACRO)             			RETURN
(2)  192/     17B : D5                          SEP R5
(2)  193/     17C :                     
(2)  194/     17C :                     ;------------------------------------------------------------------------------------------
(2)  195/     17C : [12]                		ENDIF
(1)  112/     17C :                     				INCLUDE "Fonts.asm"
(2)    1/     17C :                     
(2)    2/     17C :                     ; *********************************************************************************************
(2)    3/     17C :                     ; Copyright (c) 2020 
(2)    4/     17C :                     ; by Richard Dienstknecht
(2)    5/     17C :                     ;
(2)    6/     17C :                     ; Changes:
(2)    7/     17C :                     ; Gaston Williams, July, 2020 - Put Font definations into separate file 
(2)    8/     17C :                     ; Gaston Williams, August, 2020 - Changed DEL to 1 pixel wide space
(2)    9/     17C :                     ;
(2)   10/     17C :                     ; Font definition
(2)   11/     17C :                     ;
(2)   12/     17C :                     ; The font has 96 printable characters, and requires 288 bytes of memory.
(2)   13/     17C :                     ;
(2)   14/     17C :                     ; The characters are encoded in standard ASCII, beginning with 20H and ending at 7FH. Each
(2)   15/     17C :                     ; character has a height of 5 pixels and a variable width of 1 - 5 pixels. 
(2)   16/     17C :                     ;
(2)   17/     17C :                     ; In order to save memory, the patterns of two characters have been combined into one. Without
(2)   18/     17C :                     ; this, the complete 96 character font would have required 480 bytes. The 'left' character
(2)   19/     17C :                     ; stands for the lower even ASCII code, the 'right' one for the following
(2)   20/     17C :                     ; uneven ASCII code. The DrawCharacter subroutine will either mask the left character or
(2)   21/     17C :                     ; shift the right one over to the position of the left one when a character is drawn.
(2)   22/     17C :                     ;
(2)   23/     17C :                     ; Each line defines two characters of variable width, together no more than 8 pixels. The
(2)   24/     17C :                     ; first byte contains the width of each character. The upper four bits hold the width of
(2)   25/     17C :                     ; the left character in the pattern, the lower four bits hold the width of the right character.
(2)   26/     17C :                     ;
(2)   27/     17C :                     ; The following five bytes contain the bit patterns of the characters. Beginning at the left
(2)   28/     17C :                     ; (most significant) bit, the pattern of the left character (up to its specified width) is 
(2)   29/     17C :                     ; immediately followed by the bits of the right character. Any remaining bits to the right 
(2)   30/     17C :                     ; (if both characters together are less than 8 pixels wide) must be set to 0. 
(2)   31/     17C :                     ; **********************************************************************************************
(2)   32/     17C :                     
(2)   33/     17C : 11 40 40 40 00 40   Font:	        db  0011H, 0040H, 0040H, 0040H, 0000H, 0040H		; space and !
(2)   34/     182 : 35 AA BF 0A 1F 0A   		db  0035H, 00AAH, 00BFH, 000AH, 001FH, 000AH		; " and #
(2)   35/     188 : 33 74 C4 48 70 D4   		db  0033H, 0074H, 00C4H, 0048H, 0070H, 00D4H		; $ and %
(2)   36/     18E : 41 48 A8 40 A0 D0   		db  0041H, 0048H, 00A8H, 0040H, 00A0H, 00D0H		; & and '
(2)   37/     194 : 22 60 90 90 90 60   		db  0022H, 0060H, 0090H, 0090H, 0090H, 0060H		; ( and )
(2)   38/     19A : 33 00 A8 5C A8 00   		db  0033H, 0000H, 00A8H, 005CH, 00A8H, 0000H		; * and +
(2)   39/     1A0 : 22 00 00 30 40 80   		db  0022H, 0000H, 0000H, 0030H, 0040H, 0080H		; , and -
(2)   40/     1A6 : 13 10 10 20 40 C0   		db  0013H, 0010H, 0010H, 0020H, 0040H, 00C0H		; . and /
(2)   41/     1AC : 33 48 B8 A8 A8 5C   		db  0033H, 0048H, 00B8H, 00A8H, 00A8H, 005CH		; 0 and 1
(2)   42/     1B2 : 33 D8 24 48 84 F8   		db  0033H, 00D8H, 0024H, 0048H, 0084H, 00F8H		; 2 and 3
(2)   43/     1B8 : 33 3C B0 F8 24 38   		db  0033H, 003CH, 00B0H, 00F8H, 0024H, 0038H		; 4 and 5
(2)   44/     1BE : 33 5C 84 C4 A8 48   		db  0033H, 005CH, 0084H, 00C4H, 00A8H, 0048H		; 6 and 7		
(2)   45/     1C4 : 33 48 B4 4C A4 48   		db  0033H, 0048H, 00B4H, 004CH, 00A4H, 0048H		; 8 and 9
(2)   46/     1CA : 12 00 20 80 20 C0   		db  0012H, 0000H, 0020H, 0080H, 0020H, 00C0H		; : and ;		
 AS V1.42 Beta [Bld 172] - Source File BasicTerminal.asm(Fonts.asm) - Page 17 - 8/28/2020 13:37:18


(2)   47/     1D0 : 32 20 58 80 58 20   		db  0032H, 0020H, 0058H, 0080H, 0058H, 0020H		; < and =
(2)   48/     1D6 : 33 88 54 24 48 88   		db  0033H, 0088H, 0054H, 0024H, 0048H, 0088H		; > and ?
(2)   49/     1DC : 33 48 F4 9C B4 54   		db  0033H, 0048H, 00F4H, 009CH, 00B4H, 0054H		; @ and A
(2)   50/     1E2 : 33 CC B0 D0 B0 CC   		db  0033H, 00CCH, 00B0H, 00D0H, 00B0H, 00CCH		; B and C
(2)   51/     1E8 : 33 DC B0 B8 B0 DC   		db  0033H, 00DCH, 00B0H, 00B8H, 00B0H, 00DCH		; D and E
(2)   52/     1EE : 33 EC 90 D0 94 8C   		db  0033H, 00ECH, 0090H, 00D0H, 0094H, 008CH		; F and G
(2)   53/     1F4 : 33 BC A8 E8 A8 BC   		db  0033H, 00BCH, 00A8H, 00E8H, 00A8H, 00BCH		; H and I
(2)   54/     1FA : 33 34 34 38 B4 54   		db  0033H, 0034H, 0034H, 0038H, 00B4H, 0054H		; J and K
(2)   55/     200 : 35 91 9B 95 91 F1   		db  0035H, 0091H, 009BH, 0095H, 0091H, 00F1H		; L and M
(2)   56/     206 : 43 9E DA BA 9A 9E   		db  0043H, 009EH, 00DAH, 00BAH, 009AH, 009EH		; N and O
(2)   57/     20C : 34 DE B2 D2 96 9E   		db  0034H, 00DEH, 00B2H, 00D2H, 0096H, 009EH		; P and Q
(2)   58/     212 : 33 CC B0 C8 A4 B8   		db  0033H, 00CCH, 00B0H, 00C8H, 00A4H, 00B8H		; R and S
(2)   59/     218 : 33 F4 54 54 54 5C   		db  0033H, 00F4H, 0054H, 0054H, 0054H, 005CH		; T and U
(2)   60/     21E : 35 B1 B1 B1 B5 4A   		db  0035H, 00B1H, 00B1H, 00B1H, 00B5H, 004AH		; V and W
(2)   61/     224 : 33 B4 B4 48 A8 A8   		db  0033H, 00B4H, 00B4H, 0048H, 00A8H, 00A8H		; X and Y
(2)   62/     22A : 32 F8 30 50 90 F8   		db  0032H, 00F8H, 0030H, 0050H, 0090H, 00F8H		; Z and [
(2)   63/     230 : 32 98 88 48 28 38   		db  0032H, 0098H, 0088H, 0048H, 0028H, 0038H		; \ and ]
(2)   64/     236 : 33 40 A0 00 00 1C   		db  0033H, 0040H, 00A0H, 0000H, 0000H, 001CH		; ^ and _
(2)   65/     23C : 23 40 98 28 28 18   		db  0023H, 0040H, 0098H, 0028H, 0028H, 0018H		; ' and a
(2)   66/     242 : 33 80 CC B0 B0 CC   		db  0033H, 0080H, 00CCH, 00B0H, 00B0H, 00CCH		; b and c
(2)   67/     248 : 33 20 6C B4 B8 6C   		db  0033H, 0020H, 006CH, 00B4H, 00B8H, 006CH		; d and e
(2)   68/     24E : 23 58 A8 F0 88 B0   		db  0023H, 0058H, 00A8H, 00F0H, 0088H, 00B0H		; f and g
(2)   69/     254 : 31 90 80 D0 B0 B0   		db  0031H, 0090H, 0080H, 00D0H, 00B0H, 00B0H		; h and i
(2)   70/     25A : 23 60 28 70 68 A8   		db  0023H, 0060H, 0028H, 0070H, 0068H, 00A8H		; j and k
(2)   71/     260 : 25 80 94 AA AA 6A   		db  0025H, 0080H, 0094H, 00AAH, 00AAH, 006AH		; l and m
(2)   72/     266 : 33 00 C8 B4 B4 A8   		db  0033H, 0000H, 00C8H, 00B4H, 00B4H, 00A8H		; n and o
(2)   73/     26C : 33 00 CC B4 CC 84   		db  0033H, 0000H, 00CCH, 00B4H, 00CCH, 0084H		; p and q
(2)   74/     272 : 23 00 58 B0 88 B0   		db  0023H, 0000H, 0058H, 00B0H, 0088H, 00B0H		; r and s
(2)   75/     278 : 23 80 E8 A8 A8 58   		db  0023H, 0080H, 00E8H, 00A8H, 00A8H, 0058H		; t and u
(2)   76/     27E : 35 00 B1 B5 B5 4A   		db  0035H, 0000H, 00B1H, 00B5H, 00B5H, 004AH		; v and w
(2)   77/     284 : 33 00 B4 4C 44 A8   		db  0033H, 0000H, 00B4H, 004CH, 0044H, 00A8H		; x and y
(2)   78/     28A : 33 0C E8 30 48 EC   		db  0033H, 000CH, 00E8H, 0030H, 0048H, 00ECH		; z and {
(2)   79/     290 : 13 E0 A0 90 A0 E0   		db  0013H, 00E0H, 00A0H, 0090H, 00A0H, 00E0H		; | and }
(2)   80/     296 : 41 00 50 A0 00 00   		db  0041H, 0000H, 0050H, 00A0H, 0000H, 0000H		; ~ and DEL
(2)   81/     29C :                     ;------------------------------------------------------------------------------------------
(1)  113/     29C : =>FALSE             			ELSEIF
(1)  114/     29C :                     				INCLUDE "Fonts.asm"
(1)  115/     29C :                     				INCLUDE "Text1861.asm"				
(1)  116/     29C : [110]               			ENDIF				
(1)  117/     29C :                     				INCLUDE "Tty1861.asm"
(2)    1/     29C :                     ; *******************************************************************************************
(2)    2/     29C :                     ; Tty1861 - Teletype Terminal functions
(2)    3/     29C :                     ; Copyright (c) 2020 by Gaston Williams
(2)    4/     29C :                     ;
(2)    5/     29C :                     ; These functions implement basic terminal functions in 64x64 bit graphics.
(2)    6/     29C :                     
(2)    7/     29C :                     ; Notes: 
(2)    8/     29C :                     ; 	1. Functions named with "Get" or "Put" are safe functions that check before updating
(2)    9/     29C :                     ;	and those named with "Read" or "Write" may not be safe, and the caller is responsible
(2)   10/     29C :                     ;	for checking to see if it's safe before calling them update the video data.
(2)   11/     29C :                     ;
(2)   12/     29C :                     ;	2. BeginTerminal should be called before any video, and the VideoOn and VideoOff 
(2)   13/     29C :                     ;	functions should be used to turn the 1861 on and off.
(2)   14/     29C :                     ;
(2)   15/     29C :                     ;	3. The WaitForSafeUpdate function can be used to check for the end of Video DMA 
(2)   16/     29C :                     ;	when it is safe to update video data.
(2)   17/     29C :                     ; *******************************************************************************************
(2)   18/     29C :                     
(2)   19/     29C : =>TRUE              			IF UseTty == "TRUE"
(2)   20/     29C :                     				
 AS V1.42 Beta [Bld 172] - Source File BasicTerminal.asm(Tty1861.asm) - Page 18 - 8/28/2020 13:37:18


(2)   21/     29C :                     ; =========================================================================================
(2)   22/     29C :                     ; Initialize system variables for TTY Terminal
(2)   23/     29C :                     ;
(2)   24/     29C :                     ; Note: *** MANDATORY *** This function must be called before any other Terminal functions
(2)   25/     29C :                     ;
(2)   26/     29C :                     ; Internal:
(2)   27/     29C :                     ; RF.0		Value to set Video Flag false
(2)   28/     29C :                     ; =========================================================================================
(2)   29/     29C :                     
(2)   30/     29C : E2                  BeginTerminal:		SEX  R2			; make sure X points to stack pointer
(2)   31/     29D :                     			
(2)   32/     29D : F8 00               			LDI  00H		; set the video flag to false
(2)   33/     29F : AF                  			PLO  RF						
(2)   34/     2A0 : (MACRO)             			CALL SetVideoFlag
(2)   34/     2A0 : D4                          SEP R4
(2)   34/     2A1 : 02 F5                       dw  SETVIDEOFLAG
(2)   35/     2A3 :                     						
(2)   36/     2A3 : (MACRO)             			CALL ClearScreen	; set cursor to home
(2)   36/     2A3 : D4                          SEP R4
(2)   36/     2A4 : 03 E7                       dw  CLEARSCREEN
(2)   37/     2A6 :                     			
(2)   38/     2A6 : =>FALSE             		IF BackBuffer <> "OFF"
(2)   39/     2A6 :                     			CALL CopyBackBuffer	; clear second video buffer
(2)   40/     2A6 : [38]                		ENDIF
(2)   41/     2A6 :                     
(2)   42/     2A6 :                     							
(2)   43/     2A6 : (MACRO)             			RETURN			
(2)   43/     2A6 : D5                          SEP R5
(2)   44/     2A7 :                     ;------------------------------------------------------------------------------------------
(2)   45/     2A7 :                     
(2)   46/     2A7 :                     ; =========================================================================================
(2)   47/     2A7 :                     ; VideoOn - Turn pixie video on and set the flag
(2)   48/     2A7 :                     ;
(2)   49/     2A7 :                     ; Note: *** MANDATORY *** This function must be used to turn the video on
(2)   50/     2A7 :                     ;
(2)   51/     2A7 :                     ; Internal:
(2)   52/     2A7 :                     ; RF.0		Value to set Video Flag true
(2)   53/     2A7 :                     ; =========================================================================================
(2)   54/     2A7 :                     
(2)   55/     2A7 : 69                  VideoOn:		INP 1			; turn 1861 video on
(2)   56/     2A8 :                     						
(2)   57/     2A8 : F8 FF               			LDI  00FFH		; set video flag to true (-1)
(2)   58/     2AA : AF                  			PLO  RF
(2)   59/     2AB : (MACRO)             			CALL SetVideoFlag	
(2)   59/     2AB : D4                          SEP R4
(2)   59/     2AC : 02 F5                       dw  SETVIDEOFLAG
(2)   60/     2AE :                     		
(2)   61/     2AE : (MACRO)             			RETURN
(2)   61/     2AE : D5                          SEP R5
(2)   62/     2AF :                     ;------------------------------------------------------------------------------------------
(2)   63/     2AF :                     
(2)   64/     2AF :                     ; =========================================================================================
(2)   65/     2AF :                     ; VideoOff - Turn pixie video off and clear the flag
(2)   66/     2AF :                     ;
(2)   67/     2AF :                     ; Note: *** MANDATORY *** This function must be used to turn the video off
(2)   68/     2AF :                     ;
(2)   69/     2AF :                     ; Internal:
(2)   70/     2AF :                     ; RD		Pointer to video flag
(2)   71/     2AF :                     ; =========================================================================================
(2)   72/     2AF :                     
 AS V1.42 Beta [Bld 172] - Source File BasicTerminal.asm(Tty1861.asm) - Page 19 - 8/28/2020 13:37:18


(2)   73/     2AF : 61                  VideoOff:		OUT 1			; turn 1861 video off
(2)   74/     2B0 :                     
(2)   75/     2B0 : 22                  			DEC  R2			; The output instruction increments stack
(2)   76/     2B1 :                     						; pointer, so back up the stack pointer to
(2)   77/     2B1 :                     						; point to its previous location.
(2)   78/     2B1 :                     						
(2)   79/     2B1 : F8 00               			LDI  00H		; set the video flag to false
(2)   80/     2B3 : AF                  			PLO  RF						
(2)   81/     2B4 : (MACRO)             			CALL SetVideoFlag
(2)   81/     2B4 : D4                          SEP R4
(2)   81/     2B5 : 02 F5                       dw  SETVIDEOFLAG
(2)   82/     2B7 :                     		
(2)   83/     2B7 : (MACRO)             			RETURN
(2)   83/     2B7 : D5                          SEP R5
(2)   84/     2B8 :                     ;------------------------------------------------------------------------------------------
(2)   85/     2B8 :                     
(2)   86/     2B8 :                     ; =========================================================================================
(2)   87/     2B8 :                     ; WaitForSafeUpdate -
(2)   88/     2B8 :                     ;		Check the 1861 video status and wait for DMA to complete before returning.
(2)   89/     2B8 :                     ;		When this function returns it is safe to make updates to the video.
(2)   90/     2B8 :                     ;		There will be time for about 8000 instruction cycles (at 2MHz) before the
(2)   91/     2B8 :                     ;		next DMA to occur.  All Get/Put video functions call this function before
(2)   92/     2B8 :                     ;		making any changes.  This logic is based on code found in Tom Pittman's, 
(2)   93/     2B8 :                     ;		Short Course In Programming, Chapter 7, Interrupts and DMA.
(2)   94/     2B8 :                     ;		
(2)   95/     2B8 :                     ;		Before DMA begins, EF1 is asserted for 28 instruction cycles, and before
(2)   96/     2B8 :                     ;		DMA ends EF1 is asserted for only 12 instruction cycles.  This code counts
(2)   97/     2B8 :                     ;		cycles while EF1 is asserted to determine when DMA has ended.
(2)   98/     2B8 :                     ;
(2)   99/     2B8 :                     ; Note: *REQUIRED* to guarantee safety before accessing video data. 
(2)  100/     2B8 :                     ;		Must call this function before calling any UNSAFE function.
(2)  101/     2B8 :                     ;
(2)  102/     2B8 :                     ; Internal:
(2)  103/     2B8 :                     ; RD 		Pointer to video flag
(2)  104/     2B8 :                     ; =========================================================================================
(2)  105/     2B8 :                     
(2)  106/     2B8 : (MACRO)             WaitForSafeUpdate: 	LOAD RD, VideoFlag	; set pointer to video flag						
(2)  106/     2B8 : F8 07                       LDI  lo(VIDEOFLAG)
(2)  106/     2BA : AD                          PLO  RD
(2)  106/     2BB : F8 7F                       LDI  hi(VIDEOFLAG)
(2)  106/     2BD : BD                          PHI  RD     
(2)  107/     2BE : 0D                  			LDN  RD			; check video flag so we don't wait forever
(2)  108/     2BF : 32 CE               			BZ   WFSU_Exit		; for an EF1 signal that never occurs.
(2)  109/     2C1 :                     						; Any updates are fine when video is off
(2)  110/     2C1 :                     			
(2)  111/     2C1 :                     
(2)  112/     2C1 : 34 C1               WFSU_Check_DMA:		B1   WFSU_Check_DMA	; wait for first EF1 siginal
(2)  113/     2C3 :                     		
(2)  114/     2C3 : F8 14               WFSU_Sync:		LDI  14H		; 20 instruction cycles
(2)  115/     2C5 :                     
(2)  116/     2C5 : 3C C5               WFSU_New_EF1:		BN1  WFSU_New_EF1	; wait for next EF1 signal to start count
(2)  117/     2C7 :                     
(2)  118/     2C7 : FF 02               WFSU_Count:		SMI  02			; count down by 2 and keep counting for 12
(2)  119/     2C9 : 34 C7               			B1   WFSU_Count		; (DMA end) or 28 (DMA begin) instructions
(2)  120/     2CB :                     			
(2)  121/     2CB : FE                  			SHL			; check sign bit to see if negative (20-28)
(2)  122/     2CC : 33 C3               			BDF  WFSU_Sync		; at DMA begin. DF = 1, means DMA begin
(2)  123/     2CE :                     						; and we must wait for the DMA end
(2)  124/     2CE :                     
(2)  125/     2CE : (MACRO)             WFSU_Exit:		RETURN			; return now that DMA has ended
 AS V1.42 Beta [Bld 172] - Source File BasicTerminal.asm(Tty1861.asm) - Page 20 - 8/28/2020 13:37:18


(2)  125/     2CE : D5                          SEP R5
(2)  126/     2CF :                     ;------------------------------------------------------------------------------------------			
(2)  127/     2CF :                     
(2)  128/     2CF :                     ; =========================================================================================
(2)  129/     2CF :                     ; Create a pointer into a Video buffer at the location specified by Y location
(2)  130/     2CF :                     ;
(2)  131/     2CF :                     ; Note: *Internal* - Used to manipulator pointer into video buffer
(2)  132/     2CF :                     ;
(2)  133/     2CF :                     ; Parameters:
(2)  134/     2CF :                     ; RE.0		X coordinate of the character
(2)  135/     2CF :                     ; RE.1		Y coordinate of the character
(2)  136/     2CF :                     ;
(2)  137/     2CF :                     ; Internal:
(2)  138/     2CF :                     ; R7.0          Swap Pointer for video buffers
(2)  139/     2CF :                     ;
(2)  140/     2CF :                     ; Return:
(2)  141/     2CF :                     ; RF		Pointer to video buffer with Y Offset
(2)  142/     2CF :                     ; =========================================================================================
(2)  143/     2CF :                     
(2)  144/     2CF : =>TRUE              VideoOffsetY:		IF BackBuffer == "OFF"
(2)  145/     2CF : F8 7D               				LDI  hi(DisplayBuffer)	; prepare the pointer to the video buffer
(2)  146/     2D1 : BF                  				PHI  RF
(2)  147/     2D2 : [144]               			ENDIF
(2)  148/     2D2 :                     
(2)  149/     2D2 : =>FALSE             			IF BackBuffer == "COPY"
(2)  150/     2D2 :                     				LDI  hi(DoubleBuffer)	; prepare the pointer to the back buffer
(2)  151/     2D2 :                     				PHI  RF
(2)  152/     2D2 : [149]               			ENDIF
(2)  153/     2D2 :                     
(2)  154/     2D2 : =>FALSE             			IF BackBuffer == "SWAP"
(2)  155/     2D2 :                     				GLO  R7			; prepare pointer to the current back buffer
(2)  156/     2D2 :                     				PHI  RF
(2)  157/     2D2 : [154]               			ENDIF					
(2)  158/     2D2 :                     			
(2)  159/     2D2 : 9E                  				GHI  RE			; get the y position into video buffer				
(2)  160/     2D3 :                     				
(2)  161/     2D3 : =>FALSE             			IF Resolution == "64x32"
(2)  162/     2D3 :                     				ANI  1FH		; between 0 - 31
(2)  163/     2D3 : [161]               			ENDIF
(2)  164/     2D3 :                     								
(2)  165/     2D3 : =>TRUE              			IF Resolution == "64x64"
(2)  166/     2D3 : FA 3F               				ANI  3FH		; or 0 - 63
(2)  167/     2D5 : [165]               			ENDIF
(2)  168/     2D5 : FE                  				SHL			; Convert Y value to position offset = (y * 8)
(2)  169/     2D6 : FE                  				SHL			
(2)  170/     2D7 : FE                  				SHL
(2)  171/     2D8 : AF                  				PLO  RF
(2)  172/     2D9 : 3B DF               				BNF  VY_Done
(2)  173/     2DB : 9F                  				GHI  RF
(2)  174/     2DC : FC 01               				ADI  01H
(2)  175/     2DE : BF                  				PHI  RF
(2)  176/     2DF :                     
(2)  177/     2DF : (MACRO)             VY_Done:			RETURN
(2)  177/     2DF : D5                          SEP R5
(2)  178/     2E0 :                     ;------------------------------------------------------------------------------------------
(2)  179/     2E0 :                     
(2)  180/     2E0 :                     
(2)  181/     2E0 :                     ; =========================================================================================
(2)  182/     2E0 :                     ; Add the X byte offset to a pointer into a Video buffer
(2)  183/     2E0 :                     ;
 AS V1.42 Beta [Bld 172] - Source File BasicTerminal.asm(Tty1861.asm) - Page 21 - 8/28/2020 13:37:18


(2)  184/     2E0 :                     ; Note: *Internal* - Used to manipulator pointer into video buffer
(2)  185/     2E0 :                     ;
(2)  186/     2E0 :                     ; Parameters:
(2)  187/     2E0 :                     ; RF		Pointer to video buffer with Y Offset
(2)  188/     2E0 :                     ; RE.0		X coordinate of the character
(2)  189/     2E0 :                     ; RE.1		Y coordinate of the character
(2)  190/     2E0 :                     ;
(2)  191/     2E0 :                     ; Return:
(2)  192/     2E0 :                     ; RF		Pointer to video buffer at X,Y byte Offset
(2)  193/     2E0 :                     ; RC.1         	X Offset byte value
(2)  194/     2E0 :                     ; RC.0		X Offset bit value
(2)  195/     2E0 :                     ; =========================================================================================
(2)  196/     2E0 :                     
(2)  197/     2E0 : 8E                  VideoOffsetX:		GLO  RE		; get the x bit position 
(2)  198/     2E1 : FA 07               			ANI  07H	; mask off all but lowest 3 bits
(2)  199/     2E3 : AC                  			PLO  RC		; save bit value in RC.0
(2)  200/     2E4 :                     				
(2)  201/     2E4 : 8E                  			GLO  RE		; get the x byte position into video buffer
(2)  202/     2E5 : FA 3F               			ANI  3FH        ; value 0 - 63
(2)  203/     2E7 : F6                  			SHR		; Convert x value to position offset = (x / 8)
(2)  204/     2E8 : F6                  			SHR			
(2)  205/     2E9 : F6                  			SHR
(2)  206/     2EA : BC                  			PHI  RC		; save byte value in RC.1
(2)  207/     2EB :                     						
(2)  208/     2EB :                     
(2)  209/     2EB : 73                  			STXD		; byte position offset in M(X)
(2)  210/     2EC : 60                  			IRX
(2)  211/     2ED :                     				
(2)  212/     2ED : 8F                  			GLO  RF		; advance the pointer coordinate by byte offset				
(2)  213/     2EE : F4                  			ADD		; add the offset to pointer					
(2)  214/     2EF : AF                  			PLO  RF		; save lower byte
(2)  215/     2F0 :                     			
(2)  216/     2F0 : 9F                  			GHI  RF		; update high byte if needed			
(2)  217/     2F1 : 7C 00               			ADCI 00H	; Add carry into high byte and save
(2)  218/     2F3 : BF                  			PHI  RF
(2)  219/     2F4 :                     				
(2)  220/     2F4 : (MACRO)             			RETURN
(2)  220/     2F4 : D5                          SEP R5
(2)  221/     2F5 :                     ;------------------------------------------------------------------------------------------
(2)  222/     2F5 :                     
(2)  223/     2F5 :                     ; =========================================================================================
(2)  224/     2F5 :                     ; SetVideoFlag - Set the video flag to false or true
(2)  225/     2F5 :                     ;
(2)  226/     2F5 :                     ; Note: *Internal* - Use VideoOn and VideOff to set or clear the video flag
(2)  227/     2F5 :                     ;
(2)  228/     2F5 :                     ; Parameters:
(2)  229/     2F5 :                     ; RF.0		Value for flag, zero for false, non-zero for true
(2)  230/     2F5 :                     ; Internal:
(2)  231/     2F5 :                     ; RD		Pointer to video flag
(2)  232/     2F5 :                     ; =========================================================================================
(2)  233/     2F5 : (MACRO)             SetVideoFlag:		LOAD RD, VideoFlag	; set pointer to video flag							
(2)  233/     2F5 : F8 07                       LDI  lo(VIDEOFLAG)
(2)  233/     2F7 : AD                          PLO  RD
(2)  233/     2F8 : F8 7F                       LDI  hi(VIDEOFLAG)
(2)  233/     2FA : BD                          PHI  RD     
(2)  234/     2FB : 8F                  			GLO  RF			; get the value for the flag
(2)  235/     2FC : 5D                  			STR  RD			; store the flag
(2)  236/     2FD :                     			
(2)  237/     2FD : (MACRO)             			RETURN
(2)  237/     2FD : D5                          SEP R5
 AS V1.42 Beta [Bld 172] - Source File BasicTerminal.asm(Tty1861.asm) - Page 22 - 8/28/2020 13:37:18


(2)  238/     2FE :                     ;------------------------------------------------------------------------------------------			
(2)  239/     2FE :                     
(2)  240/     2FE :                     ; =========================================================================================
(2)  241/     2FE :                     ; Clear a line of text on the video console (6 rows of pixels at 8 bytes per row) along
(2)  242/     2FE :                     ; with the 2 rows of the next row of text.
(2)  243/     2FE :                     ;
(2)  244/     2FE :                     ; Note:	*** UNSAFE *** This function does not check before accessing video data.
(2)  245/     2FE :                     ;		Must call WaitForSafeUpdate function before calling this function.
(2)  246/     2FE :                     ;
(2)  247/     2FE :                     ; Parameters:
(2)  248/     2FE :                     ; RE.0		X coordinate of the character
(2)  249/     2FE :                     ; RE.1		Y coordinate of the character
(2)  250/     2FE :                     ;
(2)  251/     2FE :                     ; Internal:
(2)  252/     2FE :                     ; RF		Pointer to video buffer
(2)  253/     2FE :                     ; RD		Counter
(2)  254/     2FE :                     ; R7.0          Swap Pointer for video buffers
(2)  255/     2FE :                     ; =========================================================================================
(2)  256/     2FE :                     
(2)  257/     2FE : (MACRO)             BlankLine:		CALL VideoOffsetY
(2)  257/     2FE : D4                          SEP R4
(2)  257/     2FF : 02 CF                       dw  VIDEOOFFSETY
(2)  258/     301 :                     										
(2)  259/     301 :                     					
(2)  260/     301 : F8 00               			LDI  00H	; load byte counter
(2)  261/     303 : BD                  			PHI  RD
(2)  262/     304 : AD                  			PLO  RD
(2)  263/     305 :                     
(2)  264/     305 : F8 00               BL_Loop:		LDI  00H
(2)  265/     307 : 5F                  			STR  RF
(2)  266/     308 : 1F                  			INC  RF
(2)  267/     309 : 1D                  			INC  RD
(2)  268/     30A :                     					
(2)  269/     30A : 8D                  			GLO  RD
(2)  270/     30B :                     			
(2)  271/     30B : FD 40               			SDI  40H	;do 64 times (6 rows of pixels x 8 bytes per row					
(2)  272/     30D :                     					; + 2 rows to overwrite existing text on line below.)				
(2)  273/     30D : CA 03 05            			LBNZ BL_Loop	
(2)  274/     310 :                     					
(2)  275/     310 : (MACRO)             			RETURN
(2)  275/     310 : D5                          SEP R5
(2)  276/     311 :                     ;------------------------------------------------------------------------------------------
(2)  277/     311 :                     
(2)  278/     311 :                     ; =========================================================================================
(2)  279/     311 :                     ; Advance cursor to next tab stop: 08H, 10H, 18H, 20H, 28H, 30H, 38H, 00H (NextLine)
(2)  280/     311 :                     ;
(2)  281/     311 :                     ; Note: Safe - This function does not access video data
(2)  282/     311 :                     ;
(2)  283/     311 :                     ; Parameters:
(2)  284/     311 :                     ; RE.0		X coordinate of the character
(2)  285/     311 :                     ; RE.1		Y coordinate of the character
(2)  286/     311 :                     ;
(2)  287/     311 :                     ;
(2)  288/     311 :                     ; Return:
(2)  289/     311 :                     ; RE.0		Updated X coordinate
(2)  290/     311 :                     ; RE.1		Updated Y coordinate
(2)  291/     311 :                     ; =========================================================================================
(2)  292/     311 :                     
(2)  293/     311 : 8E                  TabCursor:		GLO  RE			; get cursorX value
(2)  294/     312 : FC 08               			ADI  08H		; advance 8 pixels, 2 avg char widths
 AS V1.42 Beta [Bld 172] - Source File BasicTerminal.asm(Tty1861.asm) - Page 23 - 8/28/2020 13:37:18


(2)  295/     314 : FA 78               			ANI  78H		; mask off lower 3 bits (truncate to 8)
(2)  296/     316 : AE                  			PLO  RE			; set the x cursor to begining of line (zero) 
(2)  297/     317 :                     
(2)  298/     317 : FD 38               			SDI  38H		; check to see if we went past last tab stop
(2)  299/     319 : 33 1E               			BGE  TAB_Exit		; If not, we're done
(2)  300/     31B :                     			
(2)  301/     31B : (MACRO)             			CALL NextLine		; If we went over go to next line
(2)  301/     31B : D4                          SEP R4
(2)  301/     31C : 03 3C                       dw  NEXTLINE
(2)  302/     31E :                     			
(2)  303/     31E :                     								
(2)  304/     31E : (MACRO)             TAB_Exit:		RETURN
(2)  304/     31E : D5                          SEP R5
(2)  305/     31F :                     ;------------------------------------------------------------------------------------------
(2)  306/     31F :                     ; =========================================================================================
(2)  307/     31F :                     ; Move cursor back one position and delete the character
(2)  308/     31F :                     ;
(2)  309/     31F :                     ; Note:	*** UNSAFE *** This function does not check before accessing video data.
(2)  310/     31F :                     ;		Must call WaitForSafeUpdate function before calling this function.
(2)  311/     31F :                     
(2)  312/     31F :                     ;
(2)  313/     31F :                     ; Parameters:
(2)  314/     31F :                     ; RE.0		X coordinate of the character
(2)  315/     31F :                     ; RE.1		Y coordinate of the character
(2)  316/     31F :                     ; 
(2)  317/     31F :                     ; Internals:
(2)  318/     31F :                     ; RF.0		Width of average character to back up
(2)  319/     31F :                     ;
(2)  320/     31F :                     ; Return:
(2)  321/     31F :                     ; RE.0		Updated X coordinate
(2)  322/     31F :                     ; RE.1		Updated Y coordinate
(2)  323/     31F :                     ; =========================================================================================
(2)  324/     31F :                     
(2)  325/     31F : F8 04               Backspace:		LDI  04H		; average charcter width = 4 pixels
(2)  326/     321 : AF                  			PLO  RF			; RD.0 has width to back pu
(2)  327/     322 : (MACRO)             			CALL LeftCursor		; Move cursor back one character		
(2)  327/     322 : D4                          SEP R4
(2)  327/     323 : 03 8F                       dw  LEFTCURSOR
(2)  328/     325 :                     			
(2)  329/     325 : (MACRO)             			CALL BlankCharacter	; erase the previous character	
(2)  329/     325 : D4                          SEP R4
(2)  329/     326 : 03 5A                       dw  BLANKCHARACTER
(2)  330/     328 :                     								
(2)  331/     328 : (MACRO)             			RETURN
(2)  331/     328 : D5                          SEP R5
(2)  332/     329 :                     ;------------------------------------------------------------------------------------------
(2)  333/     329 :                     
(2)  334/     329 :                     
(2)  335/     329 :                     ; =========================================================================================
(2)  336/     329 :                     ; Create mask for blanking character bits in video buffer
(2)  337/     329 :                     ;
(2)  338/     329 :                     ; Note: *Internal* - Used for removing character pixels
(2)  339/     329 :                     ;
(2)  340/     329 :                     ; Parameters:
(2)  341/     329 :                     ; RE.0		X coordinate of the character
(2)  342/     329 :                     ; RE.1		Y coordinate of the character
(2)  343/     329 :                     ; RC.0		X Offset bit value
(2)  344/     329 :                     ; RC.1         	X Offset byte value
(2)  345/     329 :                     ;
(2)  346/     329 :                     ; Internals:
 AS V1.42 Beta [Bld 172] - Source File BasicTerminal.asm(Tty1861.asm) - Page 24 - 8/28/2020 13:37:18


(2)  347/     329 :                     ; RD.0          Counter for calculating Mask
(2)  348/     329 :                     ;
(2)  349/     329 :                     ; Returns:
(2)  350/     329 :                     ; RD.1		Mask for video bit values X byte
(2)  351/     329 :                     ; =========================================================================================
(2)  352/     329 : F8 FF               CreateMask:		LDI  00FFH		; load bit mask
(2)  353/     32B : BD                  			PHI  RD		
(2)  354/     32C : 8C                  			GLO  RC			; put the X offset bit value in counter
(2)  355/     32D : AD                  			PLO  RD			 
(2)  356/     32E :                     			
(2)  357/     32E : 32 37               CM_Test:		BZ   CM_Done		; keep going to counter exhausted
(2)  358/     330 : 9D                  			GHI  RD			; get the mask byte
(2)  359/     331 : F6                  			SHR			; shift once for each bit offset
(2)  360/     332 : BD                  			PHI  RD			; save mask value
(2)  361/     333 : 2D                  			DEC  RD			; decrement counter
(2)  362/     334 : 8D                  			GLO  RD			; test byte for zero
(2)  363/     335 : 30 2E               			BR   CM_Test
(2)  364/     337 :                     			
(2)  365/     337 : 9D                  CM_Done:		GHI  RD			; get mask value
(2)  366/     338 : FB FF               			XRI  00FFH		; invert all the bits for ANDing
(2)  367/     33A : BD                  			PHI  RD			; put bit mask back in RD.1
(2)  368/     33B :                     
(2)  369/     33B :                     
(2)  370/     33B : (MACRO)             			RETURN
(2)  370/     33B : D5                          SEP R5
(2)  371/     33C :                     ;------------------------------------------------------------------------------------------
(2)  372/     33C :                     
(2)  373/     33C :                     
(2)  374/     33C :                     ; =========================================================================================
(2)  375/     33C :                     ; Advance cursor to begining of the next line. 
(2)  376/     33C :                     ;
(2)  377/     33C :                     ; Note: Safe - This function does not access video data
(2)  378/     33C :                     ;
(2)  379/     33C :                     ; Parameters:
(2)  380/     33C :                     ; RE.0		X coordinate of the character
(2)  381/     33C :                     ; RE.1		Y coordinate of the character
(2)  382/     33C :                     ;
(2)  383/     33C :                     ;
(2)  384/     33C :                     ; Return:
(2)  385/     33C :                     ; RE.0		Updated X coordinate
(2)  386/     33C :                     ; RE.1		Updated Y coordinate
(2)  387/     33C :                     ; =========================================================================================
(2)  388/     33C :                     
(2)  389/     33C : F8 00               NextLine:		LDI  00H		; load zero and save as cursorX
(2)  390/     33E : AE                  			PLO  RE			; set the x cursor to begining of line (zero) 
(2)  391/     33F :                     
(2)  392/     33F : 9E                  			GHI  RE			; advance y cursor to point to next line									
(2)  393/     340 : FC 06               			ADI  06H                ; each line is 6 pixels high
(2)  394/     342 : BE                  			PHI  RE			; update cursorY 
(2)  395/     343 :                     			
(2)  396/     343 : =>TRUE              		IF Resolution == "64x64"	
(2)  397/     343 : FD 3C               			SDI  3CH		; check to see if we are past the end
(2)  398/     345 : 33 4A               			BGE NL_Exit             ; DF = 1 means haven't gone past 60 y pixels				
(2)  399/     347 : F8 02               			LDI  02H		; go back to top line
(2)  400/     349 : BE                  			PHI  RE			; update cursorY		
(2)  401/     34A : [396]               		ENDIF
(2)  402/     34A :                     			
(2)  403/     34A : =>FALSE             		IF Resolution == "64x32" 	
(2)  404/     34A :                     			SDI  1EH		; check to see if we are past the end
(2)  405/     34A :                     			BGE NL_Exit             ; DF = 1 means haven't gone past 30 y pixels				
 AS V1.42 Beta [Bld 172] - Source File BasicTerminal.asm(Tty1861.asm) - Page 25 - 8/28/2020 13:37:18


(2)  406/     34A :                     			LDI  01H		; go back to top line
(2)  407/     34A :                     			PHI  RE			; update cursorY
(2)  408/     34A : [403]               		ENDIF
(2)  409/     34A :                     								
(2)  410/     34A : (MACRO)             NL_Exit:		RETURN
(2)  410/     34A : D5                          SEP R5
(2)  411/     34B :                     ;------------------------------------------------------------------------------------------
(2)  412/     34B :                     
(2)  413/     34B :                     ; =========================================================================================
(2)  414/     34B :                     ; Advance cursor down to next line without changing x location
(2)  415/     34B :                     ;
(2)  416/     34B :                     ; Note:	*** UNSAFE *** This function does not check before accessing video data.
(2)  417/     34B :                     ;		Must call WaitForSafeUpdate function before calling this function.
(2)  418/     34B :                     ;
(2)  419/     34B :                     ; Parameters:
(2)  420/     34B :                     ; RE.0		X coordinate of the character
(2)  421/     34B :                     ; RE.1		Y coordinate of the character
(2)  422/     34B :                     ;
(2)  423/     34B :                     ;
(2)  424/     34B :                     ; Return:
(2)  425/     34B :                     ; RE.0		Updated X coordinate
(2)  426/     34B :                     ; RE.1		Updated Y coordinate
(2)  427/     34B :                     ; =========================================================================================
(2)  428/     34B :                     
(2)  429/     34B : 9E                  DownCursor:		GHI  RE			; move y by 6 pixels
(2)  430/     34C : FC 06               			ADI  06H
(2)  431/     34E : BE                  			PHI  RE			; save y
(2)  432/     34F :                     			
(2)  433/     34F : =>TRUE              		IF Resolution == "64x64"											
(2)  434/     34F : FD 3C               			SDI  3CH		; check y value to see if we went past 60
(2)  435/     351 : 33 56               			BGE  DC_Blank		; if not, erase the next line
(2)  436/     353 :                     			
(2)  437/     353 : F8 02               			LDI  02H		; if so, move back to first line at top of console
(2)  438/     355 : BE                  			PHI  RE			; save y
(2)  439/     356 : [433]               		ENDIF
(2)  440/     356 :                     			
(2)  441/     356 : =>FALSE             		IF Resolution == "64x32"	
(2)  442/     356 :                     			SDI  1EH		; check y value to see if we went past 30
(2)  443/     356 :                     			BGE  DC_Blank		; if not, erase the next line
(2)  444/     356 :                     			
(2)  445/     356 :                     			LDI  01H		; if so, move back to first line at top of console
(2)  446/     356 :                     			PHI  RE			; save y	
(2)  447/     356 : [441]               		ENDIF
(2)  448/     356 :                     			
(2)  449/     356 : (MACRO)             DC_Blank:		CALL BlankLine		; erase existing text
(2)  449/     356 : D4                          SEP R4
(2)  449/     357 : 02 FE                       dw  BLANKLINE
(2)  450/     359 :                     			
(2)  451/     359 :                     								
(2)  452/     359 : (MACRO)             			RETURN
(2)  452/     359 : D5                          SEP R5
(2)  453/     35A :                     ;------------------------------------------------------------------------------------------
(2)  454/     35A :                     
(2)  455/     35A :                     ; =========================================================================================
(2)  456/     35A :                     ; Clear character pixels from the current cursor location
(2)  457/     35A :                     ;
(2)  458/     35A :                     ; Note:	*** UNSAFE *** This function does not check before accessing video data.
(2)  459/     35A :                     ;		Must call WaitForSafeUpdate function before calling this function.
(2)  460/     35A :                     ;
(2)  461/     35A :                     ; Parameters:
 AS V1.42 Beta [Bld 172] - Source File BasicTerminal.asm(Tty1861.asm) - Page 26 - 8/28/2020 13:37:18


(2)  462/     35A :                     ; RE.0		X coordinate of the character
(2)  463/     35A :                     ; RE.1		Y coordinate of the character
(2)  464/     35A :                     ;
(2)  465/     35A :                     ; Internal:
(2)  466/     35A :                     ; RF		Pointer to video buffer
(2)  467/     35A :                     ; RD.1		Mask for video bit values X byte
(2)  468/     35A :                     ; RD.0		Counter
(2)  469/     35A :                     ; RC.0		X Offset bit value
(2)  470/     35A :                     ; RC.1         	X Offset byte value
(2)  471/     35A :                     ; =========================================================================================
(2)  472/     35A :                     
(2)  473/     35A : (MACRO)             BlankCharacter:		CALL VideoOffsetY	; set pointer to video at y location
(2)  473/     35A : D4                          SEP R4
(2)  473/     35B : 02 CF                       dw  VIDEOOFFSETY
(2)  474/     35D : (MACRO)             			CALL VideoOffsetX	; set pointer to video at x,y location
(2)  474/     35D : D4                          SEP R4
(2)  474/     35E : 02 E0                       dw  VIDEOOFFSETX
(2)  475/     360 :                     
(2)  476/     360 : 8E                  			GLO  RE			; check x location
(2)  477/     361 : 3A 68               			BNZ  BCH_GetMask	; if inside line, calculate masks
(2)  478/     363 :                     			
(2)  479/     363 : (MACRO)             			CALL BlankLine		; if we are the begining, just clear the line
(2)  479/     363 : D4                          SEP R4
(2)  479/     364 : 02 FE                       dw  BLANKLINE
(2)  480/     366 : 30 8E               			BR   BCH_Done			
(2)  481/     368 :                     						
(2)  482/     368 : (MACRO)             BCH_GetMask:		CALL CreateMask		; get the mask for video bits
(2)  482/     368 : D4                          SEP R4
(2)  482/     369 : 03 29                       dw  CREATEMASK
(2)  483/     36B :                     
(2)  484/     36B : F8 00               			LDI  00H		; initialize counter 
(2)  485/     36D : AD                  			PLO  RD			
(2)  486/     36E :                     			
(2)  487/     36E :                     
(2)  488/     36E : 9D                  BCH_Blank:		GHI  RD			; get mask and put at M(X)
(2)  489/     36F : 73                  			STXD
(2)  490/     370 : 60                  			IRX
(2)  491/     371 :                     			
(2)  492/     371 : 0F                  			LDN  RF			; load video byte
(2)  493/     372 : F2                  			AND  			; and with mask			
(2)  494/     373 : 5F                  			STR  RF			; put it back in memory
(2)  495/     374 :                     			
(2)  496/     374 : 9C                  			GHI  RC			; get the byte offset value
(2)  497/     375 : FD 07               			SDI  07H		; check for last byte
(2)  498/     377 : 32 7E               			BZ   BCH_LastByte	; don't blank next byte after last byte
(2)  499/     379 :                     			
(2)  500/     379 : F8 00               			LDI  00H		; blank out next byte after byte 0 to 6
(2)  501/     37B : 1F                  			INC  RF			; set video pointer to next byte
(2)  502/     37C : 5F                  			STR  RF			; blank out any remaining pixels
(2)  503/     37D : 2F                  			DEC  RF			; set video ptr back to x byte
(2)  504/     37E :                     			
(2)  505/     37E : 1D                  BCH_LastByte:		INC  RD			; increment counter
(2)  506/     37F : 8D                  			GLO  RD			; check if done 5 times
(2)  507/     380 : FD 05               			SDI  05H		
(2)  508/     382 : 32 8E               			BZ   BCH_Done		
(2)  509/     384 :                     			
(2)  510/     384 : 8F                  			GLO  RF			; Adjust pointer to next line of character
(2)  511/     385 : FC 08               			ADI  08H		; each line is 8 bytes 
(2)  512/     387 : AF                  			PLO  RF			; save low byte and adjust hi byte with carry
(2)  513/     388 :                     			
 AS V1.42 Beta [Bld 172] - Source File BasicTerminal.asm(Tty1861.asm) - Page 27 - 8/28/2020 13:37:18


(2)  514/     388 : 9F                  			GHI  RF
(2)  515/     389 : 7C 00               			ADCI 00H		
(2)  516/     38B : BF                  			PHI  RF			; video pointer now points to next line of character
(2)  517/     38C : 30 6E               			BR   BCH_Blank		; do next line
(2)  518/     38E :                     			
(2)  519/     38E : (MACRO)             BCH_Done:		RETURN
(2)  519/     38E : D5                          SEP R5
(2)  520/     38F :                     ;------------------------------------------------------------------------------------------
(2)  521/     38F :                     
(2)  522/     38F :                     
(2)  523/     38F :                     ; =========================================================================================
(2)  524/     38F :                     ; Move cursor backwards a number of pixel widths
(2)  525/     38F :                     ;
(2)  526/     38F :                     ; Note: Safe - This function does not access video data
(2)  527/     38F :                     ;
(2)  528/     38F :                     ; Parameters:
(2)  529/     38F :                     ; RF.0		Width to back up cursor
(2)  530/     38F :                     ; RE.0		X coordinate of the character
(2)  531/     38F :                     ; RE.1		Y coordinate of the character
(2)  532/     38F :                     ;
(2)  533/     38F :                     ;
(2)  534/     38F :                     ; Return:
(2)  535/     38F :                     ; RE.0		Updated X coordinate
(2)  536/     38F :                     ; RE.1		Updated Y coordinate
(2)  537/     38F :                     ; =========================================================================================
(2)  538/     38F :                     
(2)  539/     38F : 8E                  LeftCursor:		GLO  RE			; 
(2)  540/     390 : 32 9E               			BZ   LC_PreviousLine	; if begining of line, go back one line
(2)  541/     392 :                     			
(2)  542/     392 : 73                  			STXD 			; store x location it in M(X)
(2)  543/     393 : 60                  			IRX
(2)  544/     394 :                     			
(2)  545/     394 : 8F                  			GLO  RF			; get the pixel width
(2)  546/     395 :                     			
(2)  547/     395 : F5                  			SD   			; move x back RD.0 pixels
(2)  548/     396 : AE                  			PLO  RE			; save x										
(2)  549/     397 : 33 B3               			BGE  LC_Exit		; if positive or zero, we are done
(2)  550/     399 :                     			
(2)  551/     399 : F8 00               			LDI  00H		; don't back up before begining of line
(2)  552/     39B : AE                  			PLO  RE
(2)  553/     39C : 30 B3               			BR   LC_Exit		
(2)  554/     39E :                     			
(2)  555/     39E : 9E                  LC_PreviousLine:	GHI  RE
(2)  556/     39F : FF 06               			SMI  06H		; back up one line
(2)  557/     3A1 : BE                  			PHI  RE
(2)  558/     3A2 : 3B AD               			BL   LC_Home		; but don't go beyond home
(2)  559/     3A4 :                     			
(2)  560/     3A4 : F8 40               			LDI  40H		; set M(X) to end of line
(2)  561/     3A6 : 73                  			STXD 			; store eol in M(X)
(2)  562/     3A7 : 60                  			IRX
(2)  563/     3A8 :                     			
(2)  564/     3A8 : 8F                  			GLO  RF			; get the pixel width
(2)  565/     3A9 : F5                  			SD    			; back up from eol			
(2)  566/     3AA : AE                  			PLO  RE		
(2)  567/     3AB : 30 B3               			BR   LC_Exit
(2)  568/     3AD :                     			
(2)  569/     3AD : =>TRUE              LC_Home:	IF Resolution == "64x64"
(2)  570/     3AD : F8 02               			LDI  02H		; set y to first line
(2)  571/     3AF : BE                  			PHI  RE
(2)  572/     3B0 : [569]               		ENDIF
 AS V1.42 Beta [Bld 172] - Source File BasicTerminal.asm(Tty1861.asm) - Page 28 - 8/28/2020 13:37:18


(2)  573/     3B0 :                     		
(2)  574/     3B0 : =>FALSE             		IF Resolution == "64x32"	
(2)  575/     3B0 :                     			LDI  01H		; set y to first line
(2)  576/     3B0 :                     			PHI  RE
(2)  577/     3B0 : [574]               		ENDIF
(2)  578/     3B0 : F8 00               			LDI  00H		; set x to beginning
(2)  579/     3B2 : AE                  			PLO  RE
(2)  580/     3B3 :                     
(2)  581/     3B3 : (MACRO)             LC_Exit:		RETURN
(2)  581/     3B3 : D5                          SEP R5
(2)  582/     3B4 :                     ;------------------------------------------------------------------------------------------
(2)  583/     3B4 :                     
(2)  584/     3B4 :                     
(2)  585/     3B4 :                     ; =========================================================================================
(2)  586/     3B4 :                     ; Move cursor forwards a number of pixel widths
(2)  587/     3B4 :                     ;
(2)  588/     3B4 :                     ; Note: Safe - This function does not access video data
(2)  589/     3B4 :                     ;
(2)  590/     3B4 :                     ; Parameters:
(2)  591/     3B4 :                     ; RF.0		Width to advance cursor
(2)  592/     3B4 :                     ; RE.0		X coordinate of the character
(2)  593/     3B4 :                     ; RE.1		Y coordinate of the character
(2)  594/     3B4 :                     ;
(2)  595/     3B4 :                     ;
(2)  596/     3B4 :                     ; Return:
(2)  597/     3B4 :                     ; RE.0		Updated X coordinate
(2)  598/     3B4 :                     ; RE.1		Updated Y coordinate
(2)  599/     3B4 :                     ; =========================================================================================
(2)  600/     3B4 :                     
(2)  601/     3B4 : 8F                  RightCursor:		GLO  RF			; advance the x coordinate by the
(2)  602/     3B5 : 73                  			STXD			; width of the character + 1
(2)  603/     3B6 : 60                  			IRX			; store width in M(X)
(2)  604/     3B7 :                     			
(2)  605/     3B7 : 8E                  			GLO  RE
(2)  606/     3B8 : F4                  			ADD
(2)  607/     3B9 : FC 01               			ADI  01H
(2)  608/     3BB : AE                  			PLO  RE
(2)  609/     3BC :                     					
(2)  610/     3BC : FD 3C               			SDI  3CH		; check x value to see if we went past 60
(2)  611/     3BE : 33 CE               			BGE  RC_Exit
(2)  612/     3C0 :                     					
(2)  613/     3C0 : F8 00               			LDI  00H		; set x for beginning of next line and adjust y
(2)  614/     3C2 : AE                  			PLO  RE
(2)  615/     3C3 :                     								
(2)  616/     3C3 : 9E                  			GHI  RE			; move y by 6 pixels
(2)  617/     3C4 : FC 06               			ADI  06H
(2)  618/     3C6 : BE                  			PHI  RE
(2)  619/     3C7 :                     					
(2)  620/     3C7 : =>TRUE              		IF Resolution == "64x64"		
(2)  621/     3C7 : FD 3C               			SDI  3CH		; check y value to see if we went past 60
(2)  622/     3C9 : 33 CE               			BGE  RC_Exit
(2)  623/     3CB :                     			
(2)  624/     3CB : F8 02               			LDI  02H		; if so move back to first line at top of console
(2)  625/     3CD : BE                  			PHI  RE	
(2)  626/     3CE : [620]               		ENDIF
(2)  627/     3CE :                     		
(2)  628/     3CE : =>FALSE             		IF Resolution == "64x32"	
(2)  629/     3CE :                     			SDI  1EH		; check y value to see if we went past 30
(2)  630/     3CE :                     			BGE  RC_Exit
(2)  631/     3CE :                     						
 AS V1.42 Beta [Bld 172] - Source File BasicTerminal.asm(Tty1861.asm) - Page 29 - 8/28/2020 13:37:18


(2)  632/     3CE :                     			LDI  01H		; if so move back to first line at top of console
(2)  633/     3CE :                     			PHI  RE	
(2)  634/     3CE : [628]               		ENDIF
(2)  635/     3CE :                     
(2)  636/     3CE : (MACRO)             RC_Exit:		RETURN
(2)  636/     3CE : D5                          SEP R5
(2)  637/     3CF :                     ;------------------------------------------------------------------------------------------
(2)  638/     3CF :                     
(2)  639/     3CF :                     ; =========================================================================================
(2)  640/     3CF :                     ; Move cursor back one pixel position and clear the column
(2)  641/     3CF :                     ;
(2)  642/     3CF :                     ; Note:	*** UNSAFE *** This function does not check before accessing video data.
(2)  643/     3CF :                     ;		Must call WaitForSafeUpdate function before calling this function.
(2)  644/     3CF :                     ;
(2)  645/     3CF :                     ; Parameters:
(2)  646/     3CF :                     ; RE.0		X coordinate of the character
(2)  647/     3CF :                     ; RE.1		Y coordinate of the character
(2)  648/     3CF :                     ; 
(2)  649/     3CF :                     ; Internals:
(2)  650/     3CF :                     ; RF.0		Width of to back up
(2)  651/     3CF :                     ;
(2)  652/     3CF :                     ; Return:
(2)  653/     3CF :                     ; RE.0		Updated X coordinate
(2)  654/     3CF :                     ; RE.1		Updated Y coordinate
(2)  655/     3CF :                     ; =========================================================================================
(2)  656/     3CF :                     
(2)  657/     3CF : F8 01               Rubout:			LDI  01H		; rubout one column of pixels
(2)  658/     3D1 : AF                  			PLO  RF			; pixel width to back up
(2)  659/     3D2 : (MACRO)             			CALL LeftCursor		; Move cursor back one character		
(2)  659/     3D2 : D4                          SEP R4
(2)  659/     3D3 : 03 8F                       dw  LEFTCURSOR
(2)  660/     3D5 :                     			
(2)  661/     3D5 : (MACRO)             			CALL BlankCharacter	; erase the previous pixel column	
(2)  661/     3D5 : D4                          SEP R4
(2)  661/     3D6 : 03 5A                       dw  BLANKCHARACTER
(2)  662/     3D8 :                     								
(2)  663/     3D8 : (MACRO)             			RETURN
(2)  663/     3D8 : D5                          SEP R5
(2)  664/     3D9 :                     ;------------------------------------------------------------------------------------------
(2)  665/     3D9 :                     
(2)  666/     3D9 :                     ; =========================================================================================
(2)  667/     3D9 :                     ; Move cursor forward one pixel position
(2)  668/     3D9 :                     ;
(2)  669/     3D9 :                     ; Note: Safe - This function does not access video data
(2)  670/     3D9 :                     ;
(2)  671/     3D9 :                     ; Parameters:
(2)  672/     3D9 :                     ; RE.0		X coordinate of the character
(2)  673/     3D9 :                     ; RE.1		Y coordinate of the character
(2)  674/     3D9 :                     ; 
(2)  675/     3D9 :                     ; Internals:
(2)  676/     3D9 :                     ; RF.0		Width of character (zero)
(2)  677/     3D9 :                     ;
(2)  678/     3D9 :                     ; Return:
(2)  679/     3D9 :                     ; RE.0		Updated X coordinate
(2)  680/     3D9 :                     ; RE.1		Updated Y coordinate
(2)  681/     3D9 :                     ; =========================================================================================
(2)  682/     3D9 : F8 00               UnitSeparator: 		LDI  00H		; put zero as character width
(2)  683/     3DB : AF                  			PLO  RF			
(2)  684/     3DC :                     			
(2)  685/     3DC : (MACRO)             			CALL RightCursor	; advance cursor 0+1 pixel column
 AS V1.42 Beta [Bld 172] - Source File BasicTerminal.asm(Tty1861.asm) - Page 30 - 8/28/2020 13:37:18


(2)  685/     3DC : D4                          SEP R4
(2)  685/     3DD : 03 B4                       dw  RIGHTCURSOR
(2)  686/     3DF :                     			
(2)  687/     3DF : (MACRO)             			RETURN
(2)  687/     3DF : D5                          SEP R5
(2)  688/     3E0 :                     ; =========================================================================================
(2)  689/     3E0 :                     ; Clear line and position cursror at the begining of the current line. 
(2)  690/     3E0 :                     ;
(2)  691/     3E0 :                     ; Note:	*** UNSAFE *** This function does not check before accessing video data.
(2)  692/     3E0 :                     ;		Must call WaitForSafeUpdate function before calling this function.
(2)  693/     3E0 :                     ;
(2)  694/     3E0 :                     ; Parameters:
(2)  695/     3E0 :                     ; RE.0		X coordinate of the character
(2)  696/     3E0 :                     ; RE.1		Y coordinate of the character
(2)  697/     3E0 :                     ;
(2)  698/     3E0 :                     ;
(2)  699/     3E0 :                     ; Return:
(2)  700/     3E0 :                     ; RE.0		Updated X coordinate
(2)  701/     3E0 :                     ; RE.1		Updated Y coordinate
(2)  702/     3E0 :                     ; =========================================================================================
(2)  703/     3E0 :                     
(2)  704/     3E0 : F8 00               CancelLine:		LDI  00H		; load zero and save as cursorX
(2)  705/     3E2 : AE                  			PLO  RE			; set the x cursor to begining of line (zero) 
(2)  706/     3E3 :                     
(2)  707/     3E3 : (MACRO)             			CALL BlankLine		; clear the line
(2)  707/     3E3 : D4                          SEP R4
(2)  707/     3E4 : 02 FE                       dw  BLANKLINE
(2)  708/     3E6 :                     			
(2)  709/     3E6 : (MACRO)             			RETURN
(2)  709/     3E6 : D5                          SEP R5
(2)  710/     3E7 :                     ;------------------------------------------------------------------------------------------
(2)  711/     3E7 :                     
(2)  712/     3E7 :                     ; =========================================================================================
(2)  713/     3E7 :                     ; ClearScreen - Blank the video screen and home the cursor.
(2)  714/     3E7 :                     ;
(2)  715/     3E7 :                     ; Note: Safe - This function checks the video status before accessing video data
(2)  716/     3E7 :                     ;
(2)  717/     3E7 :                     ; Internal:
(2)  718/     3E7 :                     ; RF.1          zero value to fill screen
(2)  719/     3E7 :                     ; RE.0		X coordinate of the character
(2)  720/     3E7 :                     ; RE.1		Y coordinate of the character
(2)  721/     3E7 :                     ; =========================================================================================
(2)  722/     3E7 :                     
(2)  723/     3E7 : (MACRO)             ClearScreen: 		CALL WaitForSafeUpdate	;Wait for DMA to complete before clearing
(2)  723/     3E7 : D4                          SEP R4
(2)  723/     3E8 : 02 B8                       dw  WAITFORSAFEUPDATE
(2)  724/     3EA :                     			
(2)  725/     3EA : F8 00               			LDI  00H		; clear screen
(2)  726/     3EC : BF                  			PHI  RF
(2)  727/     3ED : (MACRO)             			CALL FillScreen
(2)  727/     3ED : D4                          SEP R4
(2)  727/     3EE : 00 75                       dw  FILLSCREEN
(2)  728/     3F0 :                     			
(2)  729/     3F0 : F8 00               			LDI  00H		; set x location to left margin			
(2)  730/     3F2 : AE                  			PLO  RE
(2)  731/     3F3 :                     			
(2)  732/     3F3 : =>TRUE              		IF Resolution == "64x64"
(2)  733/     3F3 : F8 02               			LDI  02H		; set y location to top line			
(2)  734/     3F5 : BE                  			PHI  RE
(2)  735/     3F6 : [732]               		ENDIF
 AS V1.42 Beta [Bld 172] - Source File BasicTerminal.asm(Tty1861.asm) - Page 31 - 8/28/2020 13:37:18


(2)  736/     3F6 :                     		
(2)  737/     3F6 : =>FALSE             		IF Resolution == "64x32"
(2)  738/     3F6 :                     			LDI  01H		; set y location to top line			
(2)  739/     3F6 :                     			PHI  RE
(2)  740/     3F6 : [737]               		ENDIF
(2)  741/     3F6 : (MACRO)             			CALL SetCursor		; send cursor home
(2)  741/     3F6 : D4                          SEP R4
(2)  741/     3F7 : 04 B5                       dw  SETCURSOR
(2)  742/     3F9 :                     					
(2)  743/     3F9 : (MACRO)             			RETURN
(2)  743/     3F9 : D5                          SEP R5
(2)  744/     3FA :                     ;------------------------------------------------------------------------------------------
(2)  745/     3FA :                     
(2)  746/     3FA :                     ; =========================================================================================
(2)  747/     3FA :                     ; GetChar - Get Character from Hex Input.  Wait for Input press and read Ascii character
(2)  748/     3FA :                     ;		from data bus.
(2)  749/     3FA :                     ;
(2)  750/     3FA :                     ; Note: Safe - This function does not access video data
(2)  751/     3FA :                     ;
(2)  752/     3FA :                     ; Returns:
(2)  753/     3FA :                     ; RC.0          Ascii character read from hex input
(2)  754/     3FA :                     ; =========================================================================================
(2)  755/     3FA :                     
(2)  756/     3FA : 3F FA               GetChar:		BN4  GetChar		; Wait for Input press
(2)  757/     3FC :                     
(2)  758/     3FC : 6C                  			INP  4			; Input stores byte in M(X)
(2)  759/     3FD :                     					
(2)  760/     3FD : FA 7F               			ANI  007FH		; Ascii is only 7 bits
(2)  761/     3FF : AC                  			PLO  RC
(2)  762/     400 :                     			
(2)  763/     400 : 37 00               GC_Release:		B4   GC_Release		; Wait for Input release
(2)  764/     402 :                     
(2)  765/     402 : (MACRO)             			RETURN
(2)  765/     402 : D5                          SEP R5
(2)  766/     403 :                     ;------------------------------------------------------------------------------------------
(2)  767/     403 :                     
(2)  768/     403 :                     ; =========================================================================================
(2)  769/     403 :                     ; WriteHexOutput - Write a value out to the hex display
(2)  770/     403 :                     ;
(2)  771/     403 :                     ; Note: Safe - This function does not access video data
(2)  772/     403 :                     ;
(2)  773/     403 :                     ; Parameters:
(2)  774/     403 :                     ; RC.0		Value to be shown on the hex display 
(2)  775/     403 :                     ; =========================================================================================
(2)  776/     403 :                     
(2)  777/     403 : 8C                  WriteHexOutput:		GLO  RC		; Get byte to display
(2)  778/     404 : 52                  			STR  R2		; Put byte on the stack
(2)  779/     405 :                     			
(2)  780/     405 : 64                  			OUT  4		; Show it. This increments stack pointer,
(2)  781/     406 : 22                  			DEC  R2		; so back up stack pointer to point to the end.
(2)  782/     407 :                     					
(2)  783/     407 : (MACRO)             			RETURN
(2)  783/     407 : D5                          SEP R5
(2)  784/     408 :                     ;------------------------------------------------------------------------------------------
(2)  785/     408 :                     
(2)  786/     408 :                     ; =========================================================================================
(2)  787/     408 :                     ; ReadHexInput - Read a byte from Hex Input.  Wait for Input press and read from data bus.
(2)  788/     408 :                     ;
(2)  789/     408 :                     ; Note: Safe - This function does not access video data
(2)  790/     408 :                     ;
 AS V1.42 Beta [Bld 172] - Source File BasicTerminal.asm(Tty1861.asm) - Page 32 - 8/28/2020 13:37:18


(2)  791/     408 :                     ; Returns:
(2)  792/     408 :                     ; RC.0          Byte read from hex input
(2)  793/     408 :                     ; =========================================================================================
(2)  794/     408 : 3F 08               ReadHexInput:		BN4  ReadHexInput	; Wait for Input press
(2)  795/     40A :                     
(2)  796/     40A : 6C                  			INP  4			; Input stores byte in M(X)					
(2)  797/     40B : AC                  			PLO  RC			; Save byte for return
(2)  798/     40C :                     			
(2)  799/     40C : 37 0C               RHI_Release:		B4   RHI_Release	; Wait for Input release
(2)  800/     40E :                     
(2)  801/     40E : (MACRO)             			RETURN			; return
(2)  801/     40E : D5                          SEP R5
(2)  802/     40F :                     ;------------------------------------------------------------------------------------------
(2)  803/     40F :                     
(2)  804/     40F :                     ; =========================================================================================
(2)  805/     40F :                     ; WaitForInput - Wait for Input key press and release.  No data is read.
(2)  806/     40F :                     ;
(2)  807/     40F :                     ; Note: Safe - This function does not access video data
(2)  808/     40F :                     ;
(2)  809/     40F :                     ; Returns:
(2)  810/     40F :                     ;
(2)  811/     40F :                     ; =========================================================================================
(2)  812/     40F :                     
(2)  813/     40F : 3F 0F               WaitForInput:		BN4  WaitForInput	; Wait for Input press
(2)  814/     411 :                     
(2)  815/     411 :                     			
(2)  816/     411 : 37 11               WFI_Release:		B4   WFI_Release	; Wait for Input release
(2)  817/     413 :                     
(2)  818/     413 : (MACRO)             			RETURN			; return
(2)  818/     413 : D5                          SEP R5
(2)  819/     414 :                     ;------------------------------------------------------------------------------------------
(2)  820/     414 :                     
(2)  821/     414 :                     
(2)  822/     414 :                     ; =========================================================================================
(2)  823/     414 :                     ; PutChar - Put a character on the screen and advance the cursor
(2)  824/     414 :                     ;
(2)  825/     414 :                     ; Note: Safe - This function checks the video status before accessing video data
(2)  826/     414 :                     ;
(2)  827/     414 :                     ; Parameters:
(2)  828/     414 :                     ; RC.0		ASCII code of the character (20 - 5F)
(2)  829/     414 :                     ;
(2)  830/     414 :                     ; Internal:
(2)  831/     414 :                     ; RC.1		Temporary values
(2)  832/     414 :                     ; RE.0		X coordinate of the character
(2)  833/     414 :                     ; RE.1		Y coordinate of the character
(2)  834/     414 :                     ; RF.0		Width of character from drawCharacter
(2)  835/     414 :                     ; =========================================================================================
(2)  836/     414 : (MACRO)             PutChar:		CALL WaitForSafeUpdate
(2)  836/     414 : D4                          SEP R4
(2)  836/     415 : 02 B8                       dw  WAITFORSAFEUPDATE
(2)  837/     417 :                     			
(2)  838/     417 : (MACRO)             			CALL WriteChar
(2)  838/     417 : D4                          SEP R4
(2)  838/     418 : 04 73                       dw  WRITECHAR
(2)  839/     41A :                     			
(2)  840/     41A : =>FALSE             		IF BackBuffer <> "OFF"
(2)  841/     41A :                     			CALL CopyBackBuffer 	; update SWAP or COPY buffer
(2)  842/     41A : [840]               		ENDIF	
(2)  843/     41A :                     					
(2)  844/     41A : (MACRO)             			RETURN
 AS V1.42 Beta [Bld 172] - Source File BasicTerminal.asm(Tty1861.asm) - Page 33 - 8/28/2020 13:37:18


(2)  844/     41A : D5                          SEP R5
(2)  845/     41B :                     ;------------------------------------------------------------------------------------------
(2)  846/     41B :                     
(2)  847/     41B :                     
(2)  848/     41B :                     ; =========================================================================================
(2)  849/     41B :                     ; HandleControlChar - Process a control character and move the cursor on screen
(2)  850/     41B :                     ;
(2)  851/     41B :                     ; Note:	*** UNSAFE *** This function does not check before accessing video data.
(2)  852/     41B :                     ;		Must call WaitForSafeUpdate function before calling this function.
(2)  853/     41B :                     ;
(2)  854/     41B :                     ; Parameters:
(2)  855/     41B :                     ; RC.0		ASCII code of the character (20 - 5F)
(2)  856/     41B :                     ; RE.0		X coordinate of the character
(2)  857/     41B :                     ; RE.1		Y coordinate of the character
(2)  858/     41B :                     
(2)  859/     41B :                     ; Internals:
(2)  860/     41B :                     ; RC.1		Temporary values
(2)  861/     41B :                     ; RF.0		Width of character 
(2)  862/     41B :                     ;
(2)  863/     41B :                     ; Returns:
(2)  864/     41B :                     ; RE.0		Updated X coordinate of the character
(2)  865/     41B :                     ; RE.1		Updated Y coordinate of the character
(2)  866/     41B :                     ; =========================================================================================
(2)  867/     41B : 8C                  HandleControlChar:	GLO  RC			; get the character
(2)  868/     41C : FD 0A               			SDI  0AH		; check for newline
(2)  869/     41E : 32 6D               			BZ   HCC_NewLine
(2)  870/     420 :                     										
(2)  871/     420 : 8C                  			GLO  RC			; get the character
(2)  872/     421 : FD 0D               			SDI  0DH		; check for carriage return
(2)  873/     423 : 32 6D               			BZ   HCC_NewLine
(2)  874/     425 :                     			
(2)  875/     425 : 8C                  			GLO  RC			; get the character
(2)  876/     426 : FD 0C               			SDI  0CH		; check for form feed
(2)  877/     428 : 32 68               			BZ   HCC_FormFeed
(2)  878/     42A :                     			
(2)  879/     42A : 8C                  			GLO  RC			; get the character
(2)  880/     42B : FD 09               			SDI  09H		; check for tab
(2)  881/     42D : 32 5E               			BZ   HCC_Tab
(2)  882/     42F :                     			
(2)  883/     42F : 8C                  			GLO  RC			; get the character
(2)  884/     430 : FD 0B               			SDI  0BH		; check for vertical tab
(2)  885/     432 : 32 63               			BZ   HCC_VTab
(2)  886/     434 :                     			
(2)  887/     434 : 8C                  			GLO  RC			; get the character
(2)  888/     435 : FD 08               			SDI  08H		; check for backspace
(2)  889/     437 : 32 59               			BZ   HCC_Backspace	
(2)  890/     439 :                     			
(2)  891/     439 : 8C                  			GLO  RC			; get the character 
(2)  892/     43A : FD 7F               			SDI  7FH		; check for del
(2)  893/     43C : 32 54               			BZ   HCC_Del
(2)  894/     43E :                     			
(2)  895/     43E : 8C                  			GLO  RC			; get the character
(2)  896/     43F : FD 18               			SDI  18H		; check for cancel the line
(2)  897/     441 : 32 4F               			BZ   HCC_Cancel
(2)  898/     443 :                     			
(2)  899/     443 : 8C                  			GLO  RC			; get character		
(2)  900/     444 : FD 1F               			SDI  1FH		; check for unit separator
(2)  901/     446 : 32 48               			BZ   HCC_Unit
(2)  902/     448 :                     			
(2)  903/     448 : (MACRO)             HCC_Unit:		CALL UnitSeparator	; advance cursor 1 pixel column space
 AS V1.42 Beta [Bld 172] - Source File BasicTerminal.asm(Tty1861.asm) - Page 34 - 8/28/2020 13:37:18


(2)  903/     448 : D4                          SEP R4
(2)  903/     449 : 03 D9                       dw  UNITSEPARATOR
(2)  904/     44B : 30 72               			BR   HCC_Exit		
(2)  905/     44D :                     			
(2)  906/     44D : 30 72               			BR   HCC_Exit		; ignore everything else
(2)  907/     44F :                     
(2)  908/     44F : (MACRO)             HCC_Cancel:		CALL CancelLine		; erase the current line
(2)  908/     44F : D4                          SEP R4
(2)  908/     450 : 03 E0                       dw  CANCELLINE
(2)  909/     452 : 30 72               			BR   HCC_Exit
(2)  910/     454 :                     
(2)  911/     454 : (MACRO)             HCC_Del:		CALL Rubout		; del backs up and rubs out one column			
(2)  911/     454 : D4                          SEP R4
(2)  911/     455 : 03 CF                       dw  RUBOUT
(2)  912/     457 : 30 72               			BR   HCC_Exit
(2)  913/     459 :                     			
(2)  914/     459 : (MACRO)             HCC_Backspace:		CALL Backspace		; move cursor back and delete a character
(2)  914/     459 : D4                          SEP R4
(2)  914/     45A : 03 1F                       dw  BACKSPACE
(2)  915/     45C : 30 72               			BR   HCC_Exit		
(2)  916/     45E :                     
(2)  917/     45E : (MACRO)             HCC_Tab:		CALL TabCursor		; move to next tab stop
(2)  917/     45E : D4                          SEP R4
(2)  917/     45F : 03 11                       dw  TABCURSOR
(2)  918/     461 : 30 72               			BR   HCC_Exit
(2)  919/     463 :                     			
(2)  920/     463 : (MACRO)             HCC_VTab:		CALL DownCursor		; move to next line, same x position
(2)  920/     463 : D4                          SEP R4
(2)  920/     464 : 03 4B                       dw  DOWNCURSOR
(2)  921/     466 : 30 72               			BR   HCC_Exit
(2)  922/     468 :                     
(2)  923/     468 : (MACRO)             HCC_FormFeed:		CALL ClearScreen	; form feed clears the screen			
(2)  923/     468 : D4                          SEP R4
(2)  923/     469 : 03 E7                       dw  CLEARSCREEN
(2)  924/     46B : 30 72               			BR   HCC_Exit		
(2)  925/     46D :                     										
(2)  926/     46D : (MACRO)             HCC_NewLine:		CALL NextLine		; go to next line and end			
(2)  926/     46D : D4                          SEP R4
(2)  926/     46E : 03 3C                       dw  NEXTLINE
(2)  927/     470 : 30 72               			BR   HCC_Exit
(2)  928/     472 :                     							
(2)  929/     472 : (MACRO)             HCC_Exit:		RETURN
(2)  929/     472 : D5                          SEP R5
(2)  930/     473 :                     ;------------------------------------------------------------------------------------------
(2)  931/     473 :                     
(2)  932/     473 :                     ; =========================================================================================
(2)  933/     473 :                     ; WriteChar - Write a character on the screen and advance the cursor
(2)  934/     473 :                     ;
(2)  935/     473 :                     ; Note:	*** UNSAFE *** This function does not check before accessing video data.
(2)  936/     473 :                     ;		Must call WaitForSafeUpdate function before calling this function.
(2)  937/     473 :                     ;
(2)  938/     473 :                     ; Parameters:
(2)  939/     473 :                     ; RC.0		ASCII code of the character (20 - 5F)
(2)  940/     473 :                     ;
(2)  941/     473 :                     ; Internal:
(2)  942/     473 :                     ; RC.1		Temporary values
(2)  943/     473 :                     ; RE.0		X coordinate of the character
(2)  944/     473 :                     ; RE.1		Y coordinate of the character
(2)  945/     473 :                     ; RF.0		Width of character from drawCharacter
(2)  946/     473 :                     ; =========================================================================================
 AS V1.42 Beta [Bld 172] - Source File BasicTerminal.asm(Tty1861.asm) - Page 35 - 8/28/2020 13:37:18


(2)  947/     473 :                     
(2)  948/     473 : (MACRO)             WriteChar:		CALL GetCursor
(2)  948/     473 : D4                          SEP R4
(2)  948/     474 : 04 C6                       dw  GETCURSOR
(2)  949/     476 :                     								
(2)  950/     476 : 8E                  			GLO  RE			; get the x location
(2)  951/     477 :                     													
(2)  952/     477 : 3A 7C               			BNZ  WC_SetChar		; check for beginning of new line
(2)  953/     479 : (MACRO)             			CALL BlankLine		; if at begining, blank the line
(2)  953/     479 : D4                          SEP R4
(2)  953/     47A : 02 FE                       dw  BLANKLINE
(2)  954/     47C :                     			
(2)  955/     47C : 8C                  WC_SetChar:		GLO  RC			; check for DEL the only control char
(2)  956/     47D : FD 7F               			SDI  7FH		; that is greater than 20H
(2)  957/     47F : 32 86               			BZ   WC_Control		
(2)  958/     481 :                     															
(2)  959/     481 : 8C                  			GLO  RC                 ; get the character
(2)  960/     482 : FF 20               			SMI  20H		; check for any printable character
(2)  961/     484 : 33 8B               			BGE  WC_Draw		
(2)  962/     486 :                     										
(2)  963/     486 : (MACRO)             WC_Control:		CALL HandleControlChar	; everthing else is a control character
(2)  963/     486 : D4                          SEP R4
(2)  963/     487 : 04 1B                       dw  HANDLECONTROLCHAR
(2)  964/     489 : 30 9A               			BR   WC_UpdateCursor	; save cursor changes after control char
(2)  965/     48B :                     				
(2)  966/     48B : 8E                  WC_Draw:		GLO  RE			; push RE with cursor location onto the stack
(2)  967/     48C : 73                  			STXD
(2)  968/     48D : 9E                  			GHI  RE
(2)  969/     48E : 73                  			STXD 
(2)  970/     48F :                     			
(2)  971/     48F : (MACRO)             			CALL DrawCharacter	; write the chracter
(2)  971/     48F : D4                          SEP R4
(2)  971/     490 : 01 00                       dw  DRAWCHARACTER
(2)  972/     492 :                     								
(2)  973/     492 : 60                  			IRX					
(2)  974/     493 : 72                  			LDXA
(2)  975/     494 : BE                  			PHI  RE			; restore RE with cursor location
(2)  976/     495 : F0                  			LDX
(2)  977/     496 : AE                  			PLO  RE				
(2)  978/     497 :                     			
(2)  979/     497 : (MACRO)             			CALL RightCursor	; advance cursor by character width + 1
(2)  979/     497 : D4                          SEP R4
(2)  979/     498 : 03 B4                       dw  RIGHTCURSOR
(2)  980/     49A :                     			
(2)  981/     49A : (MACRO)             WC_UpdateCursor:	CALL SetCursor
(2)  981/     49A : D4                          SEP R4
(2)  981/     49B : 04 B5                       dw  SETCURSOR
(2)  982/     49D :                     					
(2)  983/     49D : (MACRO)             WC_Exit:		RETURN
(2)  983/     49D : D5                          SEP R5
(2)  984/     49E :                     ;------------------------------------------------------------------------------------------
(2)  985/     49E :                     
(2)  986/     49E :                     ; =========================================================================================
(2)  987/     49E :                     ; PutString - Read characters from a string and write to video until a null is read.
(2)  988/     49E :                     ; Parameters:
(2)  989/     49E :                     ; RF 	- pointer to String
(2)  990/     49E :                     ;
(2)  991/     49E :                     ; Note: Safe - This function checks the video status before accessing video data
(2)  992/     49E :                     ;
(2)  993/     49E :                     ; Internal:
 AS V1.42 Beta [Bld 172] - Source File BasicTerminal.asm(Tty1861.asm) - Page 36 - 8/28/2020 13:37:18


(2)  994/     49E :                     ; RC.0	- character value read from input
(2)  995/     49E :                     ; =========================================================================================
(2)  996/     49E :                     
(2)  997/     49E : (MACRO)             PutString:		CALL WaitForSafeUpdate	
(2)  997/     49E : D4                          SEP R4
(2)  997/     49F : 02 B8                       dw  WAITFORSAFEUPDATE
(2)  998/     4A1 :                     
(2)  999/     4A1 : 0F                  PS_WriteString:		LDN  RF			; get character, exit if 0 (null)
(2) 1000/     4A2 : AC                  			PLO  RC
(2) 1001/     4A3 : 32 B4               			BZ   PS_Exit
(2) 1002/     4A5 : 1F                  			INC  RF
(2) 1003/     4A6 :                     					
(2) 1004/     4A6 : 8F                  			GLO  RF			; push RF onto the stack
(2) 1005/     4A7 : 73                  			STXD
(2) 1006/     4A8 : 9F                  			GHI  RF
(2) 1007/     4A9 : 73                  			STXD
(2) 1008/     4AA :                     		
(2) 1009/     4AA :                     					
(2) 1010/     4AA : (MACRO)             			CALL WriteChar		; write character to video
(2) 1010/     4AA : D4                          SEP R4
(2) 1010/     4AB : 04 73                       dw  WRITECHAR
(2) 1011/     4AD :                     						; ok to use write since we know it's safe
(2) 1012/     4AD :                     			
(2) 1013/     4AD : 60                  			IRX			; restore RF from stack
(2) 1014/     4AE : 72                  			LDXA
(2) 1015/     4AF : BF                  			PHI  RF
(2) 1016/     4B0 : F0                  			LDX
(2) 1017/     4B1 : AF                  			PLO  RF
(2) 1018/     4B2 :                     					
(2) 1019/     4B2 : 30 A1               			BR PS_WriteString	; continue with next character until null
(2) 1020/     4B4 :                     			
(2) 1021/     4B4 :                     
(2) 1022/     4B4 : =>FALSE             PS_Exit:	IF BackBuffer <> "OFF"
(2) 1023/     4B4 :                     			CALL CopyBackBuffer 	; update SWAP or COPY buffer
(2) 1024/     4B4 : [1022]              		ENDIF	
(2) 1025/     4B4 :                     
(2) 1026/     4B4 : (MACRO)             			RETURN
(2) 1026/     4B4 : D5                          SEP R5
(2) 1027/     4B5 :                     ;------------------------------------------------------------------------------------------
(2) 1028/     4B5 :                     ; =========================================================================================
(2) 1029/     4B5 :                     ; SetCursor - Save the Cursor value into memory
(2) 1030/     4B5 :                     ;
(2) 1031/     4B5 :                     ; Note: Safe - This function does not access video data
(2) 1032/     4B5 :                     ;
(2) 1033/     4B5 :                     ; Parameters:
(2) 1034/     4B5 :                     ; RE.0		X coordinate of the character
(2) 1035/     4B5 :                     ; RE.1		Y coordinate of the character
(2) 1036/     4B5 :                     ;
(2) 1037/     4B5 :                     ; Internal:
(2) 1038/     4B5 :                     ; RD            Pointer to CursorY and CursorX
(2) 1039/     4B5 :                     ; =========================================================================================
(2) 1040/     4B5 : (MACRO)             SetCursor:		LOAD RD, CursorX	; set the x cursor							
(2) 1040/     4B5 : F8 05                       LDI  lo(CURSORX)
(2) 1040/     4B7 : AD                          PLO  RD
(2) 1040/     4B8 : F8 7F                       LDI  hi(CURSORX)
(2) 1040/     4BA : BD                          PHI  RD     
(2) 1041/     4BB : 8E                  			GLO  RE			; get character x location
(2) 1042/     4BC : 5D                  			STR  RD			; save the x cursor value	
(2) 1043/     4BD :                     											
(2) 1044/     4BD : (MACRO)             			LOAD RD, CursorY	; set the y cursor													
 AS V1.42 Beta [Bld 172] - Source File BasicTerminal.asm(Tty1861.asm) - Page 37 - 8/28/2020 13:37:18


(2) 1044/     4BD : F8 06                       LDI  lo(CURSORY)
(2) 1044/     4BF : AD                          PLO  RD
(2) 1044/     4C0 : F8 7F                       LDI  hi(CURSORY)
(2) 1044/     4C2 : BD                          PHI  RD     
(2) 1045/     4C3 : 9E                  			GHI  RE			; get character y location
(2) 1046/     4C4 : 5D                  			STR  RD			; save the y cursor value												
(2) 1047/     4C5 :                     					
(2) 1048/     4C5 : (MACRO)             			RETURN
(2) 1048/     4C5 : D5                          SEP R5
(2) 1049/     4C6 :                     ;------------------------------------------------------------------------------------------
(2) 1050/     4C6 :                     
(2) 1051/     4C6 :                     ; =========================================================================================
(2) 1052/     4C6 :                     ; GetCursor - Read the Cursor value from memory
(2) 1053/     4C6 :                     ; 
(2) 1054/     4C6 :                     ; Note: Safe - This function does not access video data
(2) 1055/     4C6 :                     :
(2) 1056/     4C6 :                     ; Parameters:
(2) 1057/     4C6 :                     ;
(2) 1058/     4C6 :                     ; Internal:
(2) 1059/     4C6 :                     ; RD            Pointer to CursorY and CursorX
(2) 1060/     4C6 :                     ;
(2) 1061/     4C6 :                     ; Returns:
(2) 1062/     4C6 :                     ; RE.0		X coordinate of the character
(2) 1063/     4C6 :                     ; RE.1		Y coordinate of the character
(2) 1064/     4C6 :                     ; =========================================================================================
(2) 1065/     4C6 : (MACRO)             GetCursor:		LOAD RD, CursorX	; get the x cursor							
(2) 1065/     4C6 : F8 05                       LDI  lo(CURSORX)
(2) 1065/     4C8 : AD                          PLO  RD
(2) 1065/     4C9 : F8 7F                       LDI  hi(CURSORX)
(2) 1065/     4CB : BD                          PHI  RD     
(2) 1066/     4CC : 0D                  			LDN  RD			; load the x cursor value					
(2) 1067/     4CD : AE                  			PLO  RE			; set character x location
(2) 1068/     4CE :                     			
(2) 1069/     4CE : (MACRO)             			LOAD RD, CursorY	; get the y cursor										
(2) 1069/     4CE : F8 06                       LDI  lo(CURSORY)
(2) 1069/     4D0 : AD                          PLO  RD
(2) 1069/     4D1 : F8 7F                       LDI  hi(CURSORY)
(2) 1069/     4D3 : BD                          PHI  RD     
(2) 1070/     4D4 : 0D                  			LDN  RD			; load the y cursor value											
(2) 1071/     4D5 : BE                  			PHI  RE			; set character y location
(2) 1072/     4D6 :                     					
(2) 1073/     4D6 : (MACRO)             			RETURN
(2) 1073/     4D6 : D5                          SEP R5
(2) 1074/     4D7 :                     ;------------------------------------------------------------------------------------------
(2) 1075/     4D7 :                     
(2) 1076/     4D7 :                     
(2) 1077/     4D7 :                     
(2) 1078/     4D7 : [19]                					ENDIF
(1)  118/     4D7 : [109]               		ENDIF
(1)  119/     4D7 :                     		
(1)  120/     4D7 : =>FALSE             		IF Resolution == "64x32"				
(1)  121/     4D7 :                     			IF BackBuffer == "OFF"
(1)  122/     4D7 :                     				INCLUDE "Text1861.asm"							
(1)  123/     4D7 :                     				INCLUDE "Fonts.asm"
(1)  124/     4D7 :                     				INCLUDE "Tty1861.asm"
(1)  125/     4D7 : [121]               			ENDIF
(1)  126/     4D7 :                     			
(1)  127/     4D7 :                     			IF BackBuffer == "COPY"
(1)  128/     4D7 :                     				INCLUDE "Fonts.asm"
(1)  129/     4D7 :                     				INCLUDE "Text1861.asm"	
 AS V1.42 Beta [Bld 172] - Source File BasicTerminal.asm(Initialize.asm) - Page 38 - 8/28/2020 13:37:18


(1)  130/     4D7 :                     				INCLUDE "Tty1861.asm"
(1)  131/     4D7 : [127]               			ENDIF
(1)  132/     4D7 :                     			
(1)  133/     4D7 :                     			IF BackBuffer == "SWAP"			
(1)  134/     4D7 :                     				INCLUDE "Tty1861.asm"								
(1)  135/     4D7 :                     				INCLUDE "Text1861.asm"					
(1)  136/     4D7 :                     				INCLUDE "Fonts.asm"
(1)  137/     4D7 : [133]               			ENDIF				
(1)  138/     4D7 :                     				
(1)  139/     4D7 : [120]               		ENDIF
(1)  140/     4D7 :                     		
(1)  141/     4D7 :                     			; pad compiled code to end of page to avoid page boundary errors 	
(1)  142/     4D7 :                     				INCLUDE "Padding.asm"  
(2)    1/     4D7 :                     ; *****************************************************************************************
(2)    2/     4D7 :                     ; Padding - Code with 64x64 resolution and the Swap and Copy BackBuffer options assembles  
(2)    3/     4D7 :                     ;	    to near the end of a page boundary.  This file contains padding definitions to 
(2)    4/     4D7 :                     ;           prevent errors in user code caused by branches straddling a page boundary.  
(2)    5/     4D7 :                     ;	    This can cause 'jump target not on same page' errors when assembling user code.
(2)    6/     4D7 :                     ;
(2)    7/     4D7 :                     ; Copyright (c) 2020 by Gaston Williams
(2)    8/     4D7 :                     ; *****************************************************************************************
(2)    9/     4D7 :                     
(2)   10/     4D7 :                     ; =========================================================================================
(2)   11/     4D7 :                     ; Padding for more than 16 bytes is commented out.
(2)   12/     4D7 :                     ; =========================================================================================
(2)   13/     4D7 :                     		
(2)   14/     4D7 : =>TRUE              		IF Resolution == "64x64"
(2)   15/     4D7 : =>FALSE             			IF BackBuffer == "COPY"
(2)   16/     4D7 :                     				db 7 dup 00H
(2)   17/     4D7 : [15]                			ENDIF	
(2)   18/     4D7 :                     			
(2)   19/     4D7 : =>FALSE             			IF BackBuffer == "SWAP"
(2)   20/     4D7 :                     				db 13 dup 00H
(2)   21/     4D7 : [19]                			ENDIF				
(2)   22/     4D7 :                     			
(2)   23/     4D7 :                     			; Uncomment the lines below if there's a boundary issue with 64x64
(2)   24/     4D7 :                     			; resolution user code when assembled with the BackBuffer option "OFF"
(2)   25/     4D7 :                     	
(2)   26/     4D7 :                     			;IF BackBuffer == "OFF"
(2)   27/     4D7 :                     			;	db 41 dup 00H
(2)   28/     4D7 :                     			;ENDIF
(2)   29/     4D7 :                     			
(2)   30/     4D7 : [14]                		ENDIF
(2)   31/     4D7 :                     		
(2)   32/     4D7 : =>FALSE             		IF Resolution == "64x32"
(2)   33/     4D7 :                     			; Uncomment the lines below if there's a boundary issue with 64x32
(2)   34/     4D7 :                     			; resolution user code when assembled with the BackBuffer option "COPY"
(2)   35/     4D7 :                     			
(2)   36/     4D7 :                     			;IF BackBuffer == "COPY"
(2)   37/     4D7 :                     			;	db 24 dup 00H
(2)   38/     4D7 :                     			;ENDIF
(2)   39/     4D7 :                     
(2)   40/     4D7 :                     			; Uncomment the lines below if there's a boundary issue with 64x32
(2)   41/     4D7 :                     			; resolution user code when assembled with the BackBuffer option "SWAP"
(2)   42/     4D7 :                     			
(2)   43/     4D7 :                     			;IF BackBuffer == "SWAP"
(2)   44/     4D7 :                     			;	db 32 dup 00H
(2)   45/     4D7 :                     			;ENDIF
(2)   46/     4D7 :                     			
(2)   47/     4D7 :                     			; Uncomment the lines below if there's a boundary issue with 64x32
 AS V1.42 Beta [Bld 172] - Source File BasicTerminal.asm(Padding.asm) - Page 39 - 8/28/2020 13:37:18


(2)   48/     4D7 :                     			; resolution user code when assembled with the BackBuffer option "OFF"
(2)   49/     4D7 :                     	
(2)   50/     4D7 :                     			;IF BackBuffer == "OFF"
(2)   51/     4D7 :                     			;	db 56 dup 00H
(2)   52/     4D7 :                     			;ENDIF			
(2)   53/     4D7 :                     		
(2)   54/     4D7 : [32]                		ENDIF
(2)   55/     4D7 :                     ;------------------------------------------------------------------------------------------
(1)  143/     4D7 :                     				
(1)  144/     4D7 :                     
(1)  145/     4D7 :                     
(1)  146/     4D7 :                     
      18/     4D7 :                     
      19/     4D7 :                     
      20/     4D7 :                     ; =========================================================================================
      21/     4D7 :                     ; Main
      22/     4D7 :                     ; =========================================================================================
      23/     4D7 :                     
      24/     4D7 : (MACRO)             Start:			CALL BeginTerminal	; set up variables and clear video buffers			
      24/     4D7 : D4                          SEP R4
      24/     4D8 : 02 9C                       dw  BEGINTERMINAL
      25/     4DA :                     				
      26/     4DA : (MACRO)             			CALL VideoOn		; turn video on	
      26/     4DA : D4                          SEP R4
      26/     4DB : 02 A7                       dw  VIDEOON
      27/     4DD :                     					
      28/     4DD : 7B                  MainLoop:		SEQ			; turn on LED to signal input
      29/     4DE :                     
      30/     4DE : (MACRO)             			CALL GetChar		; get a character from input
      30/     4DE : D4                          SEP R4
      30/     4DF : 03 FA                       dw  GETCHAR
      31/     4E1 :                     			
      32/     4E1 : 7A                  			REQ 			; turn off LED to signal output					
      33/     4E2 :                     			
      34/     4E2 : (MACRO)             			CALL PutChar		; put the character on the display				
      34/     4E2 : D4                          SEP R4
      34/     4E3 : 04 14                       dw  PUTCHAR
      35/     4E5 :                       			
      36/     4E5 : 30 DD               			BR   MainLoop		; do it over and over
      37/     4E7 :                     ;-------------------------------------------------------------------------------------------
 AS V1.42 Beta [Bld 172] - Source File BasicTerminal.asm - Page 40 - 8/28/2020 13:37:18


  Symbol Table (* = unused):
  --------------------------

*ARCHITECTURE :                                        "i386-unknown-win32" - |
 BACKBUFFER :                 "OFF" - |  BACKSPACE :                    31F C |
 BCH_BLANK :                    36E C |  BCH_DONE :                     38E C |
 BCH_GETMASK :                  368 C |  BCH_LASTBYTE :                 37E C |
 BEGINTERMINAL :                29C C | *BIGENDIAN :                      0 - |
*BITFUNCSINC :                    1 - |  BLANKCHARACTER :               35A C |
 BLANKLINE :                    2FE C |  BL_LOOP :                      305 C |
*BRANCHEXT :                      0 - |  CANCELLINE :                   3E0 C |
*CASESENSITIVE :                  0 - | *CBB_EXIT :                     0DA C |
 CHARACTERPATTERN :            7F00 C |  CI_LOOP :                       67 C |
 CLEARSCREEN :                  3E7 C |  CM_DONE :                      337 C |
 CM_TEST :                      32E C | *CONSTPI :        3.141592653589793 - |
*COPYBACKBUFFER :               0DA C | *COPYIMAGE :                     61 C |
 CREATEMASK :                   329 C |  CURSORX :                     7F05 C |
 CURSORY :                     7F06 C | *DATE :                 "8/28/2020" - |
 DC_BLANK :                     356 C |  DC_BYTELOOP :                  151 C |
 DC_BYTESHIFT :                 15E C |  DC_BYTEWRITE :                 168 C |
 DC_COPYPATTERN :               14D C |  DC_MASKLOOP :                  13A C |
 DC_PREPARESECOND :             147 C |  DC_SHIFTLOOP :                 160 C |
 DC_SKIPHIGHBYTE :              11F C |  DC_SKIPHIGHBYTE2 :             128 C |
 DELAY :                         3C C |  DISPLAYBUFFER :               7D00 C |
 DISPLAYINT :                    44 C |  DOWNCURSOR :                   34B C |
 DRAWCHARACTER :                100 C |  DRAWSPRITE :                    89 C |
 DRAWSTRING :                   0DB C |  DSP_BYTELOOP :                 0A7 C |
 DSP_EXIT :                     0D9 C |  DSP_SHIFTEXIT :                0C6 C |
 DSP_SHIFTLOOP :                0BA C |  DSP_SKIPINCREMENT :             99 C |
 DS_EXIT :                      0FF C | *FALSE :                          0 - |
 FILLSCREEN :                    75 C |  FONT :                         17C C |
 FS_LOOP :                       7B C | *FULLPMMU :                       1 - |
 GC_RELEASE :                   400 C |  GETCHAR :                      3FA C |
 GETCURSOR :                    4C6 C |  HANDLECONTROLCHAR :            41B C |
*HAS64 :                          0 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
 HCC_BACKSPACE :                459 C |  HCC_CANCEL :                   44F C |
 HCC_DEL :                      454 C |  HCC_EXIT :                     472 C |
 HCC_FORMFEED :                 468 C |  HCC_NEWLINE :                  46D C |
 HCC_TAB :                      45E C |  HCC_UNIT :                     448 C |
 HCC_VTAB :                     463 C | *INEXTMODE :                      0 - |
*INIT :                           0 C | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
*INSUPMODE :                      0 - |  INT_EXIT :                      42 C |
 INT_LOOP :                      52 C |  INT_REST :                      59 C |
 LC_EXIT :                      3B3 C |  LC_HOME :                      3AD C |
 LC_PREVIOUSLINE :              39E C |  LEFTCURSOR :                   38F C |
*LISTON :                         1 - | *MACEXP :                         7 - |
 MAINLOOP :                     4DD C | *MOMCPU :                      1802 - |
*MOMCPUNAME :                "1802" - | *NESTMAX :                      100 - |
 NEXTLINE :                     33C C |  NL_EXIT :                      34A C |
*PACKING :                        0 - | *PADDING :                        1 - |
 PS_EXIT :                      4B4 C |  PS_WRITESTRING :               4A1 C |
 PUTCHAR :                      414 C | *PUTSTRING :                    49E C |
 R0 :                             0 - |  R1 :                             1 - |
 R2 :                             2 - |  R3 :                             3 - |
 R4 :                             4 - |  R5 :                             5 - |
 R6 :                             6 - | *R7 :                             7 - |
*R8 :                             8 - | *R9 :                             9 - |
*RA :                            0A - |  RB :                            0B - |
 AS V1.42 Beta [Bld 172] - Source File BasicTerminal.asm - Page 41 - 8/28/2020 13:37:18


 RC :                            0C - |  RC_EXIT :                      3CE C |
 RD :                            0D - |  RE :                            0E - |
 READHEXINPUT :                 408 C | *RELAXED :                        0 - |
 RESOLUTION :               "64x64" - |  RF :                            0F - |
 RHI_RELEASE :                  40C C |  RIGHTCURSOR :                  3B4 C |
 RUBOUT :                       3CF C |  SETCURSOR :                    4B5 C |
 SETVIDEOFLAG :                 2F5 C |  STACKTOP :                    7F7F C |
 START :                        4D7 C |  STC_EXIT :                      1F C |
 STDCALL :                       20 C |  STDRETURN :                     30 C |
 STR_EXIT :                      2F C |  TABCURSOR :                    311 C |
 TAB_EXIT :                     31E C | *TIME :                  "13:37:18" - |
*TRUE :                           1 - |  UNITSEPARATOR :                3D9 C |
 USEGRAPHICS :               "TRUE" - |  USETEXT :                   "TRUE" - |
 USETTY :                    "TRUE" - | *VERSION :                     142F - |
 VIDEOFLAG :                   7F07 C | *VIDEOOFF :                     2AF C |
 VIDEOOFFSETX :                 2E0 C |  VIDEOOFFSETY :                 2CF C |
 VIDEOON :                      2A7 C |  VY_DONE :                      2DF C |
 WAITFORINPUT :                 40F C |  WAITFORSAFEUPDATE :            2B8 C |
 WC_CONTROL :                   486 C |  WC_DRAW :                      48B C |
*WC_EXIT :                      49D C |  WC_SETCHAR :                   47C C |
 WC_UPDATECURSOR :              49A C |  WFI_RELEASE :                  411 C |
 WFSU_CHECK_DMA :               2C1 C |  WFSU_COUNT :                   2C7 C |
 WFSU_EXIT :                    2CE C |  WFSU_NEW_EF1 :                 2C5 C |
 WFSU_SYNC :                    2C3 C |  WRITECHAR :                    473 C |
*WRITEHEXOUTPUT :               403 C | *Z80SYNTAX :                      0 - |

    163 symbols
     42 unused symbols

 AS V1.42 Beta [Bld 172] - Source File BasicTerminal.asm - Page 42 - 8/28/2020 13:37:18


  Defined Macros:
  ---------------

CALL                                  | LOAD                                 
RETURN                                |

      3 macros

 AS V1.42 Beta [Bld 172] - Source File BasicTerminal.asm - Page 43 - 8/28/2020 13:37:18


  Defined Functions:
  ------------------

ROTRN                                 | ROTLN                                
SHRN                                  | SHLN                                 
GETBIT                                | EVEN                                 
ODD                                   | LOWORD                               
HIWORD                                | LO                                   
HI                                    | CUTOUT                               
INVMASK                               | MASK                                 

 AS V1.42 Beta [Bld 172] - Source File BasicTerminal.asm - Page 44 - 8/28/2020 13:37:18


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.16 seconds assembly time

   2215 lines source file
   2392 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
